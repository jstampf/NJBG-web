/*******  EasyGallery *********/
if not exists (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyGallery' and column_name = 'NumberOfViews')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyGallery] ADD NumberOfViews int Not Null DEFAULT (0)
END
if not exists (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyGallery' and column_name = 'AllUsersView')
BEGIN
 ALTER TABLE {databaseOwner}[{objectQualifier}EasyGallery] ADD AllUsersView bit Not Null DEFAULT (1)
END
if not exists (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyGallery' and column_name = 'AllUsersEdit')
BEGIN
 ALTER TABLE {databaseOwner}[{objectQualifier}EasyGallery] ADD AllUsersEdit bit Not Null DEFAULT (1)
END
IF (select IS_NULLABLE from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME ='{objectQualifier}EasyGallery' and COLUMN_NAME ='DateCreated') = 'YES'
BEGIN
UPDATE {databaseOwner}[{objectQualifier}EasyGallery] SET DateCreated=GETUTCDATE() WHERE DateCreated IS NULL
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGallery] ALTER COLUMN DateCreated DATETIME NOT NULL
END

if not exists (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyGallery' and column_name = 'PublishDate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyGallery] ADD PublishDate datetime Not Null DEFAULT GETUTCDATE();
	EXECUTE sp_executesql N'UPDATE {databaseOwner}[{objectQualifier}EasyGallery] SET PublishDate = DateCreated';
END
if not exists (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyGallery' and column_name = 'ExpireDate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyGallery] ADD ExpireDate datetime Null
END

if not exists (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyGallery' and column_name = 'Active')
BEGIN
 ALTER TABLE {databaseOwner}[{objectQualifier}EasyGallery] ADD Active bit Not Null DEFAULT (1)
END

if not exists (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyGallery' and column_name = 'Approved')
BEGIN
 ALTER TABLE {databaseOwner}[{objectQualifier}EasyGallery] ADD Approved bit Not Null DEFAULT (1)
END
/*******  EasyGallery *********/

/*******  EasyGalleryCategory *********/
if not exists (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyGalleryCategory' and column_name = 'AllUsersView')
BEGIN
 ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryCategory] ADD AllUsersView bit Not Null DEFAULT (1)
END
if not exists (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyGalleryCategory' and column_name = 'AllUsersEdit')
BEGIN
 ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryCategory] ADD AllUsersEdit bit Not Null DEFAULT (1)
END

ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryCategory] ALTER Column CategoryName nvarchar(500)
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryCategory] ALTER Column CategoryDescription nvarchar(2000)
/*******  EasyGalleryCategory *********/


/*******  EasyGalleryPictures *********/
if not exists (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyGalleryPictures' and column_name = 'NumberOfViews')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryPictures] ADD NumberOfViews INT CONSTRAINT DF_{objectQualifier}EasyGalleryPictures_NumberOfViews DEFAULT (0) NOT NULL
END

if not exists (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyGalleryPictures' and column_name = 'NumberOfLikes')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryPictures] ADD NumberOfLikes INT CONSTRAINT DF_{objectQualifier}EasyGalleryPictures_NumberOfLikes DEFAULT (0) NOT NULL
END

if not exists (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyGalleryPictures' and column_name = 'NumberOfDownloads')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryPictures] ADD NumberOfDownloads INT CONSTRAINT DF_{objectQualifier}EasyGalleryPictures_NumberOfDownloads DEFAULT (0) NOT NULL
END
if not exists (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyGalleryPictures' and column_name = 'FileSize')
BEGIN
 ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryPictures] ADD FileSize BIGINT CONSTRAINT DF_{objectQualifier}EasyGalleryPictures_FileSize DEFAULT (0) NOT NULL
END

if not exists (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyGalleryPictures' and column_name = 'ExifData')
BEGIN
 ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryPictures] ADD ExifData nvarchar(4000)
END

if not exists (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyGalleryPictures' and column_name = 'GPSLatitude')
BEGIN
 ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryPictures] ADD GPSLatitude float
END

if not exists (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyGalleryPictures' and column_name = 'GPSLongitude')
BEGIN
 ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryPictures] ADD GPSLongitude float
END

if not exists (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyGalleryPictures' and column_name = 'VideoDuration')
BEGIN
 ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryPictures] ADD VideoDuration int Null
END

if not exists (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyGalleryPictures' and column_name = 'Subtitle')
BEGIN
 ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryPictures] ADD Subtitle nvarchar(2000) NULL
END
UPDATE {databaseOwner}[{objectQualifier}EasyGalleryPictures] SET MediaApproved = 'True' WHERE MediaApproved IS NULL
/*******  EasyGalleryPictures *********/


/*******  EasyGalleryRolePermissions *********/
if not exists (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyGalleryRolePermissions' and column_name = 'AllowToLike')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryRolePermissions] ADD AllowToLike bit Not Null DEFAULT (0)
END
/*******  EasyGalleryRolePermissions *********/


/*******  EasyGalleryUserPermissions *********/
if not exists (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyGalleryUserPermissions' and column_name = 'AllowToLike')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryUserPermissions] ADD AllowToLike bit Not Null DEFAULT (0)
END
/*******  EasyGalleryUserPermissions *********/

/*******  Localization *********/
if not exists (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNMediaLocalization' and column_name = 'Subtitle')
BEGIN
 ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNMediaLocalization] ADD Subtitle nvarchar(2000) NULL
END

ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNCategoryLocalization] ALTER Column Title nvarchar(500)
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNCategoryLocalization] ALTER Column Description nvarchar(2000)

ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNGalleryLocalization] ALTER Column Title nvarchar(500)
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNGalleryLocalization] ALTER Column Description nvarchar(2000)

ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNMediaLocalization] ALTER Column Title nvarchar(250)
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNMediaLocalization] ALTER Column Description nvarchar(4000)
/*******  Localization *********/

/*******  Tables *********/
/****** Object:  Table {databaseOwner}[{objectQualifier}EasyGalleryGravityGallerySettings]    Script Date: 03/04/2014 09:56:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryGravityGallerySettings]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyGalleryGravityGallerySettings](
	[SettingsID] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NOT NULL,
	[ModuleID] [int] NOT NULL,
	[ThemeName] [nvarchar](150) NOT NULL,
	[ThemeFolder] [nvarchar](550) NOT NULL,
	[ThemeCssFile] [nvarchar](150) NOT NULL,
	[ThemeCssStlyeClass] [nvarchar](50) NOT NULL,
	[CategoryTemplate] [nvarchar](150) NOT NULL,
	[GalleryTemplate] [nvarchar](150) NOT NULL,
	[ItemTemplate] [nvarchar](150) NOT NULL,
	[DetailsTemplate] [nvarchar](150) NOT NULL,
	[DisplayCategories] [bit] NOT NULL,
	[CategoryThumbnailWidth] [int] NOT NULL,
	[CategoryThumbnailHeight] [int] NOT NULL,
	[NumberOfCategoryPagingLinks] [int] NOT NULL,
	[Numberofcategoryitemsperpage] [int] NOT NULL,
	[CategoryDisplayTitle] [bit] NOT NULL,
	[CategoryDisplayDescription] [bit] NOT NULL,
	[CategoryDisplayAllGalleries] [bit] NOT NULL,
	[CategoryDisplaySharingButtons] [bit] NOT NULL,
	[CategoryDisplayNumberOfGalleries] [bit] NOT NULL,
	[CategoryItemsSorting] [int] NOT NULL,
	[CategoryItemsSortingDirection] [int] NOT NULL,
	[CategoryDisplayShowRss] [bit] NOT NULL,
	[DisplayGalleries] [bit] NOT NULL,
	[DisplayItems] [bit] NOT NULL,
	[DisplayDetails] [bit] NOT NULL,
	[DetailsThumbnailWidth] [int] NOT NULL,
	[DetailsThumbnailHeight] [int] NOT NULL,
	[ItemsListThumbnailWidth] [int] NOT NULL,
	[ItemsListThumbnailHeight] [int] NOT NULL,
	[ItemsListDisplayTitle] [bit] NOT NULL,
	[ItemsListDisplayDescription] [bit] NOT NULL,
	[ItemsListDisplayUploaderInfo] [bit] NOT NULL,
	[ItemsListDisplayItemNumberOfViews] [bit] NOT NULL,
	[ItemsListDisplayNumberOfLikes] [bit] NOT NULL,
	[ItemsListDisplayNumberOfDownloads] [bit] NOT NULL,
	[ItemsListDisplayMediaRatingValue] [bit] NOT NULL,
	[ItemsListDisplayItemsShareButtons] [bit] NOT NULL,
	[ItemsListDisplayNumberOfComments] [bit] NOT NULL,
	[ItemsListNumberOfCommentsToDisplay] [int] NOT NULL,
	[ItemsListDisplayNewsLink] [bit] NOT NULL,
	[ItemsListDisplayMediaType] [bit] NOT NULL,
	[ItemsListDisplayShowRss] [bit] NOT NULL,
	[ListItemsSorting] [int] NOT NULL,
	[ListItemsSortingDirection] [int] NOT NULL,
	[ItemTitleLimit] [int] NOT NULL,
	[ItemDescriptionLimit] [int] NOT NULL,
	[GalleryThumbnailWidth] [int] NOT NULL,
	[GalleryThumbnailHeight] [int] NOT NULL,
	[GalleryDisplayAutorInfo] [bit] NOT NULL,
	[GalleryDisplaySharingButtons] [bit] NOT NULL,
	[GalleryDisplayNumberOfGalleryItems] [bit] NOT NULL,
	[GalleryDisplayNumberOfGalleryImages] [bit] NOT NULL,
	[GalleryDisplayNumberOfGalleryVideos] [bit] NOT NULL,
	[GalleryDisplayNumberOfGalleryAudios] [bit] NOT NULL,
	[GalleryDisplayNumberOfGalleryViews] [bit] NOT NULL,
	[GalleryDisplayShowRss] [bit] NOT NULL,
	[GalleryDisplayNewsLink] [bit] NOT NULL,
	[GalleryItemsSorting] [int] NOT NULL,
	[GalleryItemsSortingDirection] [int] NOT NULL,
	[GalleryTitleLimit] [int] NOT NULL,
	[GalleryDescriptionLimit] [int] NOT NULL,
	[GalleryDisplayTitle] [bit] NOT NULL,
	[GalleryDisplayDescription] [bit] NOT NULL,
	[Resizing] [int] NOT NULL,
	[LightboxType] [int] NOT NULL,
	[EmbedMedia] [bit] NOT NULL,
	[Numberofgalleryitemsperpage] [int] NOT NULL,
	[Numberofgallerypaginglinks] [int] NOT NULL,
	[NumberOfItemsListPagingLinks] [int] NOT NULL,
	[NumberOfItemsListItemsPerPage] [int] NOT NULL,
	[NumberOfRSSLinks] [int] NOT NULL,
	[IncludeImageInRssDescription] [bit] NOT NULL,
	[AvatarSource] [int] NOT NULL,
	[CategoryTitleLimit] [int] NOT NULL,
	[CategoryDescriptionLimit] [int] NOT NULL,
	[DetailsDisplayTitle] [bit] NOT NULL,
	[DetailsDisplayDescription] [bit] NOT NULL,
	[DetailsDisplayUploaderInfo] [bit] NOT NULL,
	[DetailsDisplayItemNumberOfViews] [bit] NOT NULL,
	[DetailsDisplayNumberOfLikes] [bit] NOT NULL,
	[DetailsDisplayNumberOfDownloads] [bit] NOT NULL,
	[DetailsDisplayMediaRatingValue] [bit] NOT NULL,
	[DetailsDisplayItemsShareButtons] [bit] NOT NULL,
	[DetailsDisplayMediaType] [bit] NOT NULL,
	[DetailsDisplayNewsLink] [bit] NOT NULL,
	[DetailsDisplayNumberOfComments] [bit] NOT NULL,
	[DetailsDisplayBreadCrumbs] [bit] NOT NULL,
	[DetailsDisplayLikeButtons] [bit] NOT NULL,
	[DetailsDisplayLikeButtonFacebook] [bit] NOT NULL,
	[DetailsDisplayLikeButtonGooglePlus] [bit] NOT NULL,
	[DetailsDisplayLikeButtonTwitter] [bit] NOT NULL,
	[DetailsDisplayLikeButtonPinterest] [bit] NOT NULL,
	[DetailsDisplayLikeButtonLinkedIn] [bit] NOT NULL,
	[EnableGoogleMaps] [bit] NOT NULL,
	[MapsZoom] [int] NOT NULL,
	[MapsType] [int] NOT NULL,
	[MapsShowMarkerInfo] [bit] NOT NULL,
	[MapWidth] [int] NOT NULL,
	[MapWidthType] [bit] NOT NULL,
	[MapHeight] [int] NOT NULL,
	[PaginationType] [tinyint] NOT NULL,
	[DisplayUsersWhoLikedMedia] [bit] NOT NULL,
	[NumberOfUsersWhoLikedMedia] [int] NOT NULL,
	[DetailsDisplayExifData] [bit] NOT NULL,
	[UseMasonryLayout] [bit] NOT NULL,
	[NewsModuleTabId] [int] NULL,
	[NewsModuleModuleId] [int] NULL,
	[GalleryDisplayBreadCrumbs] [bit] NOT NULL,
	[PostCommentNotificationToJournal] [bit] NOT NULL,
	[ItemListDisplayBreadCrumbs] [bit] NOT NULL,
	[ItemsListDisplayLikeButtons] [bit] NOT NULL,
	[ItemsListDisplayLikeButtonFacebook] [bit] NOT NULL,
	[ItemsListDisplayLikeButtonGooglePlus] [bit] NOT NULL,
	[ItemsListDisplayLikeButtonTwitter] [bit] NOT NULL,
	[ItemsListDisplayLikeButtonPinterest] [bit] NOT NULL,
	[ItemsListDisplayLikeButtonLinkedIn] [bit] NOT NULL,
	[EnableCommunityMode] [bit] NOT NULL,
	[PortalSharing] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyGalleryGravityGallerySettings] PRIMARY KEY CLUSTERED 
(
	[SettingsID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO


/****** Object:  ForeignKey [FK_{objectQualifier}EasyGalleryGravityGallerySettings_{objectQualifier}Modules]    Script Date: 03/04/2014 09:56:12 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryGravityGallerySettings_{objectQualifier}Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryGravityGallerySettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryGravityGallerySettings]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyGalleryGravityGallerySettings_{objectQualifier}Modules] FOREIGN KEY([ModuleID])
REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryGravityGallerySettings_{objectQualifier}Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryGravityGallerySettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryGravityGallerySettings] CHECK CONSTRAINT [FK_{objectQualifier}EasyGalleryGravityGallerySettings_{objectQualifier}Modules]
GO
/****** Object:  ForeignKey [FK_{objectQualifier}EasyGalleryGravityGallerySettings_{objectQualifier}Portals]    Script Date: 03/04/2014 09:56:12 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryGravityGallerySettings_{objectQualifier}Portals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryGravityGallerySettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryGravityGallerySettings]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyGalleryGravityGallerySettings_{objectQualifier}Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryGravityGallerySettings_{objectQualifier}Portals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryGravityGallerySettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryGravityGallerySettings] CHECK CONSTRAINT [FK_{objectQualifier}EasyGalleryGravityGallerySettings_{objectQualifier}Portals]
GO

/****** Object:  Table {databaseOwner}[{objectQualifier}EasyGalleryModuleGallery]    Script Date: 03/04/2014 10:07:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryModuleGallery]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyGalleryModuleGallery](
	[ModuleID] [int] NOT NULL,
	[GalleryID] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyGalleryModuleGallery] PRIMARY KEY CLUSTERED 
(
	[ModuleID] ASC,
	[GalleryID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
/****** Object:  ForeignKey [FK_{objectQualifier}EasyGalleryModuleGallery_{objectQualifier}Modules]    Script Date: 03/04/2014 10:07:41 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryModuleGallery_{objectQualifier}Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryModuleGallery]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryModuleGallery]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyGalleryModuleGallery_{objectQualifier}Modules] FOREIGN KEY([ModuleID])
REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryModuleGallery_{objectQualifier}Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryModuleGallery]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryModuleGallery] CHECK CONSTRAINT [FK_{objectQualifier}EasyGalleryModuleGallery_{objectQualifier}Modules]
GO
/****** Object:  ForeignKey [FK_{objectQualifier}EasyGalleryModuleGallery_EasyGallery]    Script Date: 03/04/2014 10:07:41 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryModuleGallery_EasyGallery]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryModuleGallery]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryModuleGallery]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyGalleryModuleGallery_EasyGallery] FOREIGN KEY([GalleryID])
REFERENCES {databaseOwner}[{objectQualifier}EasyGallery] ([GalleryID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryModuleGallery_EasyGallery]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryModuleGallery]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryModuleGallery] CHECK CONSTRAINT [FK_{objectQualifier}EasyGalleryModuleGallery_EasyGallery]
GO

/****** Object:  Table {databaseOwner}[{objectQualifier}EasyGalleryImageSizes]    Script Date: 03/04/2014 10:11:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryImageSizes]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyGalleryImageSizes](
	[PictureID] [int] NOT NULL,
	[Width] [int] NOT NULL,
	[Height] [int] NOT NULL,
	[ResizeMethod] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyGalleryImageSizes] PRIMARY KEY CLUSTERED 
(
	[PictureID] ASC,
	[Width] ASC,
	[Height] ASC,
	[ResizeMethod] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
/****** Object:  ForeignKey [FK_{objectQualifier}EasyGalleryImageSizes_EasyGalleryPictures]    Script Date: 03/04/2014 10:11:34 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryImageSizes_EasyGalleryPictures]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryImageSizes]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryImageSizes]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyGalleryImageSizes_EasyGalleryPictures] FOREIGN KEY([PictureID])
REFERENCES {databaseOwner}[{objectQualifier}EasyGalleryPictures] ([PictureID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryImageSizes_EasyGalleryPictures]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryImageSizes]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryImageSizes] CHECK CONSTRAINT [FK_{objectQualifier}EasyGalleryImageSizes_EasyGalleryPictures]
GO

/****** Object:  Table {databaseOwner}[{objectQualifier}EasyGalleryUserLikes]    Script Date: 03/04/2014 10:23:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryUserLikes]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyGalleryUserLikes](
	[PictureID] [int] NOT NULL,
	[UserID] [int] NOT NULL,
	[LikeDate] [datetime] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyGalleryUserLikes] PRIMARY KEY CLUSTERED 
(
	[PictureID] ASC,
	[UserID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
/****** Object:  Default [DF_{objectQualifier}EasyGalleryUserLikes_LikeDate]    Script Date: 03/04/2014 10:23:09 ******/
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[DF_{objectQualifier}EasyGalleryUserLikes_LikeDate]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryUserLikes]'))
Begin
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[DF_{objectQualifier}EasyGalleryUserLikes_LikeDate]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryUserLikes] ADD  CONSTRAINT [DF_{objectQualifier}EasyGalleryUserLikes_LikeDate]  DEFAULT (getutcdate()) FOR [LikeDate]
END


End
GO
/****** Object:  ForeignKey [FK_{objectQualifier}EasyGalleryUserLikes_EasyGalleryPictures]    Script Date: 03/04/2014 10:23:09 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryUserLikes_EasyGalleryPictures]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryUserLikes]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryUserLikes]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyGalleryUserLikes_EasyGalleryPictures] FOREIGN KEY([PictureID])
REFERENCES {databaseOwner}[{objectQualifier}EasyGalleryPictures] ([PictureID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryUserLikes_EasyGalleryPictures]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryUserLikes]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryUserLikes] CHECK CONSTRAINT [FK_{objectQualifier}EasyGalleryUserLikes_EasyGalleryPictures]
GO
/****** Object:  ForeignKey [FK_{objectQualifier}EasyGalleryUserLikes_Users]    Script Date: 03/04/2014 10:23:09 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryUserLikes_Users]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryUserLikes]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryUserLikes]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyGalleryUserLikes_Users] FOREIGN KEY([UserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryUserLikes_Users]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryUserLikes]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryUserLikes] CHECK CONSTRAINT [FK_{objectQualifier}EasyGalleryUserLikes_Users]
GO

/****** Object:  Table {databaseOwner}[{objectQualifier}EasyGalleryModuleCategory]    Script Date: 03/04/2014 10:27:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryModuleCategory]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyGalleryModuleCategory](
	[ModuleID] [int] NOT NULL,
	[CategoryID] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyGalleryModuleCategory] PRIMARY KEY CLUSTERED 
(
	[ModuleID] ASC,
	[CategoryID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
/****** Object:  ForeignKey [FK_{objectQualifier}EasyGalleryModuleCategory_{objectQualifier}EasyGalleryCategory]    Script Date: 03/04/2014 10:27:40 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryModuleCategory_{objectQualifier}EasyGalleryCategory]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryModuleCategory]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryModuleCategory]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyGalleryModuleCategory_{objectQualifier}EasyGalleryCategory] FOREIGN KEY([CategoryID])
REFERENCES {databaseOwner}[{objectQualifier}EasyGalleryCategory] ([CategoryID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryModuleCategory_{objectQualifier}EasyGalleryCategory]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryModuleCategory]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryModuleCategory] CHECK CONSTRAINT [FK_{objectQualifier}EasyGalleryModuleCategory_{objectQualifier}EasyGalleryCategory]
GO
/****** Object:  ForeignKey [FK_{objectQualifier}EasyGalleryModuleCategory_{objectQualifier}Modules]    Script Date: 03/04/2014 10:27:40 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryModuleCategory_{objectQualifier}Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryModuleCategory]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryModuleCategory]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyGalleryModuleCategory_{objectQualifier}Modules] FOREIGN KEY([ModuleID])
REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryModuleCategory_{objectQualifier}Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryModuleCategory]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryModuleCategory] CHECK CONSTRAINT [FK_{objectQualifier}EasyGalleryModuleCategory_{objectQualifier}Modules]
GO

/****** Object:  Table {databaseOwner}[{objectQualifier}EasyGalleryMediaDownloadInfo]    Script Date: 03/04/2014 10:48:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryMediaDownloadInfo]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyGalleryMediaDownloadInfo](
	[DownloadInfoID] [int] IDENTITY(1,1) NOT NULL,
	[PictureID] [int] NOT NULL,
	[UserID] [int] NULL,
	[DateDownload] [datetime] NOT NULL,
	[DownloadIP] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyGalleryMediaDownloadInfo] PRIMARY KEY CLUSTERED 
(
	[DownloadInfoID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
/****** Object:  Default [DF_{objectQualifier}EasyGalleryMediaDownloadInfo_DateDownload]    Script Date: 03/04/2014 10:48:00 ******/
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[DF_{objectQualifier}EasyGalleryMediaDownloadInfo_DateDownload]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryMediaDownloadInfo]'))
Begin
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[DF_{objectQualifier}EasyGalleryMediaDownloadInfo_DateDownload]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryMediaDownloadInfo] ADD  CONSTRAINT [DF_{objectQualifier}EasyGalleryMediaDownloadInfo_DateDownload]  DEFAULT (getutcdate()) FOR [DateDownload]
END


End
GO
/****** Object:  ForeignKey [FK_{objectQualifier}EasyGalleryMediaDownloadInfo_EasyGalleryPictures]    Script Date: 03/04/2014 10:48:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryMediaDownloadInfo_EasyGalleryPictures]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryMediaDownloadInfo]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryMediaDownloadInfo]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyGalleryMediaDownloadInfo_EasyGalleryPictures] FOREIGN KEY([PictureID])
REFERENCES {databaseOwner}[{objectQualifier}EasyGalleryPictures] ([PictureID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryMediaDownloadInfo_EasyGalleryPictures]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryMediaDownloadInfo]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryMediaDownloadInfo] CHECK CONSTRAINT [FK_{objectQualifier}EasyGalleryMediaDownloadInfo_EasyGalleryPictures]
GO
/****** Object:  ForeignKey [FK_{objectQualifier}EasyGalleryMediaDownloadInfo_Users]    Script Date: 03/04/2014 10:48:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryMediaDownloadInfo_Users]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryMediaDownloadInfo]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryMediaDownloadInfo]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyGalleryMediaDownloadInfo_Users] FOREIGN KEY([UserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
ON DELETE SET NULL
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryMediaDownloadInfo_Users]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryMediaDownloadInfo]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryMediaDownloadInfo] CHECK CONSTRAINT [FK_{objectQualifier}EasyGalleryMediaDownloadInfo_Users]
GO

/****** Object:  Table {databaseOwner}[{objectQualifier}EasyGalleryCategoryRoleUserPermissions]    Script Date: 03/04/2014 10:55:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryCategoryRoleUserPermissions]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyGalleryCategoryRoleUserPermissions](
	[PermissionID] [int] IDENTITY(1,1) NOT NULL,
	[CategoryID] [int] NOT NULL,
	[UserID] [int] NULL,
	[RoleID] [int] NULL,
	[View] [bit] NOT NULL,
	[Edit] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyGalleryCategoryRoleUserPermissions] PRIMARY KEY CLUSTERED 
(
	[PermissionID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
/****** Object:  ForeignKey [FK_{objectQualifier}EasyGalleryCategoryRoleUserPermissions_{objectQualifier}EasyGalleryCategory]    Script Date: 03/04/2014 10:55:23 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryCategoryRoleUserPermissions_{objectQualifier}EasyGalleryCategory]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryCategoryRoleUserPermissions]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryCategoryRoleUserPermissions]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyGalleryCategoryRoleUserPermissions_{objectQualifier}EasyGalleryCategory] FOREIGN KEY([CategoryID])
REFERENCES {databaseOwner}[{objectQualifier}EasyGalleryCategory] ([CategoryID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryCategoryRoleUserPermissions_{objectQualifier}EasyGalleryCategory]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryCategoryRoleUserPermissions]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryCategoryRoleUserPermissions] CHECK CONSTRAINT [FK_{objectQualifier}EasyGalleryCategoryRoleUserPermissions_{objectQualifier}EasyGalleryCategory]
GO

/****** Object:  Table {databaseOwner}[{objectQualifier}EasyGalleryRoleUserPermissions]    Script Date: 03/04/2014 11:04:52 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryRoleUserPermissions]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyGalleryRoleUserPermissions](
	[PermissionID] [int] IDENTITY(1,1) NOT NULL,
	[GalleryID] [int] NOT NULL,
	[RoleID] [int] NULL,
	[UserID] [int] NULL,
	[View] [bit] NOT NULL,
	[Edit] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyGalleryRoleUserPermissions] PRIMARY KEY CLUSTERED 
(
	[PermissionID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
/****** Object:  ForeignKey [FK_{objectQualifier}EasyGalleryRoleUserPermissions_{objectQualifier}Roles]    Script Date: 03/04/2014 11:04:52 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryRoleUserPermissions_{objectQualifier}Roles]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryRoleUserPermissions]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryRoleUserPermissions]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyGalleryRoleUserPermissions_{objectQualifier}Roles] FOREIGN KEY([RoleID])
REFERENCES {databaseOwner}[{objectQualifier}Roles] ([RoleID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryRoleUserPermissions_{objectQualifier}Roles]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryRoleUserPermissions]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryRoleUserPermissions] CHECK CONSTRAINT [FK_{objectQualifier}EasyGalleryRoleUserPermissions_{objectQualifier}Roles]
GO
/****** Object:  ForeignKey [FK_{objectQualifier}EasyGalleryRoleUserPermissions_EasyGallery]    Script Date: 03/04/2014 11:04:52 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryRoleUserPermissions_EasyGallery]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryRoleUserPermissions]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryRoleUserPermissions]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyGalleryRoleUserPermissions_EasyGallery] FOREIGN KEY([GalleryID])
REFERENCES {databaseOwner}[{objectQualifier}EasyGallery] ([GalleryID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryRoleUserPermissions_EasyGallery]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryRoleUserPermissions]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryRoleUserPermissions] CHECK CONSTRAINT [FK_{objectQualifier}EasyGalleryRoleUserPermissions_EasyGallery]
GO
/****** Object:  ForeignKey [FK_{objectQualifier}EasyGalleryRoleUserPermissions_Users]    Script Date: 03/04/2014 11:04:52 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryRoleUserPermissions_Users]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryRoleUserPermissions]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryRoleUserPermissions]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyGalleryRoleUserPermissions_Users] FOREIGN KEY([UserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryRoleUserPermissions_Users]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryRoleUserPermissions]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryRoleUserPermissions] CHECK CONSTRAINT [FK_{objectQualifier}EasyGalleryRoleUserPermissions_Users]
GO

/****** Object:  Table {databaseOwner}[{objectQualifier}EasyGalleryPortalSettings]    Script Date: 03/04/2014 11:23:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryPortalSettings]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyGalleryPortalSettings](
	[PortalID] [int] NOT NULL,
	[GoogleAPIKey] [nvarchar](300) NULL,
 CONSTRAINT [PK_{objectQualifier}EasyGalleryPortalSettings] PRIMARY KEY CLUSTERED 
(
	[PortalID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
/****** Object:  ForeignKey [FK_{objectQualifier}EasyGalleryPortalSettings_{objectQualifier}Portals]    Script Date: 03/04/2014 11:23:50 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryPortalSettings_{objectQualifier}Portals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryPortalSettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryPortalSettings]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyGalleryPortalSettings_{objectQualifier}Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryPortalSettings_{objectQualifier}Portals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryPortalSettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryPortalSettings] CHECK CONSTRAINT [FK_{objectQualifier}EasyGalleryPortalSettings_{objectQualifier}Portals]
GO

/****** Object:  Table {databaseOwner}[{objectQualifier}EasyGalleryRSSFeedImport]    Script Date: 03/04/2014 11:36:15 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryRSSFeedImport]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyGalleryRSSFeedImport](
	[RSSID] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NOT NULL,
	[RSSURL] [nvarchar](1000) NOT NULL,
	[UserID] [int] NOT NULL,
	[CategoryID] [int] NOT NULL,
	[GalleryID] [int] NOT NULL,
	[Active] [bit] NOT NULL,
	[UseTitle] [bit] NOT NULL,
	[UseDescription] [bit] NOT NULL,
	[PortalHomeDir] [nvarchar](1000) NOT NULL,
	[LimitNumberOfImages] [int] NOT NULL,
	[SummaryLimit] [int] NOT NULL,
	[RSSType] [nvarchar](20) NOT NULL,
	[ModuleID] [int] NOT NULL,
	[ImportYouTubeStats] [bit] NOT NULL,
	[DownloadEnclosureMedia] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyGalleryRSSFeedImport] PRIMARY KEY CLUSTERED 
(
	[RSSID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}EasyGalleryRSSMedia]    Script Date: 03/04/2014 11:36:15 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryRSSMedia]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyGalleryRSSMedia](
	[RSSID] [int] NOT NULL,
	[PictureID] [int] NOT NULL,
	[PortalID] [int] NOT NULL,
	[CheckType] [nvarchar](5) NOT NULL,
	[CheckData] [nvarchar](1000) NOT NULL,
	[FeedType] [nvarchar](10) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyGalleryRssMedia] PRIMARY KEY CLUSTERED 
(
	[RSSID] ASC,
	[PictureID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
/****** Object:  Default [DF_{objectQualifier}EasyGalleryRSSFeedImport_ModuleID]    Script Date: 03/04/2014 11:36:15 ******/
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[DF_{objectQualifier}EasyGalleryRSSFeedImport_ModuleID]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryRSSFeedImport]'))
Begin
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[DF_{objectQualifier}EasyGalleryRSSFeedImport_ModuleID]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryRSSFeedImport] ADD  CONSTRAINT [DF_{objectQualifier}EasyGalleryRSSFeedImport_ModuleID]  DEFAULT ((322)) FOR [ModuleID]
END


End
GO
/****** Object:  Default [DF_{objectQualifier}EasyGalleryRSSFeedImport_ImportYouTubeStats]    Script Date: 03/04/2014 11:36:15 ******/
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[DF_{objectQualifier}EasyGalleryRSSFeedImport_ImportYouTubeStats]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryRSSFeedImport]'))
Begin
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[DF_{objectQualifier}EasyGalleryRSSFeedImport_ImportYouTubeStats]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryRSSFeedImport] ADD  CONSTRAINT [DF_{objectQualifier}EasyGalleryRSSFeedImport_ImportYouTubeStats]  DEFAULT ((0)) FOR [ImportYouTubeStats]
END


End
GO
/****** Object:  Default [DF_{objectQualifier}EasyGalleryRSSFeedImport_DownloadEnclosureMedia]    Script Date: 03/04/2014 11:36:15 ******/
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[DF_{objectQualifier}EasyGalleryRSSFeedImport_DownloadEnclosureMedia]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryRSSFeedImport]'))
Begin
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[DF_{objectQualifier}EasyGalleryRSSFeedImport_DownloadEnclosureMedia]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryRSSFeedImport] ADD  CONSTRAINT [DF_{objectQualifier}EasyGalleryRSSFeedImport_DownloadEnclosureMedia]  DEFAULT ((0)) FOR [DownloadEnclosureMedia]
END


End
GO
/****** Object:  ForeignKey [FK_{objectQualifier}EasyGalleryRSSFeedImport_{objectQualifier}EasyGallery]    Script Date: 03/04/2014 11:36:15 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryRSSFeedImport_{objectQualifier}EasyGallery]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryRSSFeedImport]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryRSSFeedImport]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyGalleryRSSFeedImport_{objectQualifier}EasyGallery] FOREIGN KEY([GalleryID])
REFERENCES {databaseOwner}[{objectQualifier}EasyGallery] ([GalleryID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryRSSFeedImport_{objectQualifier}EasyGallery]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryRSSFeedImport]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryRSSFeedImport] CHECK CONSTRAINT [FK_{objectQualifier}EasyGalleryRSSFeedImport_{objectQualifier}EasyGallery]
GO
/****** Object:  ForeignKey [FK_{objectQualifier}EasyGalleryRSSFeedImport_{objectQualifier}Portals]    Script Date: 03/04/2014 11:36:15 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryRSSFeedImport_{objectQualifier}Portals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryRSSFeedImport]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryRSSFeedImport]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyGalleryRSSFeedImport_{objectQualifier}Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryRSSFeedImport_{objectQualifier}Portals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryRSSFeedImport]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryRSSFeedImport] CHECK CONSTRAINT [FK_{objectQualifier}EasyGalleryRSSFeedImport_{objectQualifier}Portals]
GO
/****** Object:  ForeignKey [FK_{objectQualifier}EasyGalleryRssMedia_{objectQualifier}EasyGalleryPictures]    Script Date: 03/04/2014 11:36:15 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryRssMedia_{objectQualifier}EasyGalleryPictures]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryRSSMedia]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryRSSMedia]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyGalleryRssMedia_{objectQualifier}EasyGalleryPictures] FOREIGN KEY([PictureID])
REFERENCES {databaseOwner}[{objectQualifier}EasyGalleryPictures] ([PictureID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryRssMedia_{objectQualifier}EasyGalleryPictures]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryRSSMedia]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryRSSMedia] CHECK CONSTRAINT [FK_{objectQualifier}EasyGalleryRssMedia_{objectQualifier}EasyGalleryPictures]
GO

/****** Object:  Table {databaseOwner}[{objectQualifier}EasyGalleryPortfolioProSettings]    Script Date: 03/04/2014 11:40:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryPortfolioProSettings]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyGalleryPortfolioProSettings](
	[SettingsID] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NOT NULL,
	[ModuleID] [int] NOT NULL,
	[CategoryID] [int] NOT NULL,
	[GalleryID] [int] NOT NULL,
	[ThumbnailWidth] [int] NOT NULL,
	[ThumbnailHeight] [int] NOT NULL,
	[ShowTitle] [bit] NOT NULL,
	[ShowDescription] [bit] NOT NULL,
	[ItemsPerPage] [int] NOT NULL,
	[DisplayNestedGalleries] [bit] NOT NULL,
	[DisplayAllNestedGalleries] [bit] NOT NULL,
	[NestedAnimationType] [int] NOT NULL,
	[CaptionAnimation] [int] NOT NULL,
	[GridAdjustment] [int] NOT NULL,
	[ItemsGapHorizontal] [int] NOT NULL,
	[ItemsGapVertical] [int] NOT NULL,
	[ImagesDisplayType] [int] NOT NULL,
	[DisplayTypeSpeed] [int] NOT NULL,
	[LightboxType] [int] NOT NULL,
	[ShowImageCounter] [bit] NOT NULL,
	[ShowTitleInLightbox] [bit] NOT NULL,
	[NestedNavigationType] [int] NOT NULL,
	[ShowSubtitle] [bit] NOT NULL,
	[TempalteName] [nvarchar](255) NOT NULL,
	[GridClass] [nvarchar](20) NOT NULL,
	[LiClass] [nvarchar](20) NOT NULL,
	[InlinePosition] [int] NOT NULL,
	[CssTheme] [nvarchar](255) NOT NULL,
	[MediaSorting] [nvarchar](15) NOT NULL,
	[MediaSortingAscType] [nvarchar](4) NOT NULL,
	[ImportedModule] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyGalleryPortfolioProSettings] PRIMARY KEY CLUSTERED 
(
	[SettingsID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO

/****** Object:  ForeignKey [FK_{objectQualifier}EasyGalleryPortfolioProSettings_{objectQualifier}Modules]    Script Date: 03/04/2014 11:40:21 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryPortfolioProSettings_{objectQualifier}Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryPortfolioProSettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryPortfolioProSettings]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyGalleryPortfolioProSettings_{objectQualifier}Modules] FOREIGN KEY([ModuleID])
REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryPortfolioProSettings_{objectQualifier}Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryPortfolioProSettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryPortfolioProSettings] CHECK CONSTRAINT [FK_{objectQualifier}EasyGalleryPortfolioProSettings_{objectQualifier}Modules]
GO
/****** Object:  ForeignKey [FK_{objectQualifier}EasyGalleryPortfolioProSettings_{objectQualifier}Portals]    Script Date: 03/04/2014 11:40:21 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryPortfolioProSettings_{objectQualifier}Portals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryPortfolioProSettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryPortfolioProSettings]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyGalleryPortfolioProSettings_{objectQualifier}Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyGalleryPortfolioProSettings_{objectQualifier}Portals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyGalleryPortfolioProSettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryPortfolioProSettings] CHECK CONSTRAINT [FK_{objectQualifier}EasyGalleryPortfolioProSettings_{objectQualifier}Portals]
GO

/*******  Tables *********/

/*******  Stored Procedures *********/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNGalleryPermissions]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNGalleryPermissions]
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNGalleryPermissions]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNGalleryPermissions]
    @UserID int,
    @PortalID int,
    @ModuleID int
AS 
SET NOCOUNT ON;
IF @UserID = -1
BEGIN
	SELECT [AllowToComment],[CommentEditing],[CommentDeleting],[AllowToRate],[ShowComments],[ShowRating],[AllowToDownload], [AllowToLike] FROM {databaseOwner}{objectQualifier}EasyGalleryRolePermissions WHERE RoleID IS NULL AND ModuleID = @ModuleID;
END
ELSE
BEGIN
	WITH RoleAndUserRights as
	(
		SELECT DISTINCT [AllowToComment],[CommentEditing],[CommentDeleting],[AllowToRate],[ShowComments],[ShowRating], [AllowToDownload], [AllowToLike]
			FROM {databaseOwner}{objectQualifier}EasyGalleryRolePermissions AS rps INNER JOIN {databaseOwner}{objectQualifier}UserRoles AS ur ON ur.RoleID = rps.RoleID INNER JOIN {databaseOwner}{objectQualifier}Roles as r ON r.RoleID = ur.RoleID
		WHERE ur.UserID = @UserID AND rps.ModuleID = @ModuleID AND r.PortalID = @PortalID
		UNION
		SELECT [AllowToComment],[CommentEditing],[CommentDeleting],[AllowToRate],[ShowComments],[ShowRating],[AllowToDownload], [AllowToLike] FROM  {databaseOwner}{objectQualifier}EasyGalleryUserPermissions AS ups
		WHERE ups.UserID = @UserID AND ups.ModuleID = @ModuleID
	)
	SELECT TOP(1)
		CASE WHEN EXISTS (SELECT AllowToComment FROM RoleAndUserRights WHERE AllowToComment = 1) THEN CAST(1 AS bit) ELSE CAST(0 AS bit) END AS AllowToComment,
		CASE WHEN EXISTS (SELECT CommentEditing FROM RoleAndUserRights WHERE CommentEditing = 1) THEN CAST(1 AS bit) ELSE CAST(0 AS bit) END AS CommentEditing,
		CASE WHEN EXISTS (SELECT CommentDeleting FROM RoleAndUserRights WHERE CommentDeleting = 1) THEN CAST(1 AS bit) ELSE CAST(0 AS bit) END AS CommentDeleting,
		CASE WHEN EXISTS (SELECT AllowToRate FROM RoleAndUserRights WHERE AllowToRate = 1) THEN CAST(1 AS bit) ELSE CAST(0 AS bit) END AS AllowToRate,
		CASE WHEN EXISTS (SELECT ShowComments FROM RoleAndUserRights WHERE ShowComments = 1) THEN CAST(1 AS bit) ELSE CAST(0 AS bit) END AS ShowComments,
		CASE WHEN EXISTS (SELECT ShowRating FROM RoleAndUserRights WHERE ShowRating = 1) THEN CAST(1 AS bit) ELSE CAST(0 AS bit) END AS ShowRating,
		CASE WHEN EXISTS (SELECT AllowToDownload FROM RoleAndUserRights WHERE AllowToDownload = 1) THEN CAST(1 AS bit) ELSE CAST(0 AS bit) END AS AllowToDownload,
		CASE WHEN EXISTS (SELECT AllowToLike FROM RoleAndUserRights WHERE AllowToLike = 1) THEN CAST(1 AS bit) ELSE CAST(0 AS bit) END AS AllowToLike
	FROM RoleAndUserRights
END' 
END
/*******  Stored Procedures *********/