IF NOT EXISTS (SELECT RotatorTypeID FROM {databaseOwner}[{objectQualifier}EasyDNNRotatorType] WHERE RotatorTypeID = 19)
BEGIN
	INSERT {databaseOwner}[{objectQualifier}EasyDNNRotatorType] ([RotatorTypeID],[Name],[Description],[Identifier],[Position]) VALUES(19,'Slider With Animated Layers','(Images + Title + Description)','SliderWithAnimatedLayers',19)
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNRotatorMultiRSettings' and column_name = 'Layout')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNRotatorMultiRSettings] ADD Layout VARCHAR(64) NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNRotatorMultiRSettings' and column_name = 'FullscreenMargin')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNRotatorMultiRSettings] ADD FullscreenMargin INT NULL
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNRotatorNewsBridge' and column_name = 'ImageSizes')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNRotatorNewsBridge] ADD ImageSizes XML NULL
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNRotatorGallTempContent' and column_name = 'ImageSizes')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNRotatorGallTempContent] ADD ImageSizes XML NULL
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNRotatorNewsSettings' and column_name = 'OrderByCustomFieldID')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNRotatorNewsSettings] ADD OrderByCustomFieldID INT NULL
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNRotatorNewsSettings' and column_name = 'OrderBySecondCustomFieldID')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNRotatorNewsSettings] ADD OrderBySecondCustomFieldID INT NULL
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNRotatorNewsSettings' and column_name = 'OrderByThirdCustomFieldID')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNRotatorNewsSettings] ADD OrderByThirdCustomFieldID INT NULL
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNRotatorContentInfo]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNRotatorContentInfo](
	[ModuleID] [int] NOT NULL,
	[ContentID] [int] NOT NULL,
	[ImageSizes] [xml] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNRotatorContentInfo] PRIMARY KEY CLUSTERED 
(
	[ModuleID] ASC,
	[ContentID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNRotatorContentInfo_EasyDNNRotatorContent]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNRotatorContentInfo]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNRotatorContentInfo]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNRotatorContentInfo_EasyDNNRotatorContent] FOREIGN KEY([ContentID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNRotatorContent] ([ContentID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNRotatorContentInfo_EasyDNNRotatorContent]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNRotatorContentInfo]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNRotatorContentInfo] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNRotatorContentInfo_EasyDNNRotatorContent]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNRotatorContentInfo_EasyDNNRotatorModule]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNRotatorContentInfo]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNRotatorContentInfo]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNRotatorContentInfo_EasyDNNRotatorModule] FOREIGN KEY([ModuleID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNRotatorModule] ([ModuleID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNRotatorContentInfo_EasyDNNRotatorModule]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNRotatorContentInfo]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNRotatorContentInfo] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNRotatorContentInfo_EasyDNNRotatorModule]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EDS_RotatorNewsViewCategories]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION {databaseOwner}[{objectQualifier}EDS_RotatorNewsViewCategories]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EDS_UserInRoles]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION {databaseOwner}[{objectQualifier}EDS_UserInRoles]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EDS_NewsOrderByColumnName]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION {databaseOwner}[{objectQualifier}EDS_NewsOrderByColumnName]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EDS_NewsOrderByColumnName]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION {databaseOwner}[{objectQualifier}EDS_NewsOrderByColumnName]
(
	@OrderByCustomFieldID INT
)
RETURNS VARCHAR(30)
AS
BEGIN
	IF @OrderByCustomFieldID IS NULL
	RETURN NULL;
		
	DECLARE @ControlTypeID INT;

	SELECT @ControlTypeID = [ControlTypeID] FROM {databaseOwner}[{objectQualifier}EasyDNNfields] WHERE CustomFieldID = @OrderByCustomFieldID AND IsOrderable = 1;
	
	IF @ControlTypeID IS NULL
	RETURN NULL;
	
	DECLARE @OrderByColumnName VARCHAR(30);

	SELECT @OrderByColumnName =
	CASE @ControlTypeID
		WHEN 1 THEN N''[Text]''
		WHEN 3 THEN N''[Int]''
		WHEN 4 THEN N''[Decimal]''
		WHEN 5 THEN N''[Decimal]''
		WHEN 6 THEN N''[Text]''
		WHEN 9 THEN N''[DateTime]''
		WHEN 10 THEN N''[Text]''
		ELSE NULL
	END
	
	RETURN @OrderByColumnName;
END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EDS_UserInRoles]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'
CREATE FUNCTION {databaseOwner}[{objectQualifier}EDS_UserInRoles]
(
	@UserID INT,
	@PortalID INT,
	@CurrentDate DATETIME
)
RETURNS 
@UserInRoles TABLE (RoleID INT NOT NULL PRIMARY KEY)
AS
BEGIN
	IF @UserID <> -1
	INSERT INTO @UserInRoles
	SELECT DISTINCT r.[RoleID]
	FROM {databaseOwner}[{objectQualifier}Roles] AS r
	INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
	WHERE ur.UserID = @UserID
		AND r.PortalID = @PortalID
		AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
		AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate);
		RETURN 
END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EDS_RotatorNewsViewCategories]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'
CREATE FUNCTION {databaseOwner}[{objectQualifier}EDS_RotatorNewsViewCategories]
(
	@UserID INT,
	@PortalID INT,
	@AdminOrSuperUser BIT,
	@PermissionSettingsSource TINYINT,
	@PermissionsModuleID INT,
	@CurrentDate DATETIME
)
RETURNS 
@UserViewCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY)
AS
BEGIN
	DECLARE @SettingsSource BIT;

	IF @AdminOrSuperUser = 1 OR @PermissionSettingsSource = 0
		INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
	ELSE IF @UserID = -1
	BEGIN	
		IF @PermissionSettingsSource = 1 -- by portal
		BEGIN
			IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			ELSE
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
		END
		ELSE -- by module
		BEGIN
			SELECT @SettingsSource = PermissionsPMSource FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleID;
			IF @SettingsSource = 1
			BEGIN
				IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
					INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
				ELSE
					INSERT INTO @UserViewCategories
					SELECT rpsc.[CategoryID] FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
					WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
			END
			ELSE
			BEGIN
				IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
					INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
				ELSE
					INSERT INTO @UserViewCategories
					SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID AND rps.RoleID IS NULL;
			END
		END
	END
	ELSE -- registrirani korisnik
	BEGIN
		IF @PermissionSettingsSource = 1 -- by portal
		BEGIN
			IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
						INNER JOIN {databaseOwner}[{objectQualifier}EDS_UserInRoles](@UserID,@PortalID,@CurrentDate) AS uir ON rps.RoleID = uir.RoleID
						WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.ShowAllCategories = 1)
			OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
					WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL AND ups.ShowAllCategories = 1
			)
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			ELSE
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				INNER JOIN {databaseOwner}[{objectQualifier}EDS_UserInRoles](@UserID,@PortalID,@CurrentDate) AS uir ON rps.RoleID = uir.RoleID
				WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL
				UNION
				SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL;
		END
		ELSE -- by module
		BEGIN
			SELECT @SettingsSource = PermissionsPMSource FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleID;
			IF @SettingsSource = 1
				IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
						INNER JOIN {databaseOwner}[{objectQualifier}EDS_UserInRoles](@UserID,@PortalID,@CurrentDate) AS uir ON rps.RoleID = uir.RoleID
						WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.ShowAllCategories = 1)
				OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
					WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL AND ups.ShowAllCategories = 1
				)
					INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
				ELSE
					INSERT INTO @UserViewCategories
					SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
					INNER JOIN {databaseOwner}[{objectQualifier}EDS_UserInRoles](@UserID,@PortalID,@CurrentDate) AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL
					UNION
					SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
					WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL;
			ELSE
				IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
						INNER JOIN {databaseOwner}[{objectQualifier}EDS_UserInRoles](@UserID,@PortalID,@CurrentDate) AS uir ON rps.RoleID = uir.RoleID
						WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID AND rps.ShowAllCategories = 1)
				OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
					WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @PermissionsModuleID AND ups.ShowAllCategories = 1
				)
					INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
				ELSE
					INSERT INTO @UserViewCategories
					SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
					INNER JOIN {databaseOwner}[{objectQualifier}EDS_UserInRoles](@UserID,@PortalID,@CurrentDate) AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID
					UNION
					SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
					WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @PermissionsModuleID;
		END
	END
	
	RETURN 
END
' 
END
GO