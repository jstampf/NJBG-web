<?xml version="1.0" encoding="utf-8"?>
<root>
	<!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="metadata">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" />
							</xsd:sequence>
							<xsd:attribute name="name" use="required" type="xsd:string" />
							<xsd:attribute name="type" type="xsd:string" />
							<xsd:attribute name="mimetype" type="xsd:string" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="assembly">
						<xsd:complexType>
							<xsd:attribute name="alias" type="xsd:string" />
							<xsd:attribute name="name" type="xsd:string" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="Backup.Text" xml:space="preserve">
    <value>Backup</value>
  </data>
	<data name="btnBackupNow.Text" xml:space="preserve">
    <value>Backup now</value>
  </data>
	<data name="btnCreateBackup.Text" xml:space="preserve">
    <value>Backup now</value>
  </data>
	<data name="btnLoadBackup.Text" xml:space="preserve">
    <value>Load</value>
  </data>
	<data name="btnLoadFromBackup.Text" xml:space="preserve">
    <value>Load from backup</value>
  </data>
	<data name="btnSave.Text" xml:space="preserve">
    <value>Save</value>
  </data>
	<data name="btnUpdate.Text" xml:space="preserve">
    <value>Save</value>
  </data>
	<data name="Editor.Text" xml:space="preserve">
    <value>Editor</value>
  </data>
	<data name="liLastBackup.Text" xml:space="preserve">
    <value>Last backup: {0}</value>
  </data>
	<data name="rfvFileName.ErrorMessage" xml:space="preserve">
    <value>File name required!</value>
  </data>
	<data name="TemplateEditor.Text" xml:space="preserve">
    <value>Template Editor</value>
  </data>
	<data name="AllowedFileExtensions.Text" xml:space="preserve">
    <value>Allowed file extensions: {0}</value>
  </data>
	<data name="BackupCreatedInDirectory.Text" xml:space="preserve">
    <value>Backup created in '{0}' directory!</value>
  </data>
	<data name="BackupDoesntExist.Text" xml:space="preserve">
    <value>Backup doesn't exist!</value>
  </data>
	<data name="CurrentlyEditing.Text" xml:space="preserve">
    <value>&lt;strong&gt;You are editing:&lt;/strong&gt; {0}</value>
  </data>
	<data name="DirectoryNameDoesntExist.Text" xml:space="preserve">
    <value>Directory '{0}' doesn't exist!</value>
  </data>
	<data name="EmptyTemplateFile.Text" xml:space="preserve">
    <value>Template is empty!</value>
  </data>
	<data name="FileDeleted.Text" xml:space="preserve">
    <value>File '{0}' deleted.</value>
  </data>
	<data name="FileDoesntExists.Text" xml:space="preserve">
    <value>File doesn't exist.</value>
  </data>
	<data name="FileExists.Text" xml:space="preserve">
    <value>File '{0}' already exists.</value>
  </data>
	<data name="FileExtensionNotSupported.Text" xml:space="preserve">
    <value>File extension not supported!</value>
  </data>
	<data name="FileNameDoesntExists.Text" xml:space="preserve">
    <value>File '{0}' doesn't exist.</value>
  </data>
	<data name="FileNameRequired.Text" xml:space="preserve">
    <value>File name required!</value>
  </data>
	<data name="FileUploaded.Text" xml:space="preserve">
    <value>File '{0}' uploaded.</value>
  </data>
	<data name="MustBeHostTheme.Text" xml:space="preserve">
    <value>Must be host theme in templates/_default folder</value>
  </data>
	<data name="NoTemplateSelected.Text" xml:space="preserve">
    <value>No template selected!</value>
  </data>
	<data name="PathNotFound.Text" xml:space="preserve">
    <value>Template path not found.</value>
  </data>
	<data name="SelectBackupFile.Text" xml:space="preserve">
    <value>Select backup file!</value>
  </data>
	<data name="SelectFileToUpload.Text" xml:space="preserve">
    <value>Select file to upload!</value>
  </data>
	<data name="SelectTemplateForDownload.Text" xml:space="preserve">
    <value>Select template for download!</value>
  </data>
	<data name="SelectThemeInfo.Text" xml:space="preserve">
    <value>Select theme!</value>
  </data>
	<data name="SelectThemeSectionInfo.Text" xml:space="preserve">
    <value>Select theme section!</value>
  </data>
	<data name="TemplateCreated.Text" xml:space="preserve">
    <value>Template created!</value>
  </data>
	<data name="TemplateNotFound.Text" xml:space="preserve">
    <value>Template not found.</value>
  </data>
	<data name="TemplateUpdated.Text" xml:space="preserve">
    <value>Template updated!</value>
  </data>
	<data name="ThemeCopied.Text" xml:space="preserve">
    <value>Theme: '{0}' copied.</value>
  </data>
	<data name="lblFirstBackup.Text" xml:space="preserve">
    <value>Before editing create backup for all themes</value>
  </data>
	<data name="btnCancelLoadBackup.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
	<data name="btnCloseUploadTemplate.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
	<data name="btnCopy.Text" xml:space="preserve">
    <value>Copy</value>
  </data>
	<data name="btnCopyTheme.Text" xml:space="preserve">
    <value>Copy</value>
  </data>
	<data name="btnCreateBackupBySelection" xml:space="preserve">
    <value>Backup now</value>
  </data>
	<data name="btnDelete.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
	<data name="btnDownloadTemplate.Text" xml:space="preserve">
    <value>Download</value>
  </data>
	<data name="btnSaveAsPopUp.Text" xml:space="preserve">
    <value>Save as</value>
  </data>
	<data name="btnSaveCancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
	<data name="btnUploadTemplate.Text" xml:space="preserve">
    <value>Upload</value>
  </data>
	<data name="DeleteSelectedItem.Text" xml:space="preserve">
    <value>Are you sure you want to delete selected item?</value>
  </data>
	<data name="lblCopyTemplate.Text" xml:space="preserve">
    <value>Template:</value>
  </data>
	<data name="lblCopyTemplateSection.Text" xml:space="preserve">
    <value>Section:</value>
  </data>
	<data name="lblCopyTheme.Text" xml:space="preserve">
    <value>Theme:</value>
  </data>
	<data name="lblSelectTemplate.Text" xml:space="preserve">
    <value>Template:</value>
  </data>
	<data name="lblSelectTheme.Text" xml:space="preserve">
    <value>Theme:</value>
  </data>
	<data name="lblTemplateSection.Text" xml:space="preserve">
    <value>Section:</value>
  </data>
	<data name="liAllThemes.Text" xml:space="preserve">
    <value>All themes</value>
  </data>
	<data name="liCalendar.Text" xml:space="preserve">
    <value>Calendar</value>
  </data>
	<data name="liCategoryMenu.Text" xml:space="preserve">
    <value>Category menu</value>
  </data>
	<data name="liComments.Text" xml:space="preserve">
    <value>Comments</value>
  </data>
	<data name="liCssStyles.Text" xml:space="preserve">
    <value>Styles</value>
  </data>
	<data name="liDetails.Text" xml:space="preserve">
    <value>Details templates</value>
  </data>
	<data name="liDocuments.Text" xml:space="preserve">
    <value>Documents</value>
  </data>
	<data name="liGravityGallery.Text" xml:space="preserve">
    <value>Gravity gallery</value>
  </data>
	<data name="liLinks.Text" xml:space="preserve">
    <value>Links</value>
  </data>
	<data name="liList.Text" xml:space="preserve">
    <value>List templates</value>
  </data>
	<data name="liMainCss.Text" xml:space="preserve">
    <value>Main CSS</value>
  </data>
	<data name="liOnlyHostThemes.Text" xml:space="preserve">
    <value>Host themes</value>
  </data>
	<data name="liOnlyPortalThemes.Text" xml:space="preserve">
    <value>Portal themes</value>
  </data>
	<data name="liOnlySelectedTheme.Text" xml:space="preserve">
    <value>Select theme</value>
  </data>
	<data name="liRelatedArticles.Text" xml:space="preserve">
    <value>Related articles</value>
  </data>
	<data name="liSearch.Text" xml:space="preserve">
    <value>Search</value>
  </data>
	<data name="liSelect.Text" xml:space="preserve">
    <value>Select</value>
  </data>
	<data name="liTagCloud.Text" xml:space="preserve">
    <value>Tag cloud</value>
  </data>
	<data name="LoadFromBackup.Text" xml:space="preserve">
    <value>Load from backup</value>
  </data>
	<data name="SaveAsHeading.Text" xml:space="preserve">
    <value>Save as:</value>
  </data>
	<data name="SelectBackupFileHeading.Text" xml:space="preserve">
    <value>Select backup file:</value>
  </data>
	<data name="hlTokenList.Text" xml:space="preserve">
    <value>Token list</value>
  </data>
	<data name="CopyInfo.Text" xml:space="preserve">
    <value>Theme will be copied to template portal folder /easydnnnews/templates/(current portal number)/. When upgrading the module Themes contained in the portal folder are not going to be overwritten and the changes will remain preserved.</value>
  </data>
	<data name="CopyInfoThemeExists.Text" xml:space="preserve">
    <value>Theme will be copied to template portal folder /easydnnnews/templates/(current portal number)/. When upgrading the module Themes contained in the portal folder are not going to be overwritten and the changes will remain preserved. Theme already exists and it will be overwritten.</value>
  </data>
	<data name="liContentBlocks.Text" xml:space="preserve">
    <value>Content blocks</value>
  </data>
	<data name="CopyFrom.Text" xml:space="preserve">
    <value>Copy from:</value>
  </data>
	<data name="DeleteBackup.Text" xml:space="preserve">
    <value>Delete backup:</value>
  </data>
</root>