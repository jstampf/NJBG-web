<?xml version="1.0" encoding="utf-8"?>
<root>
	<!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="metadata">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" />
							</xsd:sequence>
							<xsd:attribute name="name" use="required" type="xsd:string" />
							<xsd:attribute name="type" type="xsd:string" />
							<xsd:attribute name="mimetype" type="xsd:string" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="assembly">
						<xsd:complexType>
							<xsd:attribute name="alias" type="xsd:string" />
							<xsd:attribute name="name" type="xsd:string" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="ImportExportTitle.Text" xml:space="preserve">
    <value>Export/Import</value>
  </data>
	<data name="lbImport.Text" xml:space="preserve">
    <value>Import</value>
  </data>
	<data name="lbImportFromExcel.Text" xml:space="preserve">
    <value>Import from Excel</value>
  </data>
	<data name="lbExport.Text" xml:space="preserve">
    <value>Export</value>
  </data>
	<data name="ImportXMLfile.Text" xml:space="preserve">
    <value>Import/Upload XML file data</value>
  </data>
	<data name="ImportdatafromExcel.Text" xml:space="preserve">
    <value>Import data from Excel file</value>
  </data>
	<data name="lblSelectImportMethod.Text" xml:space="preserve">
    <value>Please select:</value>
  </data>
	<data name="lblSelectImportMethod.Help" xml:space="preserve">
    <value>Select to import or upload file. Existing files are located in: /portals/portalnumber/EasyDNNNewsExport/NewsExport/</value>
  </data>
	<data name="liImportExistingFile.Text" xml:space="preserve">
    <value>Import existing file</value>
  </data>
	<data name="Upload.Text" xml:space="preserve">
    <value>Upload</value>
  </data>
	<data name="lblSelectFileToImport.Text" xml:space="preserve">
    <value>Select file to import:</value>
  </data>
	<data name="lblSelectFileToImport.Help" xml:space="preserve">
    <value>Select file to import. Existing files are located in: /portals/portalnumber/EasyDNNNewsExport/NewsExport/</value>
  </data>
	<data name="lblFileOperations.Text" xml:space="preserve">
    <value>File actions:</value>
  </data>
	<data name="lblFileOperations.Help" xml:space="preserve">
    <value>File actions.</value>
  </data>
	<data name="btnDeleteExistingXML.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
	<data name="btnDownloadExistingXML.Text" xml:space="preserve">
    <value>Download XML file</value>
  </data>
	<data name="btnDownloadExistingZIP.Text" xml:space="preserve">
    <value>Download ZIP file</value>
  </data>
	<data name="lblSelectDefaultCategory.Text" xml:space="preserve">
    <value>Select default category to import to:</value>
  </data>
	<data name="lblSelectDefaultCategory.Help" xml:space="preserve">
    <value>Select default category to import to - if article doesn't have a category it will be placed into this one.</value>
  </data>
	<data name="lblSelectAuthor.Text" xml:space="preserve">
    <value>Select article author:</value>
  </data>
	<data name="lblSelectAuthor.Help" xml:space="preserve">
    <value>Select article author - if no author is selected current user will be added as author.</value>
  </data>
	<data name="liSelectRole.Text" xml:space="preserve">
    <value>Select role</value>
  </data>
	<data name="liSelectAuthor.Text" xml:space="preserve">
    <value>Select author</value>
  </data>
	<data name="lblSelectXMLFile.Text" xml:space="preserve">
    <value>Select XML file:</value>
  </data>
	<data name="lblSelectXMLFile.Help" xml:space="preserve">
    <value>Select XML file.</value>
  </data>
	<data name="lblSelectZipResource.Text" xml:space="preserve">
    <value>Select zip resources file:</value>
  </data>
	<data name="lblSelectZipResource.Help" xml:space="preserve">
    <value>Select zip file with resources.</value>
  </data>
	<data name="btnXMLFileUpload.Text" xml:space="preserve">
    <value>Upload</value>
  </data>
	<data name="lblExcelImportInfo.Text" xml:space="preserve">
    <value>Importing data  may take a few minutes to finish. Please wait.</value>
  </data>
	<data name="btnImportFromExistingXML.Text" xml:space="preserve">
    <value>Import</value>
  </data>
	<data name="lblSelectExcelFile.Text" xml:space="preserve">
    <value>Select Excel file:</value>
  </data>
	<data name="lblSelectExcelFile.Help" xml:space="preserve">
    <value>Select Excel file to upload.</value>
  </data>
	<data name="btnExcelFileUpload.Text" xml:space="preserve">
    <value>Upload</value>
  </data>
	<data name="btnImportIntoNews.Text" xml:space="preserve">
    <value>Import</value>
  </data>
	<data name="btnCancelImport.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
	<data name="lblColumnsToImportTitle.Text" xml:space="preserve">
    <value>Columns To Import:</value>
  </data>
	<data name="lblExportInfo.Text" xml:space="preserve">
    <value>Exporting files may take a few minutes to finish. Please wait.</value>
  </data>
	<data name="ExportdatatoXMLfile.Text" xml:space="preserve">
    <value>Export data to XML file</value>
  </data>
	<data name="lblExportFileName.Text" xml:space="preserve">
    <value>Enter file name:</value>
  </data>
	<data name="lblCreateZipWithData.Text" xml:space="preserve">
    <value>Create zip file with images and document:</value>
  </data>
	<data name="btnExportToXMLFile.Text" xml:space="preserve">
    <value>Export to XML file</value>
  </data>
	<data name="hlExportXMLMessage.Text" xml:space="preserve">
    <value>Download file.</value>
  </data>
	<data name="hlDownloadZipFile.Text" xml:space="preserve">
    <value>Download file.</value>
  </data>
	<data name="DownloadExcelExampleFile.Text" xml:space="preserve">
    <value>Download Excel example file</value>
  </data>
	<data name="lblExportAllCategories.Text" xml:space="preserve">
		<value>Export all categories:</value>
	</data>
	<data name="cvCategoriesTreeview.ErrorMessage" xml:space="preserve">
		<value>Please select at least one category.</value>
	</data>
</root>