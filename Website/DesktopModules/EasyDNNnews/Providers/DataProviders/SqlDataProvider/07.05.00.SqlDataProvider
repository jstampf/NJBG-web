IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsUpdate' and column_name = 'InstallType')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsUpdate] ADD InstallType NVARCHAR(10) CONSTRAINT DF_{objectQualifier}EasyDNNNewsUpdate_InstallType DEFAULT (N'DNN') NOT NULL
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsWidgetsGetTreeViewContent]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsWidgetsGetTreeViewContent]
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsTreeView' and column_name = 'OrderByCustomFieldID')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsTreeView] ADD OrderByCustomFieldID INT NULL
END
GO
BEGIN TRY
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsTreeView_OrderByCustomFieldID]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsTreeView]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsTreeView] WITH CHECK ADD CONSTRAINT [FK_{objectQualifier}EasyDNNNewsTreeView_OrderByCustomFieldID] FOREIGN KEY([OrderByCustomFieldID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNfields] ([CustomFieldID])
ON DELETE SET NULL
END TRY
BEGIN CATCH
END CATCH
GO

IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsTreeView' and column_name = 'ArticlesOrderBy')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsTreeView] ADD ArticlesOrderBy NVARCHAR(50) CONSTRAINT DF_{objectQualifier}EasyDNNNewsTreeView_ArticlesOrderBy DEFAULT (N'PublishDate') NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsTreeView' and column_name = 'ArticlesOrderByDirection')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsTreeView] ADD ArticlesOrderByDirection VARCHAR(4) CONSTRAINT DF_{objectQualifier}EasyDNNNewsTreeView_ArticlesOrderByDirection DEFAULT (N'DESC') NOT NULL
END
GO
IF EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsData' AND column_name = 'Value')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsData] ALTER COLUMN Value NVARCHAR(MAX) NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsSearchSettings' and column_name = 'SearchBarOrientation')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsSearchSettings] ADD SearchBarOrientation TINYINT CONSTRAINT DF_{objectQualifier}EasyDNNNewsSearchSettings_SearchBarOrientation DEFAULT(0) NOT NULL;
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'FilterRelatedArticlesByCategory')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD FilterRelatedArticlesByCategory BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsPortalSettings_FilterRelatedArticlesByCategory DEFAULT(0) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsModuleSettings' and column_name = 'FilterRelatedArticlesByCategory')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD FilterRelatedArticlesByCategory BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsModuleSettings_FilterRelatedArticlesByCategory DEFAULT(0) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'FilterByCustomFields')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD FilterByCustomFields BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsPortalSettings_FilterByCustomFields DEFAULT(0) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsModuleSettings' and column_name = 'FilterByCustomFields')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD FilterByCustomFields BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsModuleSettings_FilterByCustomFields DEFAULT(0) NOT NULL
END
GO

IF NOT EXISTS (SELECT ControlTypeID FROM {databaseOwner}[{objectQualifier}EasyDNNfielsType] WHERE ControlTypeID = 10)
BEGIN
INSERT {databaseOwner}[{objectQualifier}EasyDNNfielsType] ([ControlTypeID], [Name]) VALUES (10, N'Hyperlink')
END
GO
IF NOT EXISTS (SELECT ControlTypeID FROM {databaseOwner}[{objectQualifier}EasyDNNfielsType] WHERE ControlTypeID = 200)
BEGIN
INSERT {databaseOwner}[{objectQualifier}EasyDNNfielsType] ([ControlTypeID], [Name]) VALUES (200, N'UploadField')
END
GO
IF NOT EXISTS (SELECT ControlTypeID FROM {databaseOwner}[{objectQualifier}EasyDNNfielsType] WHERE ControlTypeID = 300)
BEGIN
INSERT {databaseOwner}[{objectQualifier}EasyDNNfielsType] ([ControlTypeID], [Name]) VALUES (300, N'NewsCategories')
END
GO
IF NOT EXISTS (SELECT ControlTypeID FROM {databaseOwner}[{objectQualifier}EasyDNNfielsType] WHERE ControlTypeID = 301)
BEGIN
INSERT {databaseOwner}[{objectQualifier}EasyDNNfielsType] ([ControlTypeID], [Name]) VALUES (301, N'NewsAuthorsGroups')
END
GO
IF NOT EXISTS (SELECT ControlTypeID FROM {databaseOwner}[{objectQualifier}EasyDNNfielsType] WHERE ControlTypeID = 302)
BEGIN
INSERT {databaseOwner}[{objectQualifier}EasyDNNfielsType] ([ControlTypeID], [Name]) VALUES (302, N'NewsDate')
END
GO
IF NOT EXISTS (SELECT ControlTypeID FROM {databaseOwner}[{objectQualifier}EasyDNNfielsType] WHERE ControlTypeID = 303)
BEGIN
INSERT {databaseOwner}[{objectQualifier}EasyDNNfielsType] ([ControlTypeID], [Name]) VALUES (303, N'SearchField')
END
GO
IF NOT EXISTS (SELECT ControlTypeID FROM {databaseOwner}[{objectQualifier}EasyDNNfielsType] WHERE ControlTypeID = 304)
BEGIN
INSERT {databaseOwner}[{objectQualifier}EasyDNNfielsType] ([ControlTypeID], [Name]) VALUES (304, N'SortField')
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CustomFieldID] [int] NOT NULL,
	[CfIdOrderable] [int] NULL,
	[SysIdOrderable] [int] NULL,
	[Name] [nvarchar](256) NOT NULL,
	[Position] [tinyint] NOT NULL,
	[SortOrder] [varchar](4) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNfieldsOrderByItems] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF),
 CONSTRAINT [IX_{objectQualifier}EasyDNNfieldsOrderByItems_CfId_SysId_Order] UNIQUE NONCLUSTERED 
(
	[CustomFieldID] ASC,
	[CfIdOrderable] ASC,
	[SysIdOrderable] ASC,
	[SortOrder] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems]') AND name = N'IX_{objectQualifier}EasyDNNfieldsOrderByItems_Position')
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}EasyDNNfieldsOrderByItems_Position] ON {databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems] 
(
	[Position] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItemsLocalization]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItemsLocalization](
	[OrderByItemId] [int] NOT NULL,
	[LocaleCode] [nvarchar](20) NOT NULL,
	[Name] [nvarchar](256) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNfieldsOrderByItemsLocalization] PRIMARY KEY CLUSTERED 
(
	[OrderByItemId] ASC,
	[LocaleCode] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
IF NOT EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNfieldsOrderByItems_Name_Len]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems]  WITH CHECK ADD  CONSTRAINT [CK_{objectQualifier}EasyDNNfieldsOrderByItems_Name_Len] CHECK  ((len(ltrim(rtrim([Name])))>(0)))
GO
IF  EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNfieldsOrderByItems_Name_Len]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems] CHECK CONSTRAINT [CK_{objectQualifier}EasyDNNfieldsOrderByItems_Name_Len]
GO
IF NOT EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNfieldsOrderByItems_Nulls]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems]  WITH CHECK ADD  CONSTRAINT [CK_{objectQualifier}EasyDNNfieldsOrderByItems_Nulls] CHECK  (([CfIdOrderable] IS NOT NULL OR [SysIdOrderable] IS NOT NULL))
GO
IF  EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNfieldsOrderByItems_Nulls]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems] CHECK CONSTRAINT [CK_{objectQualifier}EasyDNNfieldsOrderByItems_Nulls]
GO
IF NOT EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNfieldsOrderByItems_SortOrder]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems]  WITH CHECK ADD  CONSTRAINT [CK_{objectQualifier}EasyDNNfieldsOrderByItems_SortOrder] CHECK  (([SortOrder]='DESC' OR [SortOrder]='ASC'))
GO
IF  EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNfieldsOrderByItems_SortOrder]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems] CHECK CONSTRAINT [CK_{objectQualifier}EasyDNNfieldsOrderByItems_SortOrder]
GO
IF NOT EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNfieldsOrderByItemsLocalization_Name_Len]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItemsLocalization]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItemsLocalization]  WITH CHECK ADD  CONSTRAINT [CK_{objectQualifier}EasyDNNfieldsOrderByItemsLocalization_Name_Len] CHECK  ((len(ltrim(rtrim([Name])))>(0)))
GO
IF  EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNfieldsOrderByItemsLocalization_Name_Len]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItemsLocalization]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItemsLocalization] CHECK CONSTRAINT [CK_{objectQualifier}EasyDNNfieldsOrderByItemsLocalization_Name_Len]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsOrderByItems_EasyDNNfields_CfId]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsOrderByItems_EasyDNNfields_CfId] FOREIGN KEY([CfIdOrderable])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNfields] ([CustomFieldID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsOrderByItems_EasyDNNfields_CfId]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsOrderByItems_EasyDNNfields_CfId]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsOrderByItems_EasyDNNfields_Id]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsOrderByItems_EasyDNNfields_Id] FOREIGN KEY([CustomFieldID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNfields] ([CustomFieldID])
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsOrderByItems_EasyDNNfields_Id]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsOrderByItems_EasyDNNfields_Id]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsOrderByItemsLocalization_EasyDNNfieldsOrderByItems]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItemsLocalization]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItemsLocalization]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsOrderByItemsLocalization_EasyDNNfieldsOrderByItems] FOREIGN KEY([OrderByItemId])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItems] ([Id])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsOrderByItemsLocalization_EasyDNNfieldsOrderByItems]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItemsLocalization]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsOrderByItemsLocalization] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsOrderByItemsLocalization_EasyDNNfieldsOrderByItems]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsNewsCategoryItems]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsNewsCategoryItems](
	[CustomFieldID] [int] NOT NULL,
	[CategoryID] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNfieldsNewsCategoryItems] PRIMARY KEY CLUSTERED 
(
	[CustomFieldID] ASC,
	[CategoryID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsNewsAuthorItems]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsNewsAuthorItems](
	[CustomFieldID] [int] NOT NULL,
	[UserID] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNfieldsNewsAuthorItems] PRIMARY KEY CLUSTERED 
(
	[CustomFieldID] ASC,
	[UserID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsNewsAuthorGroupItems]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsNewsAuthorGroupItems](
	[CustomFieldID] [int] NOT NULL,
	[GroupID] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNfieldsNewsAuthorGroupItems] PRIMARY KEY CLUSTERED 
(
	[CustomFieldID] ASC,
	[GroupID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsNewsAuthorGroupItems_EasyDNNfields]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsNewsAuthorGroupItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsNewsAuthorGroupItems]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsNewsAuthorGroupItems_EasyDNNfields] FOREIGN KEY([CustomFieldID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNfields] ([CustomFieldID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsNewsAuthorGroupItems_EasyDNNfields]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsNewsAuthorGroupItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsNewsAuthorGroupItems] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsNewsAuthorGroupItems_EasyDNNfields]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsNewsAuthorGroupItems_EasyDNNNewsAuthorGroups]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsNewsAuthorGroupItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsNewsAuthorGroupItems]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsNewsAuthorGroupItems_EasyDNNNewsAuthorGroups] FOREIGN KEY([GroupID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorGroups] ([GroupID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsNewsAuthorGroupItems_EasyDNNNewsAuthorGroups]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsNewsAuthorGroupItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsNewsAuthorGroupItems] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsNewsAuthorGroupItems_EasyDNNNewsAuthorGroups]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsNewsAuthorItems_EasyDNNfields]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsNewsAuthorItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsNewsAuthorItems]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsNewsAuthorItems_EasyDNNfields] FOREIGN KEY([CustomFieldID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNfields] ([CustomFieldID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsNewsAuthorItems_EasyDNNfields]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsNewsAuthorItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsNewsAuthorItems] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsNewsAuthorItems_EasyDNNfields]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsNewsAuthorItems_Users]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsNewsAuthorItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsNewsAuthorItems]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsNewsAuthorItems_Users] FOREIGN KEY([UserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsNewsAuthorItems_Users]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsNewsAuthorItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsNewsAuthorItems] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsNewsAuthorItems_Users]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsNewsCategoryItems_EasyDNNfields]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsNewsCategoryItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsNewsCategoryItems]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsNewsCategoryItems_EasyDNNfields] FOREIGN KEY([CustomFieldID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNfields] ([CustomFieldID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsNewsCategoryItems_EasyDNNfields]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsNewsCategoryItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsNewsCategoryItems] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsNewsCategoryItems_EasyDNNfields]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsNewsCategoryItems_EasyDNNNewsCategoryList]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsNewsCategoryItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsNewsCategoryItems]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsNewsCategoryItems_EasyDNNNewsCategoryList] FOREIGN KEY([CategoryID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] ([CategoryID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsNewsCategoryItems_EasyDNNNewsCategoryList]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsNewsCategoryItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsNewsCategoryItems] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsNewsCategoryItems_EasyDNNNewsCategoryList]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiCF]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiCF](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NULL,
	[ModuleID] [int] NULL,
	[CustomFieldID] [int] NOT NULL,
	[LogicalOperator] [nvarchar](10) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNnewsFilterMultiCF] PRIMARY KEY NONCLUSTERED 
(
	[Id] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiCF]') AND name = N'IX_{objectQualifier}EasyDNNnewsFilterMultiCF')
CREATE UNIQUE CLUSTERED INDEX [IX_{objectQualifier}EasyDNNnewsFilterMultiCF] ON {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiCF] 
(
	[ModuleID] ASC,
	[PortalID] ASC,
	[CustomFieldID] ASC,
	[LogicalOperator] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NULL,
	[ModuleID] [int] NULL,
	[CustomFieldID] [int] NOT NULL,
	[ValueOne] [int] NOT NULL,
	[ComparisonOperatorOne] [nvarchar](2) NOT NULL,
	[ValueTwo] [int] NULL,
	[ComparisonOperatorTwo] [nvarchar](2) NULL,
	[LogicalOperator] [nvarchar](10) NULL,
	[QueryRule] [nvarchar](512) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNnewsFilterByCFInteger] PRIMARY KEY NONCLUSTERED 
(
	[Id] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF),
 CONSTRAINT [IX_{objectQualifier}EasyDNNnewsFilterByCFInteger_Unique] UNIQUE NONCLUSTERED 
(
	[PortalID] ASC,
	[ModuleID] ASC,
	[CustomFieldID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger]') AND name = N'IX_{objectQualifier}EasyDNNfieldsFilterInteger')
CREATE CLUSTERED INDEX [IX_{objectQualifier}EasyDNNfieldsFilterInteger] ON {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger] 
(
	[CustomFieldID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NULL,
	[ModuleID] [int] NULL,
	[CustomFieldID] [int] NOT NULL,
	[ValueOne] [decimal](18, 4) NOT NULL,
	[ComparisonOperatorOne] [nvarchar](2) NOT NULL,
	[ValueTwo] [decimal](18, 4) NULL,
	[ComparisonOperatorTwo] [nvarchar](2) NULL,
	[LogicalOperator] [nvarchar](10) NULL,
	[QueryRule] [nvarchar](512) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNnewsFilterByCFDecimal] PRIMARY KEY NONCLUSTERED 
(
	[Id] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF),
 CONSTRAINT [IX_{objectQualifier}EasyDNNnewsFilterByCFDecimal_Unique] UNIQUE NONCLUSTERED 
(
	[PortalID] ASC,
	[ModuleID] ASC,
	[CustomFieldID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal]') AND name = N'IX_cfEasyDNNfieldsFilterDecimal')
CREATE CLUSTERED INDEX [IX_cfEasyDNNfieldsFilterDecimal] ON {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal] 
(
	[CustomFieldID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NULL,
	[ModuleID] [int] NULL,
	[CustomFieldID] [int] NOT NULL,
	[ValueOne] [datetime] NOT NULL,
	[ComparisonOperatorOne] [nvarchar](2) NOT NULL,
	[ValueTwo] [datetime] NULL,
	[ComparisonOperatorTwo] [nvarchar](2) NULL,
	[LogicalOperator] [nvarchar](10) NULL,
	[QueryRule] [nvarchar](512) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNnewsFilterByCFDateTime] PRIMARY KEY NONCLUSTERED 
(
	[Id] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF),
 CONSTRAINT [IX_{objectQualifier}EasyDNNnewsFilterByCFDateTime_Unique] UNIQUE NONCLUSTERED 
(
	[PortalID] ASC,
	[ModuleID] ASC,
	[CustomFieldID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime]') AND name = N'IX_{objectQualifier}EasyDNNnewsFilterCFDateTime')
CREATE CLUSTERED INDEX [IX_{objectQualifier}EasyDNNnewsFilterCFDateTime] ON {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime] 
(
	[CustomFieldID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NULL,
	[ModuleID] [int] NULL,
	[CustomFieldID] [int] NOT NULL,
	[Value] [bit] NOT NULL,
	[QueryRule] [nvarchar](512) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNnewsFilterByCFBit] PRIMARY KEY NONCLUSTERED 
(
	[Id] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF),
 CONSTRAINT [IX_{objectQualifier}EasyDNNnewsFilterByCFBit_Unique] UNIQUE NONCLUSTERED 
(
	[PortalID] ASC,
	[ModuleID] ASC,
	[CustomFieldID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit]') AND name = N'IX_{objectQualifier}EasyDNNnewsFilterByCFBit')
CREATE CLUSTERED INDEX [IX_{objectQualifier}EasyDNNnewsFilterByCFBit] ON {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit] 
(
	[CustomFieldID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements](
	[MultiCFId] [int] NOT NULL,
	[FieldElementID] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNnewsFilterByMultiElements] PRIMARY KEY CLUSTERED 
(
	[MultiCFId] ASC,
	[FieldElementID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
IF NOT EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNnewsFilterByCFBit_NotNull]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit]  WITH CHECK ADD  CONSTRAINT [CK_{objectQualifier}EasyDNNnewsFilterByCFBit_NotNull] CHECK  (([PortalID] IS NULL AND [ModuleID] IS NOT NULL OR [PortalID] IS NOT NULL AND [ModuleID] IS NULL))
GO
IF  EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNnewsFilterByCFBit_NotNull]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit] CHECK CONSTRAINT [CK_{objectQualifier}EasyDNNnewsFilterByCFBit_NotNull]
GO
IF NOT EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNnewsFilterByCFDateTime_NotNull]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime]  WITH CHECK ADD  CONSTRAINT [CK_{objectQualifier}EasyDNNnewsFilterByCFDateTime_NotNull] CHECK  (([PortalID] IS NULL AND [ModuleID] IS NOT NULL OR [PortalID] IS NOT NULL AND [ModuleID] IS NULL))
GO
IF  EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNnewsFilterByCFDateTime_NotNull]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime] CHECK CONSTRAINT [CK_{objectQualifier}EasyDNNnewsFilterByCFDateTime_NotNull]
GO
IF NOT EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNnewsFilterByCFDecimal_NotNull]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal]  WITH CHECK ADD  CONSTRAINT [CK_{objectQualifier}EasyDNNnewsFilterByCFDecimal_NotNull] CHECK  (([PortalID] IS NULL AND [ModuleID] IS NOT NULL OR [PortalID] IS NOT NULL AND [ModuleID] IS NULL))
GO
IF  EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNnewsFilterByCFDecimal_NotNull]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal] CHECK CONSTRAINT [CK_{objectQualifier}EasyDNNnewsFilterByCFDecimal_NotNull]
GO
IF NOT EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNnewsFilterByCFInteger_NotNull]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger]  WITH CHECK ADD  CONSTRAINT [CK_{objectQualifier}EasyDNNnewsFilterByCFInteger_NotNull] CHECK  (([PortalID] IS NULL AND [ModuleID] IS NOT NULL OR [PortalID] IS NOT NULL AND [ModuleID] IS NULL))
GO
IF  EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNnewsFilterByCFInteger_NotNull]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger] CHECK CONSTRAINT [CK_{objectQualifier}EasyDNNnewsFilterByCFInteger_NotNull]
GO
IF NOT EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNnewsFilterMultiCF_NotNull]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiCF]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiCF]  WITH CHECK ADD  CONSTRAINT [CK_{objectQualifier}EasyDNNnewsFilterMultiCF_NotNull] CHECK  (([PortalID] IS NULL AND [ModuleID] IS NOT NULL OR [PortalID] IS NOT NULL AND [ModuleID] IS NULL))
GO
IF  EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNnewsFilterMultiCF_NotNull]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiCF]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiCF] CHECK CONSTRAINT [CK_{objectQualifier}EasyDNNnewsFilterMultiCF_NotNull]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFBit_EasyDNNfields]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFBit_EasyDNNfields] FOREIGN KEY([CustomFieldID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNfields] ([CustomFieldID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFBit_EasyDNNfields]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFBit_EasyDNNfields]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFBit_EasyDNNNewsPortalSettings]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFBit_EasyDNNNewsPortalSettings] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ([PortalID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFBit_EasyDNNNewsPortalSettings]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFBit_EasyDNNNewsPortalSettings]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFBit_Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFBit_Modules] FOREIGN KEY([ModuleID])
REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFBit_Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFBit_Modules]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFDateTime_EasyDNNfields]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFDateTime_EasyDNNfields] FOREIGN KEY([CustomFieldID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNfields] ([CustomFieldID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFDateTime_EasyDNNfields]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFDateTime_EasyDNNfields]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFDateTime_EasyDNNNewsPortalSettings]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFDateTime_EasyDNNNewsPortalSettings] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ([PortalID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFDateTime_EasyDNNNewsPortalSettings]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFDateTime_EasyDNNNewsPortalSettings]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFDateTime_Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFDateTime_Modules] FOREIGN KEY([ModuleID])
REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFDateTime_Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFDateTime_Modules]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFDecimal_EasyDNNfields]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFDecimal_EasyDNNfields] FOREIGN KEY([CustomFieldID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNfields] ([CustomFieldID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFDecimal_EasyDNNfields]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFDecimal_EasyDNNfields]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFDecimal_EasyDNNNewsPortalSettings]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFDecimal_EasyDNNNewsPortalSettings] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ([PortalID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFDecimal_EasyDNNNewsPortalSettings]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFDecimal_EasyDNNNewsPortalSettings]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFDecimal_Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFDecimal_Modules] FOREIGN KEY([ModuleID])
REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFDecimal_Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFDecimal_Modules]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFInteger_EasyDNNfields]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFInteger_EasyDNNfields] FOREIGN KEY([CustomFieldID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNfields] ([CustomFieldID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFInteger_EasyDNNfields]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFInteger_EasyDNNfields]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFInteger_EasyDNNNewsPortalSettings]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFInteger_EasyDNNNewsPortalSettings] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ([PortalID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFInteger_EasyDNNNewsPortalSettings]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFInteger_EasyDNNNewsPortalSettings]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFInteger_Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFInteger_Modules] FOREIGN KEY([ModuleID])
REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByCFInteger_Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByCFInteger_Modules]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterMultiCF_Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiCF]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiCF]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterMultiCF_Modules] FOREIGN KEY([ModuleID])
REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterMultiCF_Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiCF]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiCF] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterMultiCF_Modules]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByMultiElements_EasyDNNfieldsMultiElements]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByMultiElements_EasyDNNfieldsMultiElements] FOREIGN KEY([FieldElementID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiElements] ([FieldElementID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByMultiElements_EasyDNNfieldsMultiElements]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByMultiElements_EasyDNNfieldsMultiElements]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByMultiElements_EasyDNNnewsFilterByMultiCF]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByMultiElements_EasyDNNnewsFilterByMultiCF] FOREIGN KEY([MultiCFId])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiCF] ([Id])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsFilterByMultiElements_EasyDNNnewsFilterByMultiCF]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNnewsFilterByMultiElements_EasyDNNnewsFilterByMultiCF]
GO

/*** Cleanup unused SP ***/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsEventRegistrationGetValues]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNfieldsEventRegistrationGetValues]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountItemsFromSearch]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountItemsFromSearch]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountForPageingOnlyEvents]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountForPageingOnlyEvents]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForListDisplayOnlyEvents]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForListDisplayOnlyEvents]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsFromSearch]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsFromSearch]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsByMonthlyArchive]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsByMonthlyArchive]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForTreeView]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForTreeView]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsPerCategory]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsPerCategory]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForTagCloud]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForTagCloud]
GO

/*** New and modified SP ***/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsGetValues]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNfieldsGetValues]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetRegistratedUsers]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetRegistratedUsers]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetRegistratedUsers]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetRegistratedUsers]
	@ArticleID INT,
	@RecurringID INT,
	@SupportsCustomFields BIT,
	@SupportsPayment BIT
AS
SET NOCOUNT ON;
DECLARE @query NVARCHAR(MAX);
DECLARE @RegistrationCFtemplateID INT;
DECLARE @singleValueColumns NVARCHAR(MAX);
DECLARE @multiValueColumns NVARCHAR(MAX);

IF @SupportsCustomFields = 1
BEGIN
	
	SELECT @RegistrationCFtemplateID = [RegistrationCFtemplateID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] WHERE [RegistrationCFtemplateID] IS NOT NULL AND [ArticleID] = @ArticleID

	SELECT @singleValueColumns = STUFF((SELECT '','' + QUOTENAME(cf.[LabelValue]) 
						FROM {databaseOwner}[{objectQualifier}EasyDNNfields] AS cf
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsTemplateItems] AS gti ON cf.CustomFieldID = gti.CustomFieldID
						WHERE gti.[FieldsTemplateID] = @RegistrationCFtemplateID AND cf.ControlTypeID IN (1,2,3,4,5,6,9,10,15)
						GROUP BY cf.[LabelValue],gti.Position
						ORDER BY gti.Position
				FOR XML PATH(''''), TYPE
				).value(''.'', ''NVARCHAR(MAX)'') 
			,1,1,'''');
	        
	SELECT @multiValueColumns = STUFF((SELECT '','' + QUOTENAME(cf.[LabelValue]) 
						FROM {databaseOwner}[{objectQualifier}EasyDNNfields] AS cf
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsTemplateItems] AS gti ON cf.CustomFieldID = gti.CustomFieldID
						WHERE gti.[FieldsTemplateID] = @RegistrationCFtemplateID AND cf.ControlTypeID IN (20,21,23)
						GROUP BY cf.[LabelValue],gti.Position
						ORDER BY gti.Position
				FOR XML PATH(''''), TYPE
				).value(''.'', ''NVARCHAR(MAX)'') 
			,1,1,'''');
END

DECLARE @EUIWHERECLAUSE NVARCHAR(300);
IF @RecurringID IS NULL
	SET @EUIWHERECLAUSE = N'' eui.ArticleID = @ArticleID ''
ELSE
	SET @EUIWHERECLAUSE = N'' eui.RecurringArticleID = @ArticleID AND eui.RecurringID = @RecurringID ''

SET @query = N''
SET NOCOUNT ON;

SELECT
	 eui.[Id] AS RegistrationID
	,rud.[FirstName]
	,rud.[LastName]
	,rud.[Email]
	,eui.[ApproveStatus]
	,eui.[UserStatus]
	,eui.[CreatedOnDate]
	,eui.[NumberOfTickets]
	,eui.[Message] ''
IF @RegistrationCFtemplateID IS NOT NULL -- prva i glavna provjera za CF
BEGIN
	IF @singleValueColumns IS NOT NULL AND @multiValueColumns IS NOT NULL 
		SET @query = @query + N'','' + @singleValueColumns + '','' +@multiValueColumns;
	ELSE IF @singleValueColumns IS NOT NULL
		SET @query = @query + N'','' + @singleValueColumns;
	ELSE IF @multiValueColumns IS NOT NULL
		SET @query = @query + N'','' + @multiValueColumns;
	ELSE
		SET @RegistrationCFtemplateID = NULL
END

IF @SupportsPayment = 1
SET @query = @query + N''
,ep.[SubTotal]
,ep.[Discount]
,ep.[TaxValue]
,ep.[EstimatedTotal]
,ep.[PaymentStatus]
'';

SET @query = @query + N'' FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS eui ''

IF @SupportsPayment = 1
SET @query = @query + N'' LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPayment] AS ep ON eui.Id = ep.EventUserItemID ''

SET @query = @query + N'' 
INNER JOIN (
	SELECT eui.Id, au.[FirstName],au.[LastName],au.[Email]
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers] AS au 
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventUsers] AS eu ON au.Id = eu.EmailAuthenticatedUserID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS eui ON eui.EventUserID = eu.Id
	WHERE'' + @EUIWHERECLAUSE + N''
	UNION ALL
	SELECT eui.Id, u.[FirstName],u.[LastName],u.[Email]
	FROM {databaseOwner}[{objectQualifier}Users] AS u
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventUsers] AS eu ON u.UserID = eu.DNNUserID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS eui ON eui.EventUserID = eu.Id
	WHERE'' + @EUIWHERECLAUSE + N''
)  AS rud ON rud.Id = eui.Id AND '' + @EUIWHERECLAUSE

IF @RegistrationCFtemplateID IS NOT NULL AND @multiValueColumns IS NOT NULL AND (@singleValueColumns IS NOT NULL) 
BEGIN
SET @query = @query + N''
 LEFT OUTER JOIN ( 
	SELECT singleValues.glb_fix_id,'' + @singleValueColumns + '','' + @multiValueColumns + '' FROM (
		SELECT glb_fix_id,'' + @singleValueColumns + '' 
            FROM 
            (
              SELECT eui.Id AS glb_fix_id, cf.[LabelValue] AS ColumnName,
				 CASE cf.[ControlTypeID]
					 WHEN 1 THEN CAST(frv.[Text] AS NVARCHAR(max))
					 WHEN 2 THEN CAST(frv.[RText] AS NVARCHAR(max))
					 WHEN 3 THEN CAST(frv.[Int] AS NVARCHAR(max))
					 WHEN 4 THEN CAST(frv.[Decimal] AS NVARCHAR(max))
					 WHEN 5 THEN CAST(frv.[Decimal] AS NVARCHAR(max))
					 WHEN 6 THEN CAST(frv.[Text] AS NVARCHAR(max))
					 WHEN 9 THEN CAST(frv.[DateTime] AS NVARCHAR(max))
					 WHEN 10 THEN CAST(frv.[Text] AS NVARCHAR(max))
					 WHEN 15 THEN CAST(frv.[Bit] AS NVARCHAR(max))
					 ELSE NULL
				END	AS ColumnValue 
				FROM {databaseOwner}[{objectQualifier}EasyDNNfields] AS cf
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationValues] AS frv ON cf.[CustomFieldID] = frv.[CustomFieldID]
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS eui ON eui.Id = frv.[EventUserItemID]
				WHERE'' + @EUIWHERECLAUSE + N''AND cf.ControlTypeID IN (1,2,3,4,5,6,9,10,15)
            ) x
            pivot 
            (
                max(ColumnValue)
                for ColumnName in ('' + @singleValueColumns + '')
            ) p  
		) AS singleValues INNER JOIN (
			SELECT glb_fix_id,'' + @multiValueColumns + '' 
            FROM 
            (
				SELECT DISTINCT glb_fix_id, ColumnName,
					(STUFF((SELECT '''', '''' + me.[Text] FROM {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiElements] AS me
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationMultiSelected] AS rms ON rms.[FieldElementID] = me.[FieldElementID]
					 WHERE me.[CustomFieldID] = AllUngrouped.CustomFieldID AND rms.EventUserItemID=glb_fix_id
				FOR XML PATH('''''''')), 1, 1, '''''''')) AS ColumnValue
				FROM (
					SELECT eui.Id AS glb_fix_id, cf.[LabelValue] AS ColumnName,me.[Text] AS ColumnValue, me.FieldElementID,me.[CustomFieldID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNfields] AS cf
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationMultiSelected] AS fme ON cf.[CustomFieldID] = fme.[CustomFieldID]
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS eui ON eui.Id = fme.[EventUserItemID]
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiElements] AS me ON me.FieldElementID = fme.[FieldElementID]
					WHERE'' + @EUIWHERECLAUSE + N''AND cf.ControlTypeID IN (20,21,23)
				) AS AllUngrouped
			) x
            pivot 
            (
                max(ColumnValue)
                for ColumnName in ('' + @multiValueColumns + '')
            ) p 
        ) AS MultiValues ON singleValues.glb_fix_id = MultiValues.glb_fix_id
	) AS cf_all ON cf_all.glb_fix_id = eui.Id AND '' + @EUIWHERECLAUSE;	
END
ELSE IF @RegistrationCFtemplateID IS NOT NULL AND (@singleValueColumns IS NOT NULL) 
BEGIN
SET @query = @query + N''
LEFT OUTER JOIN ( 
	SELECT glb_fix_id,'' + @singleValueColumns + '' 
    FROM 
    (
      SELECT eui.Id AS glb_fix_id, cf.[LabelValue] AS ColumnName,
		 CASE cf.[ControlTypeID]
			 WHEN 1 THEN CAST(frv.[Text] AS NVARCHAR(max))
			 WHEN 2 THEN CAST(frv.[RText] AS NVARCHAR(max))
			 WHEN 3 THEN CAST(frv.[Int] AS NVARCHAR(max))
			 WHEN 4 THEN CAST(frv.[Decimal] AS NVARCHAR(max))
			 WHEN 5 THEN CAST(frv.[Decimal] AS NVARCHAR(max))
			 WHEN 6 THEN CAST(frv.[Text] AS NVARCHAR(max))
			 WHEN 9 THEN CAST(frv.[DateTime] AS NVARCHAR(max))
			 WHEN 10 THEN CAST(frv.[Text] AS NVARCHAR(max))
			 WHEN 15 THEN CAST(frv.[Bit] AS NVARCHAR(max))
			 ELSE NULL
		END	AS ColumnValue 
		FROM {databaseOwner}[{objectQualifier}EasyDNNfields] AS cf
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationValues] AS frv ON cf.[CustomFieldID] = frv.[CustomFieldID]
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS eui ON eui.Id = frv.[EventUserItemID]
		WHERE'' + @EUIWHERECLAUSE + N''AND cf.ControlTypeID IN (1,2,3,4,5,6,9,10,15)
    ) x
    pivot 
    (
        max(ColumnValue)
        for ColumnName in ('' + @singleValueColumns + '')
    ) p  
) AS cf_all ON cf_all.glb_fix_id = eui.Id AND '' + @EUIWHERECLAUSE;	
END
ELSE IF @RegistrationCFtemplateID IS NOT NULL AND (@multiValueColumns IS NOT NULL) 
BEGIN
SET @query = @query + N''
LEFT OUTER JOIN ( 
	SELECT glb_fix_id,'' + @multiValueColumns + '' 
    FROM 
    (
		SELECT DISTINCT glb_fix_id, ColumnName,
			(STUFF((SELECT '''', '''' + me.[Text] FROM {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiElements] AS me
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationMultiSelected] AS rms ON rms.[FieldElementID] = me.[FieldElementID]
			WHERE me.[CustomFieldID] = AllUngrouped.CustomFieldID AND rms.EventUserItemID=glb_fix_id
			FOR XML PATH('''''''')), 1, 1, '''''''')) AS ColumnValue
		FROM (
			SELECT eui.Id AS glb_fix_id, cf.[LabelValue] AS ColumnName,me.[Text] AS ColumnValue, me.FieldElementID,me.[CustomFieldID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNfields] AS cf
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationMultiSelected] AS fme ON cf.[CustomFieldID] = fme.[CustomFieldID]
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS eui ON eui.Id = fme.[EventUserItemID]
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiElements] AS me ON me.FieldElementID = fme.[FieldElementID]
			WHERE'' + @EUIWHERECLAUSE + N''AND cf.ControlTypeID IN (20,21,23)
		) AS AllUngrouped
    ) x
    pivot 
    (
        max(ColumnValue)
        for ColumnName in ('' + @multiValueColumns + '')
    ) p 
) AS cf_all ON cf_all.glb_fix_id = eui.Id AND '' + @EUIWHERECLAUSE;	
END

SET @query = @query + N'' WHERE '' + @EUIWHERECLAUSE;	
SET @query = @query + N'' ORDER BY FirstName;'';

DECLARE @paramList NVARCHAR(500);

SET @paramList = N''@ArticleID INT
	,@RecurringID INT''
		
exec sp_executesql @statement = @query
	,@paramList = @paramList
	,@ArticleID = @ArticleID
	,@RecurringID = @RecurringID

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsGetValues]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNfieldsGetValues]
(
	@ArticleID INT,
	@FieldsTemplateID INT,
	@LocaleCode	NVARCHAR(20) = NULL,
	@ShowHiddenFields BIT
)
AS
SET NOCOUNT ON;    
IF @LocaleCode IS NULL
BEGIN
	SELECT fv.[ArticleID], cf.[CustomFieldID],cf.[ControlTypeID],cf.[Token],cf.[ShowLabel],cf.[LabelValue],cf.[LabelHelp],cf.[IsParent],cf.[IconURL],cf.[ACode],cf.[DisplayFormat],cf.[Options],fv.[RText],fv.[Decimal],fv.[Int],fv.[Bit],fv.[DateTime],NULL AS [FieldElementID],fv.[Text],gt.[Position],NULL AS [MEPosition]
	FROM {databaseOwner}[{objectQualifier}EasyDNNfields] AS cf
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsTemplateItems] AS gt ON cf.[CustomFieldID] = gt.[CustomFieldID]
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValues] as fv ON cf.[CustomFieldID] = fv.[CustomFieldID]
	WHERE cf.[IsPublished] = 1
		AND (@ShowHiddenFields = 1 OR cf.[IsHidden] = @ShowHiddenFields)
		AND gt.[FieldsTemplateID] = @FieldsTemplateID AND fv.[ArticleID] = @ArticleID
		AND cf.ControlTypeID < 300
	UNION ALL
	SELECT fms.[ArticleID], cf.[CustomFieldID],cf.[ControlTypeID],cf.[Token],cf.[ShowLabel],cf.[LabelValue],cf.[LabelHelp],cf.[IsParent],cf.[IconURL],NULL AS [ACode],NULL AS [DisplayFormat],cf.[Options],NULL as [RText], NULL AS [Decimal],NULL AS [Int],NULL AS [Bit], NULL AS [DateTime],fme.[FieldElementID],fme.[Text],gt.[Position],fme.[Position] AS [MEPosition]
	FROM {databaseOwner}[{objectQualifier}EasyDNNfields] as cf INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsTemplateItems] AS gt ON cf.[CustomFieldID] = gt.[CustomFieldID]
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiElements] as fme ON cf.[CustomFieldID] = fme.[CustomFieldID]
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiSelected] as fms ON cf.[CustomFieldID] = fms.[CustomFieldID] AND fme.[FieldElementID] = fms.[FieldElementID] AND ((cf.[ShowAllMultiElements] = 0 AND fms.[ArticleID] = @ArticleID) OR (cf.[ShowAllMultiElements] = 1 AND (fms.[ArticleID] = @ArticleID OR (fms.[ArticleID] IS NULL AND cf.[ControlTypeID] = 23))))
	WHERE cf.[IsPublished] = 1
		AND (@ShowHiddenFields = 1 OR cf.[IsHidden] = @ShowHiddenFields)
		AND gt.[FieldsTemplateID] = @FieldsTemplateID
		AND ((cf.[ShowAllMultiElements] = 0 AND fms.[ArticleID] = @ArticleID) OR (cf.[ShowAllMultiElements] = 1 AND (fms.[ArticleID] = @ArticleID OR (fms.[ArticleID] IS NULL AND cf.[ControlTypeID] = 23))))
		AND cf.ControlTypeID < 300
	ORDER BY [Position], [MEPosition];
END
ELSE
BEGIN
	;WITH AllValues ([ArticleID],[CustomFieldID],[ControlTypeID],[Token],[ShowLabel],[LabelValue],[LabelHelp],[IsParent],[IconURL],[ACode],[DisplayFormat],[Options],[RText],[Decimal],[Int],[Bit],[DateTime],[FieldElementID],[Text],[Position],[MEPosition])AS (
		SELECT fv.[ArticleID], cf.[CustomFieldID],cf.[ControlTypeID],cf.[Token],cf.[ShowLabel],cf.[LabelValue],cf.[LabelHelp],cf.[IsParent],cf.[IconURL],cf.[ACode],cf.[DisplayFormat],cf.[Options],fv.[RText],fv.[Decimal],fv.[Int],fv.[Bit],fv.[DateTime],NULL AS [FieldElementID],fv.[Text],gt.[Position],NULL AS [MEPosition]
		FROM {databaseOwner}[{objectQualifier}EasyDNNfields] AS cf INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsTemplateItems] AS gt ON cf.[CustomFieldID] = gt.[CustomFieldID]
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValues] as fv ON cf.[CustomFieldID] = fv.[CustomFieldID]
		WHERE cf.[IsPublished] = 1
			AND (@ShowHiddenFields = 1 OR cf.[IsHidden] = @ShowHiddenFields)
			AND gt.[FieldsTemplateID] = @FieldsTemplateID AND fv.[ArticleID] = @ArticleID
			AND cf.ControlTypeID < 300
		UNION ALL
		SELECT fms.[ArticleID], cf.[CustomFieldID],cf.[ControlTypeID],cf.[Token],cf.[ShowLabel],cf.[LabelValue],cf.[LabelHelp],cf.[IsParent],cf.[IconURL],NULL AS [ACode],NULL AS [DisplayFormat],cf.[Options],NULL as [RText], NULL AS [Decimal],NULL AS [Int],NULL AS [Bit],NULL AS [DateTime],fme.[FieldElementID],fme.[Text],gt.[Position],fme.[Position] AS [MEPosition]
		FROM {databaseOwner}[{objectQualifier}EasyDNNfields] as cf INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsTemplateItems] AS gt ON cf.[CustomFieldID] = gt.[CustomFieldID]
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiElements] as fme ON cf.[CustomFieldID] = fme.[CustomFieldID]
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiSelected] as fms ON cf.[CustomFieldID] = fms.[CustomFieldID] AND fms.[FieldElementID] = fme.[FieldElementID] AND ((cf.[ShowAllMultiElements] = 0 AND fms.[ArticleID] = @ArticleID) OR (cf.[ShowAllMultiElements] = 1 AND (fms.[ArticleID] = @ArticleID OR (fms.[ArticleID] IS NULL AND cf.[ControlTypeID] = 23))))
		WHERE cf.[IsPublished] = 1
			AND (@ShowHiddenFields = 1 OR cf.[IsHidden] = @ShowHiddenFields)
			AND gt.[FieldsTemplateID] = @FieldsTemplateID
			AND ((cf.[ShowAllMultiElements] = 0 AND fms.[ArticleID] = @ArticleID) OR (cf.[ShowAllMultiElements] = 1 AND (fms.[ArticleID] = @ArticleID OR (fms.[ArticleID] IS NULL AND cf.[ControlTypeID] = 23))))
			AND cf.ControlTypeID < 300
	),
	LocalizedSingleValues ([ArticleID],[CustomFieldID],[ControlTypeID],[Token],[ShowLabel],[LabelValue],[LabelHelp],[IsParent],[IconURL],[ACode],[DisplayFormat],[Options],[RText],[Decimal],[Int],[Bit],[DateTime],[FieldElementID],[Text],[Position],[MEPosition]) AS(
		SELECT av.[ArticleID], av.[CustomFieldID],av.[ControlTypeID],av.[Token],av.[ShowLabel],av.[LabelValue],av.[LabelHelp],av.[IsParent],av.[IconURL],av.[ACode],av.[DisplayFormat],av.[Options],fvl.[RText],av.[Decimal],av.[Int],av.[Bit],av.[DateTime],av.[FieldElementID],fvl.[Text],av.[Position],av.[MEPosition]
		FROM AllValues as av
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValuesLocalization] AS fvl ON av.CustomFieldID = fvl.CustomFieldID AND fvl.ArticleID = @ArticleID AND fvl.LocaleCode = @LocaleCode
		WHERE (av.ControlTypeID = 1 OR av.ControlTypeID = 2)
	),
	LocalizedMultiValues ([ArticleID],[CustomFieldID],[ControlTypeID],[Token],[ShowLabel],[LabelValue],[LabelHelp],[IsParent],[IconURL],[ACode],[DisplayFormat],[Options],[RText],[Decimal],[Int],[Bit],[DateTime],[FieldElementID],[Text],[Position],[MEPosition]) AS(
		SELECT av.[ArticleID], av.[CustomFieldID],av.[ControlTypeID],av.[Token],av.[ShowLabel],av.[LabelValue],av.[LabelHelp],av.[IsParent],
			av.[IconURL],av.[ACode],av.[DisplayFormat],av.[Options],av.[RText],av.[Decimal],av.[Int],av.[Bit],av.[DateTime],av.[FieldElementID],fmel.[Text],av.[Position],av.[MEPosition]
		FROM AllValues as av
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiElementsLocalization] AS fmel ON av.FieldElementID = fmel.FieldElementID AND fmel.LocaleCode = @LocaleCode
	),
	CombinedValues ([ArticleID],[CustomFieldID],[ControlTypeID],[Token],[ShowLabel],[LabelValue],[LabelHelp],[IsParent],[IconURL],[ACode],[DisplayFormat],[Options],[RText],[Decimal],[Int],[Bit],[DateTime],[FieldElementID],[Text],[Position],[MEPosition]) AS(
		--u zadnjem redu ovo field element is nul null to je zato jer se prilikom joina maknul,.. jer se pretpostavlja da je null
		SELECT * FROM LocalizedSingleValues
		UNION ALL
		SELECT * FROM LocalizedMultiValues
		UNION ALL
		SELECT * FROM AllValues WHERE (CustomFieldID NOT IN (SELECT CustomFieldID FROM LocalizedSingleValues)) AND ((FieldElementID NOT IN (SELECT FieldElementID FROM LocalizedMultiValues)) OR FieldElementID IS NULL)
	),
	LocalizedLabelsAndFinalize ([ArticleID],[CustomFieldID],[ControlTypeID],[Token],[ShowLabel],[LabelValue],[LabelHelp],[IsParent],[IconURL],[ACode],[DisplayFormat],[Options],[RText],[Decimal],[Int],[Bit],[DateTime],[FieldElementID],[Text],[Position],[MEPosition]) AS(
		SELECT cv.[ArticleID],cv.[CustomFieldID],cv.[ControlTypeID],cv.[Token],cv.[ShowLabel],fl.[LabelValue],fl.[LabelHelp],cv.[IsParent],
			cv.[IconURL],cv.[ACode],cv.[DisplayFormat],cv.[Options],cv.[RText],cv.[Decimal],cv.[Int],cv.[Bit],cv.[DateTime],cv.[FieldElementID],cv.[Text],cv.[Position],cv.[MEPosition]
		FROM CombinedValues as cv
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsLocalization] AS fl ON cv.CustomFieldID = fl.CustomFieldID AND fl.LocaleCode = @LocaleCode
	)
	SELECT * FROM LocalizedLabelsAndFinalize
	UNION ALL
	SELECT * FROM CombinedValues WHERE CustomFieldID NOT IN (SELECT CustomFieldID FROM LocalizedLabelsAndFinalize)
	ORDER BY [Position], [MEPosition];
END' 
END
GO