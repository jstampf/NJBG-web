IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsSearchSettings' and column_name = 'ResetButtonVisible')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsSearchSettings] ADD ResetButtonVisible BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsSearchSettings_ResetButtonVisible DEFAULT(0) NOT NULL
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'SubjectPaymentRequest')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD SubjectPaymentRequest NVARCHAR(256) NULL
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'TemplatePaymentRequest')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD TemplatePaymentRequest NVARCHAR(MAX) NULL
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'PaymentEnabled')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD PaymentEnabled BIT NULL
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'PaymentType')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD PaymentType TINYINT NULL
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'PayPalKey')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD PayPalKey NVARCHAR(4000) NULL
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'PayPalSandBoxMode')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD PayPalSandBoxMode BIT NULL
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'StoreRegion')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD StoreRegion NVARCHAR(8) NULL
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'StoreCountry')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD StoreCountry NVARCHAR(8) NULL
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'PaymentCurrency')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD PaymentCurrency NVARCHAR(16) NULL
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'PaymentTaxType')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD PaymentTaxType TINYINT NULL
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'HomeCountry')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD HomeCountry NVARCHAR(8) NULL
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'HomeState')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD HomeState NVARCHAR(8) NULL
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'TaxValue')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD TaxValue DECIMAL(6,4) NULL
END
GO

IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'PaymentEnabled')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD PaymentEnabled BIT NULL
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'PaymentByType')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD PaymentByType TINYINT NULL
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'FixedPrice')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD FixedPrice MONEY NULL
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'AttendeesDiscount')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD AttendeesDiscount XML NULL
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPortalTaxes]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPortalTaxes](
	[PortalID] [int] NOT NULL,
	[Country] [nvarchar](8) NOT NULL,
	[Region] [nvarchar](8) NOT NULL,
	[TaxValue] [decimal](6, 4) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNNewsEventPortalTaxes] PRIMARY KEY CLUSTERED 
(
	[PortalID] ASC,
	[Country] ASC,
	[Region] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsPayment]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPayment](
	[EventUserItemID] [int] NOT NULL,
	[InvoiceGUID] [uniqueidentifier] NOT NULL,
	[SubTotal] [money] NOT NULL,
	[Discount] [money] NOT NULL,
	[TaxValue] [money] NOT NULL,
	[EstimatedTotal] [money] NOT NULL,
	[PaymentStatus] [tinyint] NOT NULL,
	[PaymentXML] [xml] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNNewsEventsPayment] PRIMARY KEY CLUSTERED 
(
	[EventUserItemID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentProcess]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentProcess](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EventUserItemID] [int] NOT NULL,
	[TransactionID] [nvarchar](50) NOT NULL,
	[ProcessDateTime] [datetime] NOT NULL,
	[Message] [nvarchar](4000) NULL,
	[IPNmessage] [nvarchar](4000) NOT NULL,
	[PaymentStatus] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNNewsEventsPaymentProcess] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[DF_{objectQualifier}EasyDNNNewsEventsPaymentProcess_ProcessDateTime]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentProcess]'))
Begin
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[DF_{objectQualifier}EasyDNNNewsEventsPaymentProcess_ProcessDateTime]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentProcess] ADD  CONSTRAINT [DF_{objectQualifier}EasyDNNNewsEventsPaymentProcess_ProcessDateTime]  DEFAULT (getutcdate()) FOR [ProcessDateTime]
END


End
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventPortalTaxes_Portals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPortalTaxes]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPortalTaxes]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventPortalTaxes_Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventPortalTaxes_Portals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPortalTaxes]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPortalTaxes] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventPortalTaxes_Portals]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsPayment_EasyDNNNewsEventsUserItems]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsPayment]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPayment]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsPayment_EasyDNNNewsEventsUserItems] FOREIGN KEY([EventUserItemID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] ([Id]) ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsPayment_EasyDNNNewsEventsUserItems]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsPayment]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPayment] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsPayment_EasyDNNNewsEventsUserItems]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsPaymentProcess_EasyDNNNewsEventsPayment]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentProcess]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentProcess]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsPaymentProcess_EasyDNNNewsEventsPayment] FOREIGN KEY([EventUserItemID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPayment] ([EventUserItemID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsPaymentProcess_EasyDNNNewsEventsPayment]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentProcess]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentProcess] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsPaymentProcess_EasyDNNNewsEventsPayment]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetEventsWithRegistration]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetEventsWithRegistration]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetEventsWithRegistrationCount]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetEventsWithRegistrationCount]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetEventsWithRegistrationCount]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetEventsWithRegistrationCount]
	@PortalID INT, -- current Portal
	@ModuleID INT, -- current Module, portal sharing isto sadrzi dobre kategorije, auto add i setingsi su snimljeni kod tog modula
	@UserID INT,
	@ItemsFrom INT = 1,
	@ItemsTo INT = 5,
	@OnlyOneCategory INT = 0, -- used for category menu or vhen need to filter by one category
	@FilterByAuthor INT = 0, -- ako se selektiran jedan autor
	@FilterByGroupID INT = 0, -- ako je selektirana grupa
	@EditOnlyAsOwner BIT = 0, -- news settings
	@UserCanApprove BIT = 0, -- news settings
	@Perm_ViewAllCategores BIT = 0, -- permission settings View all categories
	@Perm_EditAllCategores BIT = 0, -- permission settings Edit all categories
	@AdminOrSuperUser BIT = 0,
	@PermissionSettingsSource BIT = 1, -- 1 portal, 0 module
	@OrderBy NVARCHAR(20) = ''PublishDate DESC'',
	@OrderBy2 NVARCHAR(20) = '''',
	
	@Featured TINYINT = 0,
	@Published TINYINT = 0,
	@Approved TINYINT = 0,
	@ArticleType TINYINT = 0,
	@Payed TINYINT = 0,
	@PermissionsByArticle TINYINT = 0,
	@StartDate DATETIME	
AS
SET NOCOUNT ON;
DECLARE @EditPermission TINYINT;
SET @EditPermission = 0;
DECLARE @UserInRoles TABLE (RoleID INT NOT NULL PRIMARY KEY);
INSERT INTO @UserInRoles SELECT DISTINCT ur.[RoleID] FROM {databaseOwner}[{objectQualifier}UserRoles] AS ur INNER JOIN {databaseOwner}[{objectQualifier}Roles] AS r ON ur.RoleID = r.RoleID WHERE ur.UserID = @UserID AND r.PortalID = @PortalID AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > GETUTCDATE()) AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < GETUTCDATE());
DECLARE @UserEditCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can edit based on permissions

DECLARE @FilterAuthorOrAuthors BIT;
SET @FilterAuthorOrAuthors = 0;
DECLARE @TempAuthorsIDList TABLE (UserID INT NOT NULL PRIMARY KEY);
IF @FilterByAuthor <> 0
BEGIN
	SET @FilterAuthorOrAuthors = 1;
	INSERT INTO @TempAuthorsIDList SELECT @FilterByAuthor;
END
ELSE IF @FilterByGroupID <> 0
BEGIN
	SET @FilterAuthorOrAuthors = 1;
	INSERT INTO @TempAuthorsIDList
	SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID	
		WHERE agi.GroupID = @FilterByGroupID
END

-- kategorije sa edit pravima
IF @AdminOrSuperUser = 1 OR @Perm_EditAllCategores = 1
BEGIN	
	INSERT INTO @UserEditCategories SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
	SET @EditPermission = 1;
END
ELSE
BEGIN
	IF @UserID = -1
	BEGIN
		IF @PermissionSettingsSource = 1 -- by portal
		BEGIN
			INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
		END
		ELSE -- by module
		BEGIN
			INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			WHERE rps.RoleID IS NULL AND rps.PortalID = @PortalID AND rps.ModuleID = @ModuleID;
		END
	END
	ELSE -- registrirani korisnik
	BEGIN
		IF @PermissionSettingsSource = 1 -- by portal
		BEGIN
			INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL GROUP BY rpatc.[CategoryID]
			UNION
			SELECT upatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsAddToCategories] AS upatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upatc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL GROUP BY upatc.[CategoryID];
		END
		ELSE -- by module
		BEGIN
			INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID = @ModuleID GROUP BY rpatc.[CategoryID]
			UNION
			SELECT upatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsAddToCategories] AS upatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upatc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @ModuleID GROUP BY upatc.[CategoryID];
		END	
	END
	IF EXISTS(SELECT TOP (1) * FROM @UserEditCategories) BEGIN SET @EditPermission = 2; END
END

IF @OnlyOneCategory <> 0 -- filtrira se po jednoj kategoriji
BEGIN
	 DELETE uec FROM @UserEditCategories AS uec WHERE uec.CategoryID NOT IN (SELECT @OnlyOneCategory);
END

DECLARE @ArticlesInCategories INT;
SET @ArticlesInCategories = 0;
DECLARE @ArticlesInRolesAndUsers INT;
SET @ArticlesInRolesAndUsers = 0;


SELECT @ArticlesInCategories = Count(ArticleID) FROM (
	SELECT [ArticleID], [RecurringID] FROM (
		SELECT na.[ArticleID], er.[RecurringID], CASE WHEN e.Recurring = 1 THEN er.StartDateTime ELSE e.StartDate END AS FilterStartDate
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS e ON na.ArticleID = e.ArticleID AND e.[EventType] IS NOT NULL
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS er ON e.ArticleID = er.ArticleID AND e.Recurring = 1
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
		INNER JOIN @UserEditCategories AS uec ON uec.CategoryID = cat.CategoryID
	WHERE na.PortalID=@PortalID AND e.[EventType] IS NOT NULL
		AND ((@Payed = 0) OR ((@Payed = 1 AND e.PaymentEnabled IS NOT NULL AND e.PaymentEnabled = 1) OR (@Payed = 2 AND ((e.PaymentEnabled IS NOT NULL AND e.PaymentEnabled = 0) OR e.PaymentEnabled IS NULL))))
		AND na.HasPermissions = 0
		AND na.Approved = 1
		--AND na.UserID = @UserID
		--AND ((@Approved = 0) OR ((@Approved = 1 AND na.Approved = 1) OR (@Approved = 2 AND na.Approved = 0)))
		AND ((@ArticleType = 0) OR ((@ArticleType = 1 AND na.EventArticle = 0) OR (@ArticleType = 2 AND na.EventArticle = 1)))
		AND ((@PermissionsByArticle = 0) OR ((@PermissionsByArticle = 1 AND na.HasPermissions = 1) OR (@PermissionsByArticle = 2 AND na.HasPermissions = 0)))
		AND ((@Published = 0) OR ((@Published = 1 AND na.Active = 1) OR (@Published = 2 AND na.Active = 0)))
		AND ((@Featured = 0) OR ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 2 AND na.Featured = 0)))
		AND ((@FilterAuthorOrAuthors = 0) OR (@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)))
		) AS becauseStartDateFilter WHERE FilterStartDate >= @StartDate
GROUP BY ArticleID, [RecurringID]
) AS CountTable;

SELECT @ArticlesInRolesAndUsers = Count(ArticleID) FROM (
	SELECT [ArticleID], [RecurringID] FROM (
		SELECT na.[ArticleID], er.[RecurringID], CASE WHEN e.Recurring = 1 THEN er.StartDateTime ELSE e.StartDate END AS FilterStartDate
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS e ON na.ArticleID = e.ArticleID AND e.[EventType] IS NOT NULL
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS er ON e.ArticleID = er.ArticleID AND e.Recurring = 1
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
	WHERE na.PortalID=@PortalID AND e.[EventType] IS NOT NULL
		AND ((@Payed = 0) OR ((@Payed = 1 AND e.PaymentEnabled IS NOT NULL AND e.PaymentEnabled = 1) OR (@Payed = 2 AND ((e.PaymentEnabled IS NOT NULL AND e.PaymentEnabled = 0) OR e.PaymentEnabled IS NULL))))
		AND ((@EditPermission = 1) OR ((aup.Edit = 1) AND ((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))))
		AND na.HasPermissions = 1
		AND na.Approved = 1
		--AND na.UserID = @UserID
		--AND ((@Approved = 0) OR ((@Approved = 1 AND na.Approved = 1) OR (@Approved = 2 AND na.Approved = 0)))
		AND ((@ArticleType = 0) OR ((@ArticleType = 1 AND na.EventArticle = 0) OR (@ArticleType = 2 AND na.EventArticle = 1)))
	    AND ((@PermissionsByArticle = 0) OR ((@PermissionsByArticle = 1 AND na.HasPermissions = 1) OR (@PermissionsByArticle = 2 AND na.HasPermissions = 0)))
		AND ((@Published = 0) OR ((@Published = 1 AND na.Active = 1) OR (@Published = 2 AND na.Active = 0)))
		AND ((@Featured = 0) OR ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 2 AND na.Featured = 0)))
		AND ((@FilterAuthorOrAuthors = 0) OR (@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)))
		AND ((@OnlyOneCategory <> 0 AND cat.CategoryID IN (SELECT @OnlyOneCategory)) OR (@OnlyOneCategory = 0))
	) AS becauseStartDateFilter WHERE FilterStartDate >= @StartDate
	GROUP BY ArticleID, [RecurringID]
	UNION
	SELECT [ArticleID], [RecurringID] FROM (
		SELECT na.[ArticleID], er.[RecurringID], CASE WHEN e.Recurring = 1 THEN er.StartDateTime ELSE e.StartDate END AS FilterStartDate
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS e ON na.ArticleID = e.ArticleID AND e.[EventType] IS NOT NULL
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS er ON e.ArticleID = er.ArticleID AND e.Recurring = 1
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
	WHERE na.PortalID=@PortalID AND e.[EventType] IS NOT NULL
		AND ((@Payed = 0) OR ((@Payed = 1 AND e.PaymentEnabled IS NOT NULL AND e.PaymentEnabled = 1) OR (@Payed = 2 AND ((e.PaymentEnabled IS NOT NULL AND e.PaymentEnabled = 0) OR e.PaymentEnabled IS NULL))))
		AND na.HasPermissions = 1
		AND na.Approved = 1
		--AND na.UserID = @UserID
		AND ((@EditPermission = 1) OR ((arp.Edit = 1) AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
		--AND ((@Approved = 0) OR ((@Approved = 1 AND na.Approved = 1) OR (@Approved = 2 AND na.Approved = 0)))
		AND ((@ArticleType = 0) OR ((@ArticleType = 1 AND na.EventArticle = 0) OR (@ArticleType = 2 AND na.EventArticle = 1)))
	    AND ((@PermissionsByArticle = 0) OR ((@PermissionsByArticle = 1 AND na.HasPermissions = 1) OR (@PermissionsByArticle = 2 AND na.HasPermissions = 0)))
		AND ((@Published = 0) OR ((@Published = 1 AND na.Active = 1) OR (@Published = 2 AND na.Active = 0)))
		AND ((@Featured = 0) OR ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 2 AND na.Featured = 0)))
		AND ((@FilterAuthorOrAuthors = 0) OR (@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)))
		AND ((@OnlyOneCategory <> 0 AND cat.CategoryID IN (SELECT @OnlyOneCategory)) OR (@OnlyOneCategory = 0))
	) AS becauseStartDateFilter WHERE FilterStartDate >= @StartDate
	GROUP BY ArticleID, [RecurringID]
) AS final

SELECT @ArticlesInRolesAndUsers + @ArticlesInCategories
     
     ' 
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetEventsWithRegistration]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetEventsWithRegistration]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetEventsWithRegistration]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetEventsWithRegistration]
	@PortalID INT, -- current Portal
	@ModuleID INT, -- current Module, portal sharing isto sadrzi dobre kategorije, auto add i setingsi su snimljeni kod tog modula
	@UserID INT,
	@ItemsFrom INT = 1,
	@ItemsTo INT = 5,
	@OnlyOneCategory INT = 0, -- used for category menu or when need to filter by one category
	@FilterByAuthor INT = 0, -- ako se selektiran jedan autor
	@FilterByGroupID INT = 0, -- ako je selektirana grupa
	@EditOnlyAsOwner BIT = 0, -- news settings
	@UserCanApprove BIT = 0, -- news settings
	@Perm_ViewAllCategores BIT = 0, -- permission settings View all categories
	@Perm_EditAllCategores BIT = 0, -- permission settings Edit all categories
	@AdminOrSuperUser BIT = 0,
	@PermissionSettingsSource BIT = 1, -- 1 portal, 0 module
	@OrderBy NVARCHAR(20) = ''PublishDate DESC'',
	@OrderBy2 NVARCHAR(20) = '''',
	
	@Featured TINYINT = 0,
	@Published TINYINT = 0,
	@Approved TINYINT = 0,
	@ArticleType TINYINT = 0,
	@Payed TINYINT = 0,
	@PermissionsByArticle TINYINT = 0,
	@StartDate DATETIME
AS
SET NOCOUNT ON;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();
DECLARE @EditPermission TINYINT;
SET @EditPermission = 0;
DECLARE @UserInRoles TABLE (RoleID INT NOT NULL PRIMARY KEY);
IF @UserID <> -1
INSERT INTO @UserInRoles SELECT DISTINCT r.[RoleID] FROM {databaseOwner}[{objectQualifier}Roles] AS r INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID WHERE ur.UserID = @UserID AND r.PortalID = @PortalID AND ( ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate ) AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate);
DECLARE @UserEditCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can edit based on permissions

DECLARE @FilterAuthorOrAuthors BIT;
SET @FilterAuthorOrAuthors = 0;
DECLARE @TempAuthorsIDList TABLE (UserID INT NOT NULL PRIMARY KEY);
IF @FilterByAuthor <> 0
BEGIN
	SET @FilterAuthorOrAuthors = 1;
	INSERT INTO @TempAuthorsIDList SELECT @FilterByAuthor;
END
ELSE IF @FilterByGroupID <> 0
BEGIN
	SET @FilterAuthorOrAuthors = 1;
	INSERT INTO @TempAuthorsIDList
	SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID	
		WHERE agi.GroupID = @FilterByGroupID
END

-- kategorije sa edit pravima
IF @AdminOrSuperUser = 1 OR @Perm_EditAllCategores = 1
BEGIN	
	INSERT INTO @UserEditCategories SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
	SET @EditPermission = 1;
END
ELSE
BEGIN
	IF @UserID = -1
	BEGIN
		IF @PermissionSettingsSource = 1 -- by portal
		BEGIN
			INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
		END
		ELSE -- by module
		BEGIN
			INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			WHERE rps.RoleID IS NULL AND rps.PortalID = @PortalID AND rps.ModuleID = @ModuleID;
		END
	END
	ELSE -- registrirani korisnik
	BEGIN
		IF @PermissionSettingsSource = 1 -- by portal
		BEGIN
			INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL
			UNION
			SELECT upatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsAddToCategories] AS upatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upatc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL;
		END
		ELSE -- by module
		BEGIN
			INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID = @ModuleID
			UNION
			SELECT upatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsAddToCategories] AS upatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upatc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @ModuleID;
		END	
	END
	IF EXISTS(SELECT TOP (1) * FROM @UserEditCategories) BEGIN SET @EditPermission = 2; END
END

IF @OnlyOneCategory <> 0 -- filtrira se po jednoj kategoriji
BEGIN
	 DELETE uec FROM @UserEditCategories AS uec WHERE uec.CategoryID NOT IN (SELECT @OnlyOneCategory);
END
	SELECT Result.ArticleID,Result.UserID,Result.ArticleImage,Result.Featured,Result.Active,Result.Approved,Result.Title,Result.PublishDate,Result.NumberOfViews,Result.RatingValue,Result.DateAdded,Result.ExpireDate,Result.LastModified,Result.NumberOfComments,
	Result.Recurring,Result.[MaxNumberOfTickets], Result.[RecurringID], Result.[EventType], Result.[DisableFurtherRegistration],Result.[RegistrationApproval],
	CASE WHEN u.DisplayName IS NULL THEN ''Anonym'' ELSE u.DisplayName END AS DisplayName,
	CASE @EditPermission 
		WHEN 0 THEN 0
		WHEN 1 THEN 1
		WHEN 2 THEN
		CASE @EditOnlyAsOwner
			WHEN 0 THEN			
				CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
					THEN 1
					ELSE
						CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
						THEN 1
						ELSE
							CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
								THEN 1
								ELSE 0
							END
						END
				END  			
			WHEN 1 THEN
				CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE Result.UserID = @UserID AND c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
					THEN 1
					ELSE
						CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
						THEN 1
						ELSE
							CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
								THEN 1
								ELSE 0
							END
						END 
				END
		END
		WHEN 3 THEN
			CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
				THEN 1
				ELSE
				CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
					THEN 1
					ELSE 0
					END
				END 
	END AS ''CanEdit'',
	 CASE Result.Active
		WHEN 1 THEN 0
		WHEN 0 THEN 1
	 END AS ''Published'',
	 CASE @UserCanApprove
		WHEN 0 THEN 0
		WHEN 1 THEN
			CASE Result.Approved
			 WHEN 1 THEN 0
			 WHEN 0 THEN
				 CASE Result.Active
					WHEN 1 THEN 1
					WHEN 0 THEN 0
				END
			END
	 END AS ''Approve'',
	(
		CASE WHEN Result.EventType = 1
		THEN
			CASE WHEN Result.Recurring = 1
			THEN
				(SELECT ISNULL(SUM(eui.NumberOfTickets), 0) FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS eui WHERE eui.RecurringArticleID = Result.ArticleID AND eui.RecurringID = Result.RecurringID AND eui.ApproveStatus = 1 AND eui.UserStatus = 1)
			ELSE
				(SELECT ISNULL(SUM(eui.NumberOfTickets), 0) FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS eui WHERE eui.ArticleID = Result.ArticleID AND eui.ApproveStatus = 1 AND eui.UserStatus = 1)	  
			END
		ELSE
			CASE WHEN Result.Recurring = 1
			THEN
				CASE WHEN Result.PaymentEnabled = 1
				THEN
					(SELECT ISNULL(SUM(eui.NumberOfTickets), 0)
					 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS eui
					 INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPayment] AS ep ON eui.Id = ep.EventUserItemID AND ep.PaymentStatus <> 11
					 WHERE eui.RecurringArticleID = Result.ArticleID AND eui.RecurringID = Result.RecurringID AND eui.ApproveStatus = 1)
				ELSE
					(SELECT ISNULL(SUM(eui.NumberOfTickets), 0) FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS eui WHERE eui.RecurringArticleID = Result.ArticleID AND eui.RecurringID = Result.RecurringID AND eui.ApproveStatus = 1)
				END
			ELSE
				CASE WHEN Result.PaymentEnabled = 1
				THEN
					(SELECT ISNULL(SUM(eui.NumberOfTickets), 0)
					 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS eui
					 INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPayment] AS ep ON eui.Id = ep.EventUserItemID AND ep.PaymentStatus <> 11
					 WHERE eui.ArticleID = Result.ArticleID AND eui.ApproveStatus = 1)	  
				ELSE
					(SELECT ISNULL(SUM(eui.NumberOfTickets), 0) FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS eui WHERE eui.ArticleID = Result.ArticleID AND eui.ApproveStatus = 1)	  
				END
			END
		END
	)
	   AS RegistratedCount,
	  (CASE WHEN Result.Recurring = 1 THEN
	  (SELECT ISNULL(SUM(eui.NumberOfTickets), 0) FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS eui WHERE eui.RecurringArticleID = Result.ArticleID AND eui.RecurringID = Result.RecurringID)
	  ELSE
	  (SELECT ISNULL(SUM(eui.NumberOfTickets), 0) FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS eui WHERE eui.ArticleID = Result.ArticleID)	  
	  END) AS HasAttendees,
	  (CASE WHEN Result.Recurring = 1 THEN
	  (SELECT COUNT(ui.[Id])
FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS ui
LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNnewsEventEmailVerifications] as eau ON ui.Id = eau.EventUserItemID AND eau.IsActivated = 1
WHERE ui.RecurringArticleID = Result.ArticleID AND ui.RecurringID = Result.RecurringID AND ui.ApproveStatus = 0)
	  ELSE
	  (SELECT COUNT(ui.[Id])
FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS ui
LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNnewsEventEmailVerifications] as eau ON ui.Id = eau.EventUserItemID AND eau.IsActivated = 1
WHERE ui.ArticleID = Result.ArticleID AND ui.ApproveStatus = 0)	  
	  END) AS ApproveAttendeeCount,
	  (CASE WHEN Result.Recurring = 1 THEN
	  Result.StartDateTime
	  ELSE
	  Result.StartDate
	  END) AS StartDate,
	  (CASE WHEN Result.Recurring = 1 THEN
	  Result.EndDateTime
	  ELSE
	  Result.EndDate
	  END) AS EndDate,
	  Result.PaymentEnabled,Result.PaymentByType,Result.FixedPrice,
	  (
		CASE WHEN Result.[PaymentEnabled] = 1 AND Result.[PaymentByType] = 1 THEN
			(SELECT Id as "@id", [Name] AS name, CONVERT(varchar(100), CAST([Value] AS decimal(38,2))) AS value
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCosts] AS costs
			WHERE ArticleID = Result.ArticleID
			ORDER BY Position FOR XML PATH (''cost''), ROOT (''costs''))
		ELSE
			NULL
		END
		) AS CostPerAttendee
	  ,Result.AttendeesDiscount,
	  
	  CASE WHEN Result.PaymentEnabled IS NOT NULL AND Result.PaymentEnabled = 1 THEN
	  (CASE WHEN Result.Recurring = 1
			THEN
				(SELECT ISNULL(SUM(ep.SubTotal), 0) AS SubTotal,
					ISNULL(SUM(ep.Discount), 0) AS Discount,
					ISNULL(SUM(ep.TaxValue), 0) AS TaxValue,
					ISNULL(SUM(ep.EstimatedTotal), 0) AS EstimatedTotal FROM
				{databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS EventCosts
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPayment] AS ep ON ep.EventUserItemID = EventCosts.Id
				WHERE EventCosts.RecurringArticleID = Result.ArticleID AND EventCosts.RecurringID = Result.RecurringID AND EventCosts.ApproveStatus = 1 AND EventCosts.UserStatus = 1 AND ep.PaymentStatus = 1
				FOR XML AUTO)
			ELSE
				(SELECT ISNULL(SUM(ep.SubTotal), 0) AS SubTotal,
					ISNULL(SUM(ep.Discount), 0) AS Discount,
					ISNULL(SUM(ep.TaxValue), 0) AS TaxValue,
					ISNULL(SUM(ep.EstimatedTotal), 0) AS EstimatedTotal FROM
				{databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS EventCosts
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPayment] AS ep ON ep.EventUserItemID = EventCosts.Id
				WHERE EventCosts.ArticleID = Result.ArticleID AND EventCosts.ApproveStatus = 1 AND EventCosts.UserStatus = 1 AND ep.PaymentStatus = 1
				FOR XML AUTO)	  
			END
		)
	  ELSE
	  NULL
	  END AS EventCosts
	  
	FROM (
	
	SELECT bsdf.ArticleID,bsdf.UserID,bsdf.ArticleImage,bsdf.Featured,bsdf.Active,bsdf.Approved,bsdf.Title,bsdf.PublishDate,bsdf.NumberOfViews,bsdf.RatingValue,bsdf.DateAdded,bsdf.ExpireDate,bsdf.LastModified,bsdf.NumberOfComments,
	bsdf.Recurring,bsdf.[MaxNumberOfTickets], bsdf.[RecurringID], bsdf.[EventType], bsdf.[DisableFurtherRegistration],bsdf.[RegistrationApproval],bsdf.StartDate,bsdf.EndDate, bsdf.StartDateTime,bsdf.EndDateTime,
	bsdf.FilterStartDate,
	bsdf.PaymentEnabled,bsdf.PaymentByType,bsdf.FixedPrice,bsdf.AttendeesDiscount,
	 ROW_NUMBER() OVER (ORDER BY 
	CASE WHEN @OrderBy =''StartDate ASC'' THEN FilterStartDate END,
	CASE WHEN @OrderBy =''StartDate DESC'' THEN FilterStartDate END DESC,
	CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
	CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
	CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
	CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
	CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
	CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
	CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
	CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
	CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
	CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
	CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
	CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
	CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
	CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
	CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
	CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC,

	CASE WHEN @OrderBy2 =''StartDate ASC'' THEN FilterStartDate END,
	CASE WHEN @OrderBy2 =''StartDate DESC'' THEN FilterStartDate END DESC,
	CASE WHEN @OrderBy2 =''PublishDate ASC'' THEN PublishDate END,
	CASE WHEN @OrderBy2 =''PublishDate DESC'' THEN PublishDate END DESC,
	CASE WHEN @OrderBy2 =''NumberOfViews ASC'' THEN NumberOfViews END,
	CASE WHEN @OrderBy2 =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
	CASE WHEN @OrderBy2 =''RatingValue ASC'' THEN RatingValue END,
	CASE WHEN @OrderBy2 =''RatingValue DESC'' THEN RatingValue END DESC,
	CASE WHEN @OrderBy2 =''DateAdded ASC'' THEN DateAdded END,
	CASE WHEN @OrderBy2 =''DateAdded DESC'' THEN DateAdded END DESC,
	CASE WHEN @OrderBy2 =''ExpireDate ASC'' THEN ExpireDate END,
	CASE WHEN @OrderBy2 =''ExpireDate DESC'' THEN ExpireDate END DESC,
	CASE WHEN @OrderBy2 =''LastModified ASC'' THEN LastModified END,
	CASE WHEN @OrderBy2 =''LastModified DESC'' THEN LastModified END DESC,
	CASE WHEN @OrderBy2 =''NumberOfComments ASC'' THEN NumberOfComments END,
	CASE WHEN @OrderBy2 =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
	CASE WHEN @OrderBy2 =''Title ASC'' THEN Title END,
	CASE WHEN @OrderBy2 =''Title DESC'' THEN Title END DESC) AS Kulike
	
	FROM (
	
	SELECT n.ArticleID,n.UserID,n.ArticleImage,n.Featured,n.Active,n.Approved,n.Title,n.PublishDate,n.NumberOfViews,n.RatingValue,n.DateAdded,n.ExpireDate,n.LastModified,n.NumberOfComments,
	
	e.Recurring,e.[MaxNumberOfTickets], er.[RecurringID], e.[EventType], e.[DisableFurtherRegistration],e.[RegistrationApproval],e.StartDate,e.EndDate, er.StartDateTime,er.EndDateTime,
	CASE WHEN e.Recurring = 1 THEN er.StartDateTime ELSE e.StartDate END AS FilterStartDate,
	e.PaymentEnabled,e.PaymentByType,e.FixedPrice,e.AttendeesDiscount
	FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS e ON n.ArticleID = e.ArticleID AND e.[EventType] IS NOT NULL
	LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS er ON e.ArticleID = er.ArticleID AND e.Recurring = 1 
	WHERE e.[EventType] IS NOT NULL
		AND ((@Payed = 0) OR ((@Payed = 1 AND e.PaymentEnabled IS NOT NULL AND e.PaymentEnabled = 1) OR (@Payed = 2 AND ((e.PaymentEnabled IS NOT NULL AND e.PaymentEnabled = 0) OR e.PaymentEnabled IS NULL))))
		AND n.ArticleID IN(
		SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
			INNER JOIN @UserEditCategories AS uec ON uec.CategoryID = cat.CategoryID
		WHERE na.PortalID=@PortalID
			AND na.HasPermissions = 0
			AND na.Approved = 1
			--AND na.UserID = @UserID
			--AND ((@Approved = 0) OR ((@Approved = 1 AND na.Approved = 1) OR (@Approved = 2 AND na.Approved = 0)))		   
			AND ((@ArticleType = 0) OR ((@ArticleType = 1 AND na.EventArticle = 0) OR (@ArticleType = 2 AND na.EventArticle = 1)))
			AND ((@PermissionsByArticle = 0) OR ((@PermissionsByArticle = 1 AND na.HasPermissions = 1) OR (@PermissionsByArticle = 2 AND na.HasPermissions = 0)))		   
			AND ((@Published = 0) OR ((@Published = 1 AND na.Active = 1) OR (@Published = 2 AND na.Active = 0)))
			AND ((@Featured = 0) OR ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 2 AND na.Featured = 0)))
			AND ((@FilterAuthorOrAuthors = 0) OR (@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)))
		UNION ALL
		SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
		WHERE na.PortalID=@PortalID
			AND na.HasPermissions = 1
			AND na.Approved = 1
			--AND na.UserID = @UserID
			AND ((@EditPermission = 1) OR ((aup.Edit = 1) AND ((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))))
			--AND ((@Approved = 0) OR ((@Approved = 1 AND na.Approved = 1) OR (@Approved = 2 AND na.Approved = 0)))
			AND ((@ArticleType = 0) OR ((@ArticleType = 1 AND na.EventArticle = 0) OR (@ArticleType = 2 AND na.EventArticle = 1)))
			AND ((@PermissionsByArticle = 0) OR ((@PermissionsByArticle = 1 AND na.HasPermissions = 1) OR (@PermissionsByArticle = 2 AND na.HasPermissions = 0)))
			AND ((@Published = 0) OR ((@Published = 1 AND na.Active = 1) OR (@Published = 2 AND na.Active = 0)))
			AND ((@Featured = 0) OR ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 2 AND na.Featured = 0)))
			AND ((@FilterAuthorOrAuthors = 0) OR (@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)))
			AND ((@OnlyOneCategory <> 0 AND cat.CategoryID IN (SELECT @OnlyOneCategory)) OR (@OnlyOneCategory = 0))
		UNION
		SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
		WHERE na.PortalID=@PortalID
			AND na.HasPermissions = 1
			AND na.Approved = 1
			--AND na.UserID = @UserID
			AND ((@EditPermission = 1) OR ((arp.Edit = 1) AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
			--AND ((@Approved = 0) OR ((@Approved = 1 AND na.Approved = 1) OR (@Approved = 2 AND na.Approved = 0)))
			AND ((@ArticleType = 0) OR ((@ArticleType = 1 AND na.EventArticle = 0) OR (@ArticleType = 2 AND na.EventArticle = 1)))
			AND ((@PermissionsByArticle = 0) OR ((@PermissionsByArticle = 1 AND na.HasPermissions = 1) OR (@PermissionsByArticle = 2 AND na.HasPermissions = 0)))
			AND ((@Published = 0) OR ((@Published = 1 AND na.Active = 1) OR (@Published = 2 AND na.Active = 0)))
			AND ((@Featured = 0) OR ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 2 AND na.Featured = 0)))
			AND ((@FilterAuthorOrAuthors = 0) OR (@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)))
			AND ((@OnlyOneCategory <> 0 AND cat.CategoryID IN (SELECT @OnlyOneCategory)) OR (@OnlyOneCategory = 0))
		)
	) AS bsdf WHERE FilterStartDate >= @StartDate		
	 ) AS Result LEFT OUTER JOIN {databaseOwner}[{objectQualifier}Users] AS u ON Result.UserID = u.UserID
	 WHERE Kulike BETWEEN @ItemsFrom AND @ItemsTo
	 ORDER BY
	 CASE WHEN @OrderBy =''StartDate ASC'' THEN FilterStartDate END,
	 CASE WHEN @OrderBy =''StartDate DESC'' THEN FilterStartDate END DESC,
	 CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
	 CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
	 CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
	 CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
	 CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
	 CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
	 CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
	 CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
	 CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
	 CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
	 CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
	 CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
	 CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
	 CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
	 CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
	 CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC,
	 CASE WHEN @OrderBy2 =''StartDate ASC'' THEN FilterStartDate END,
	 CASE WHEN @OrderBy2 =''StartDate DESC'' THEN FilterStartDate END DESC,
	 CASE WHEN @OrderBy2 =''PublishDate ASC'' THEN PublishDate END,
	 CASE WHEN @OrderBy2 =''PublishDate DESC'' THEN PublishDate END DESC,
	 CASE WHEN @OrderBy2 =''NumberOfViews ASC'' THEN NumberOfViews END,
	 CASE WHEN @OrderBy2 =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
	 CASE WHEN @OrderBy2 =''RatingValue ASC'' THEN RatingValue END,
	 CASE WHEN @OrderBy2 =''RatingValue DESC'' THEN RatingValue END DESC,
	 CASE WHEN @OrderBy2 =''DateAdded ASC'' THEN DateAdded END,
	 CASE WHEN @OrderBy2 =''DateAdded DESC'' THEN DateAdded END DESC,
	 CASE WHEN @OrderBy2 =''ExpireDate ASC'' THEN ExpireDate END,
	 CASE WHEN @OrderBy2 =''ExpireDate DESC'' THEN ExpireDate END DESC,
	 CASE WHEN @OrderBy2 =''LastModified ASC'' THEN LastModified END,
	 CASE WHEN @OrderBy2 =''LastModified DESC'' THEN LastModified END DESC,
	 CASE WHEN @OrderBy2 =''NumberOfComments ASC'' THEN NumberOfComments END,
	 CASE WHEN @OrderBy2 =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
	 CASE WHEN @OrderBy2 =''Title ASC'' THEN Title END,
	 CASE WHEN @OrderBy2 =''Title DESC'' THEN Title END DESC;' 
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsCalendarArchive]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarArchive]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsCalendarArchive]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarArchive]
	@PortalID INT,
	@UserID INT,
	@CalendarModuleID INT,
	@AdminOrSuperUser BIT  = 0,
	@LocaleCode NVARCHAR(20) = NULL,
	@IsSocialInstance BIT = 0,
	@FilterByDNNUserID INT = 0, -- filter by some UserID / not current user ID
	@FilterByDNNGroupID INT = 0, -- filter by DNNGroup/RoleID / not profile GroupID
	@ShowAllAuthors BIT = 1, -- filter postavka menija
	@CategoryFilterType TINYINT = 0, --0 All categories, 1 - Selection, 2 - AutoAdd
	@PermissionSettingsSource TINYINT = 0, -- None, 1 - portal, 2 - module
	@PermissionsModuleID INT = 0, -- NewsModuleID
	@HideUnlocalizedItems BIT = 0,
	@DateTimeOffset INT,
	@OnlyArticles BIT = 0,
	@OnlyEvents BIT = 0,
	@FilterCategoryID INT = NULL
AS
SET NOCOUNT ON;
DECLARE @sqlcommand NVARCHAR(max);
DECLARE @paramList NVARCHAR(1000);
SET @paramList = N''
	@PortalID INT,
	@UserID INT,
	@CalendarModuleID INT,
	@LocaleCode NVARCHAR(20),
	@FilterByDNNUserID INT,
	@FilterByDNNGroupID INT,
	@PermissionsModuleID INT,
	@DateTimeOffset INT,
	@FilterCategoryID INT''

SET @sqlcommand = N''
SET NOCOUNT ON;
SET DATEFIRST 1;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();

DECLARE @UserInRoles TABLE (RoleID INT NOT NULL PRIMARY KEY);
IF @UserID <> -1
INSERT INTO @UserInRoles SELECT DISTINCT r.[RoleID] FROM {databaseOwner}[{objectQualifier}Roles] AS r INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID WHERE ur.UserID = @UserID AND r.PortalID = @PortalID AND ( ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate ) AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate);

DECLARE @UserViewCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY);
DECLARE @UserViewCategoriesWithFilter TABLE (CategoryID INT NOT NULL PRIMARY KEY);
DECLARE @FiltredByCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); ''

IF @AdminOrSuperUser = 1 OR @PermissionSettingsSource = 0
BEGIN
	SET @sqlcommand = @sqlcommand + N''INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID; ''
END
ELSE IF @UserID = -1
BEGIN	
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
		BEGIN
			SET @sqlcommand = @sqlcommand + N''INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID; ''
		END
		ELSE
		BEGIN
			SET @sqlcommand = @sqlcommand + N''
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL; ''
		END
	END
	ELSE -- by module
	BEGIN
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleID AND PermissionsPMSource = 0)
		BEGIN
			IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			BEGIN
				SET @sqlcommand = @sqlcommand + N''INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID; ''
			END
			ELSE
			BEGIN
				SET @sqlcommand = @sqlcommand + N''
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID AND rps.RoleID IS NULL; ''
			END
		END
		ELSE
		BEGIN
			IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			BEGIN
				SET @sqlcommand = @sqlcommand + N''INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID; ''
			END
			ELSE
			BEGIN
				SET @sqlcommand = @sqlcommand + N''
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL; ''
			END
		END
	END
END
ELSE -- registrirani korisnik
BEGIN
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		SET @sqlcommand = @sqlcommand + N''
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.ShowAllCategories = 1
		) OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL AND ups.ShowAllCategories = 1
		)
			INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
		ELSE
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL
			UNION
			SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL; ''
	END
	ELSE -- by module
	BEGIN
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleID AND PermissionsPMSource = 0)
		BEGIN
			SET @sqlcommand = @sqlcommand + N''
			IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID AND rps.ShowAllCategories = 1
			) OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @PermissionsModuleID AND ups.ShowAllCategories = 1
			)
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			ELSE
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
				WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID
				UNION
				SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @PermissionsModuleID; ''
		END
		ELSE
		BEGIN
			SET @sqlcommand = @sqlcommand + N''
			IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.ShowAllCategories = 1
			) OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL AND ups.ShowAllCategories = 1
			)
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			ELSE
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
				WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL
				UNION
				SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL ''
		END
	END
END

IF @FilterCategoryID IS NOT NULL -- filtrira se po jednoj kategoriji
BEGIN
	SET @sqlcommand = @sqlcommand + N''
	INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories WHERE CategoryID = @FilterCategoryID;
	INSERT INTO @FiltredByCategories SELECT @FilterCategoryID; ''
END
ELSE IF @CategoryFilterType = 0 -- 0 All categories
BEGIN
	SET @sqlcommand = @sqlcommand + N''
	INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories;
	INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID; ''
END
ELSE IF @CategoryFilterType = 1 -- 1 - Selection
BEGIN
	SET @sqlcommand = @sqlcommand + N''	
	INSERT INTO @UserViewCategoriesWithFilter 
	SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS mci ON mci.CategoryID = cl.CategoryID AND mci.ModuleID = @CalendarModuleID
	
	INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @CalendarModuleID; ''
END
ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
BEGIN
	SET @sqlcommand = @sqlcommand + N''
	;WITH hierarchy AS(
		SELECT [CategoryID], [ParentCategory]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
		WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @CalendarModuleID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @CalendarModuleID)) AND PortalID = @PortalID
		UNION ALL
		SELECT c.[CategoryID], c.[ParentCategory]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
	)
	INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
	INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID; ''
END

DECLARE @FilterBySocialGroup BIT;
SET @FilterBySocialGroup = 0;
DECLARE @FilterAuthorOrAuthors BIT;
SET @FilterAuthorOrAuthors = 0;

IF @IsSocialInstance = 1
	BEGIN
		IF @FilterByDNNGroupID <> 0
		BEGIN	
			SET @FilterBySocialGroup = 1;
		END
	END
ELSE
BEGIN
	IF @ShowAllAuthors = 0
	BEGIN
		SET @FilterAuthorOrAuthors = 1;
		SET @sqlcommand = @sqlcommand + N''
		DECLARE @TempAuthorsIDList TABLE (UserID INT NOT NULL PRIMARY KEY);
		INSERT INTO @TempAuthorsIDList
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @CalendarModuleID
		UNION 
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
			WHERE mgi.ModuleID = @CalendarModuleID ''
	END
END


IF @OnlyArticles = 1 AND @OnlyEvents = 0 -- only articles
BEGIN
	SET @sqlcommand = @sqlcommand + N''
	SELECT MONTH(final.PublishDate) AS [Month], YEAR(final.PublishDate) AS [Year], COUNT(*) AS [Count] FROM (
	SELECT DISTINCT na.[ArticleID],DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [PublishDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
		INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID ''
		IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand + N'' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode ''
	
	IF @FilterByDNNGroupID <> 0 
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	ELSE IF @FilterByDNNUserID <> 0
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	
	SET @sqlcommand = @sqlcommand + N''
	WHERE na.PortalID=@PortalID
		AND na.HasPermissions = 0
		AND na.EventArticle = 0
		AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] ''		
		IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand + N'' AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserID) ''
		IF @FilterByDNNUserID <> 0 SET @sqlcommand = @sqlcommand + N'' AND na.UserID = @FilterByDNNUserID ''
		ELSE IF @FilterAuthorOrAuthors = 1 SET @sqlcommand = @sqlcommand + N'' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) ''
	SET @sqlcommand = @sqlcommand + N''
	UNION ALL
	SELECT DISTINCT na.[ArticleID], DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [PublishDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
		INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID ''
		IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand + N'' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode ''
	
	IF @FilterByDNNGroupID <> 0 
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	ELSE IF @FilterByDNNUserID <> 0
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	
	SET @sqlcommand = @sqlcommand + N''
	WHERE na.PortalID=@PortalID
		AND na.HasPermissions = 1
		AND na.EventArticle = 0
		AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] ''
		IF @AdminOrSuperUser = 0
		BEGIN
			SET @sqlcommand = @sqlcommand + N'' AND aup.Show = 1 AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserID) ''
			IF @UserID = -1 SET @sqlcommand = @sqlcommand + N'' AND aup.UserID IS NULL ''
			ELSE SET @sqlcommand = @sqlcommand + N'' AND aup.UserID = @UserID ''
		END
		IF @FilterByDNNUserID <> 0 SET @sqlcommand = @sqlcommand + N'' AND na.UserID = @FilterByDNNUserID ''
		ELSE IF @FilterAuthorOrAuthors = 1 SET @sqlcommand = @sqlcommand + N'' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) ''
		
	SET @sqlcommand = @sqlcommand + N''
	UNION
	SELECT DISTINCT na.[ArticleID], DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [PublishDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
		INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID ''
	IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand + N'' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode ''
	
	IF @FilterByDNNGroupID <> 0 
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	ELSE IF @FilterByDNNUserID <> 0
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	
	SET @sqlcommand = @sqlcommand + N''
	WHERE na.PortalID=@PortalID
		AND na.HasPermissions = 1
		AND na.EventArticle = 0
		AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] ''
		IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand + N'' AND (na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)) ''
		IF @FilterByDNNUserID <> 0 SET @sqlcommand = @sqlcommand + N'' AND na.UserID = @FilterByDNNUserID ''
		ELSE IF @FilterAuthorOrAuthors = 1 SET @sqlcommand = @sqlcommand + N'' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) ''
SET @sqlcommand = @sqlcommand + N''
) AS final
GROUP BY MONTH(PublishDate), YEAR(PublishDate) ORDER BY [Year] DESC, [Month] DESC ''
END
ELSE IF @OnlyEvents = 1 AND @OnlyArticles = 0 -- only events
BEGIN
	SET @sqlcommand = @sqlcommand + N''
	SELECT MONTH(final.StartDate) AS [Month], YEAR(final.StartDate) AS [Year], COUNT(*) AS [Count] FROM (
	SELECT DISTINCT na.[ArticleID],DATEADD(hh, @DateTimeOffset, ne.[StartDate]) AS [StartDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
		INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0 ''
	IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand + N'' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode ''
	
	IF @FilterByDNNGroupID <> 0 
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	ELSE IF @FilterByDNNUserID <> 0
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	
	SET @sqlcommand = @sqlcommand + N''
	WHERE na.PortalID=@PortalID
		AND na.HasPermissions = 0
		AND na.EventArticle = 1
		AND ne.Recurring = 0
		AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate]
		AND ne.EndDate < @CurrentDate ''
		IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand + N'' AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserID) ''
		IF @FilterByDNNUserID <> 0 SET @sqlcommand = @sqlcommand + N'' AND na.UserID = @FilterByDNNUserID ''
		ELSE IF @FilterAuthorOrAuthors = 1 SET @sqlcommand = @sqlcommand + N'' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) ''
	SET @sqlcommand = @sqlcommand + N''
	UNION ALL
	SELECT DISTINCT na.[ArticleID],DATEADD(hh, @DateTimeOffset, nerd.[StartDateTime]) AS [StartDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
		INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 = CASE WHEN nerd.EndDateTime < @CurrentDate THEN 1 ELSE 0 END ''
		IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand + N'' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode ''
	
	IF @FilterByDNNGroupID <> 0 
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	ELSE IF @FilterByDNNUserID <> 0
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	
	SET @sqlcommand = @sqlcommand + N''
	WHERE na.PortalID=@PortalID
		AND na.HasPermissions = 0
		AND na.EventArticle = 1
		AND ne.Recurring = 1
		AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] ''
		IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand + N'' AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserID) ''
		IF @FilterByDNNUserID <> 0 SET @sqlcommand = @sqlcommand + N'' AND na.UserID = @FilterByDNNUserID ''
		ELSE IF @FilterAuthorOrAuthors = 1 SET @sqlcommand = @sqlcommand + N'' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) ''
		
	SET @sqlcommand = @sqlcommand + N''
	UNION ALL
	SELECT DISTINCT na.[ArticleID], DATEADD(hh, @DateTimeOffset, ne.[StartDate]) AS [StartDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
		INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0 ''
		IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand + N'' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode ''
	
	IF @FilterByDNNGroupID <> 0 
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	ELSE IF @FilterByDNNUserID <> 0
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	
	SET @sqlcommand = @sqlcommand + N''
	WHERE na.PortalID=@PortalID
		AND na.HasPermissions = 1
		AND na.EventArticle = 1
		AND ne.Recurring = 0
		AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate]
		AND ne.EndDate < @CurrentDate ''
		IF @AdminOrSuperUser = 0
		BEGIN
			SET @sqlcommand = @sqlcommand + N'' AND aup.Show = 1 AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserID) ''
			IF @UserID = -1 SET @sqlcommand = @sqlcommand + N'' AND aup.UserID IS NULL ''
			ELSE SET @sqlcommand = @sqlcommand + N'' AND aup.UserID = @UserID ''
		END
		IF @FilterByDNNUserID <> 0 SET @sqlcommand = @sqlcommand + N'' AND na.UserID = @FilterByDNNUserID ''
		ELSE IF @FilterAuthorOrAuthors = 1 SET @sqlcommand = @sqlcommand + N'' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) ''
			
	SET @sqlcommand = @sqlcommand + N''
	UNION ALL
	SELECT DISTINCT na.[ArticleID], DATEADD(hh, @DateTimeOffset, ne.[StartDate]) AS [StartDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
		INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 = CASE WHEN nerd.EndDateTime < @CurrentDate THEN 1 ELSE 0 END ''
		IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand + N'' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode ''
	
	IF @FilterByDNNGroupID <> 0 
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	ELSE IF @FilterByDNNUserID <> 0
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	
	SET @sqlcommand = @sqlcommand + N''
	WHERE na.PortalID=@PortalID
		AND na.HasPermissions = 1
		AND na.EventArticle = 1
		AND ne.Recurring = 1
		AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] ''
		IF @AdminOrSuperUser = 0
		BEGIN
			SET @sqlcommand = @sqlcommand + N'' AND aup.Show = 1 AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserID) ''
			IF @UserID = -1 SET @sqlcommand = @sqlcommand + N'' AND aup.UserID IS NULL ''
			ELSE SET @sqlcommand = @sqlcommand + N'' AND aup.UserID = @UserID ''
		END
		IF @FilterByDNNUserID <> 0 SET @sqlcommand = @sqlcommand + N'' AND na.UserID = @FilterByDNNUserID ''
		ELSE IF @FilterAuthorOrAuthors = 1 SET @sqlcommand = @sqlcommand + N'' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) ''
			
	SET @sqlcommand = @sqlcommand + N''
	UNION
	SELECT DISTINCT na.[ArticleID], DATEADD(hh, @DateTimeOffset, ne.[StartDate]) AS [StartDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
		INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0 ''
		IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand + N'' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode ''
	
	IF @FilterByDNNGroupID <> 0 
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	ELSE IF @FilterByDNNUserID <> 0
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	
	SET @sqlcommand = @sqlcommand + N''
	WHERE na.PortalID=@PortalID
		AND na.HasPermissions = 1
		AND na.EventArticle = 1
		AND ne.Recurring = 0
		AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate]
		AND ne.EndDate < @CurrentDate ''
		IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand + N'' AND (na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)) ''
		IF @FilterByDNNUserID <> 0 SET @sqlcommand = @sqlcommand + N'' AND na.UserID = @FilterByDNNUserID ''
		ELSE IF @FilterAuthorOrAuthors = 1 SET @sqlcommand = @sqlcommand + N'' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) ''

	SET @sqlcommand = @sqlcommand + N''
	UNION ALL
	SELECT DISTINCT na.[ArticleID], DATEADD(hh, @DateTimeOffset, ne.[StartDate]) AS [StartDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
		INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 = CASE WHEN nerd.EndDateTime < @CurrentDate THEN 1 ELSE 0 END ''
		IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand + N'' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode ''
	
	IF @FilterByDNNGroupID <> 0 
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	ELSE IF @FilterByDNNUserID <> 0
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	
	SET @sqlcommand = @sqlcommand + N''
	WHERE na.PortalID=@PortalID
		AND na.HasPermissions = 1
		AND na.EventArticle = 1
		AND ne.Recurring = 1
		AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] ''
		IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand + N'' AND (na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)) ''
		IF @FilterByDNNUserID <> 0 SET @sqlcommand = @sqlcommand + N'' AND na.UserID = @FilterByDNNUserID ''
		ELSE IF @FilterAuthorOrAuthors = 1 SET @sqlcommand = @sqlcommand + N'' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) ''

	SET @sqlcommand = @sqlcommand + N''
) AS final
GROUP BY MONTH(StartDate), YEAR(StartDate) ORDER BY [Year] DESC, [Month] DESC ''
END
ELSE -- articles and events
BEGIN
	SET @sqlcommand = @sqlcommand + N''
	SELECT MONTH(final.CombinedDate) AS [Month], YEAR(final.CombinedDate) AS [Year], COUNT(*) AS [Count] FROM (
	SELECT DISTINCT na.[ArticleID],DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [CombinedDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
		INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID ''
		IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand + N'' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode ''
	
	IF @FilterByDNNGroupID <> 0 
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	ELSE IF @FilterByDNNUserID <> 0
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	
	SET @sqlcommand = @sqlcommand + N''
	WHERE na.PortalID=@PortalID
		AND na.HasPermissions = 0
		AND na.EventArticle = 0
		AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] ''
		IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand + N'' AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserID) ''
		IF @FilterByDNNUserID <> 0 SET @sqlcommand = @sqlcommand + N'' AND na.UserID = @FilterByDNNUserID ''
		ELSE IF @FilterAuthorOrAuthors = 1 SET @sqlcommand = @sqlcommand + N'' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) ''
		
	SET @sqlcommand = @sqlcommand + N''
	UNION ALL
	SELECT DISTINCT na.[ArticleID], DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [CombinedDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
		INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID ''
		IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand + N'' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode ''
	
	IF @FilterByDNNGroupID <> 0 
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	ELSE IF @FilterByDNNUserID <> 0
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	
	SET @sqlcommand = @sqlcommand + N''
	WHERE na.PortalID=@PortalID
		AND na.HasPermissions = 1
		AND na.EventArticle = 0
		AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] ''
		IF @AdminOrSuperUser = 0
		BEGIN
			SET @sqlcommand = @sqlcommand + N'' AND aup.Show = 1 AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserID) ''
			IF @UserID = -1 SET @sqlcommand = @sqlcommand + N'' AND aup.UserID IS NULL ''
			ELSE SET @sqlcommand = @sqlcommand + N'' AND aup.UserID = @UserID ''
		END
		IF @FilterByDNNUserID <> 0 SET @sqlcommand = @sqlcommand + N'' AND na.UserID = @FilterByDNNUserID ''
		ELSE IF @FilterAuthorOrAuthors = 1 SET @sqlcommand = @sqlcommand + N'' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) ''
		
	SET @sqlcommand = @sqlcommand + N''
	UNION
	SELECT DISTINCT na.[ArticleID], DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [CombinedDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
		INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID ''
		IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand + N'' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode ''
	
	IF @FilterByDNNGroupID <> 0 
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	ELSE IF @FilterByDNNUserID <> 0
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	
	SET @sqlcommand = @sqlcommand + N''
	WHERE na.PortalID=@PortalID
		AND na.HasPermissions = 1
		AND na.EventArticle = 0
		AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] ''
		IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand + N'' AND (na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)) ''
		IF @FilterByDNNUserID <> 0 SET @sqlcommand = @sqlcommand + N'' AND na.UserID = @FilterByDNNUserID ''
		ELSE IF @FilterAuthorOrAuthors = 1 SET @sqlcommand = @sqlcommand + N'' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) ''

	SET @sqlcommand = @sqlcommand + N''
	UNION ALL
	SELECT DISTINCT na.[ArticleID],DATEADD(hh, @DateTimeOffset, ne.[StartDate]) AS [CombinedDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
		INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0 ''
		IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand + N'' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode ''
	
	IF @FilterByDNNGroupID <> 0 
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	ELSE IF @FilterByDNNUserID <> 0
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	
	SET @sqlcommand = @sqlcommand + N''
	WHERE na.PortalID=@PortalID
		AND na.HasPermissions = 0
		AND na.EventArticle = 1
		AND ne.Recurring = 0
		AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate]
		AND ne.EndDate < @CurrentDate ''
		IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand + N'' AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserID) ''
		IF @FilterByDNNUserID <> 0 SET @sqlcommand = @sqlcommand + N'' AND na.UserID = @FilterByDNNUserID ''
		ELSE IF @FilterAuthorOrAuthors = 1 SET @sqlcommand = @sqlcommand + N'' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) ''
		
	SET @sqlcommand = @sqlcommand + N''
	UNION ALL
	SELECT DISTINCT na.[ArticleID],DATEADD(hh, @DateTimeOffset, nerd.[StartDateTime]) AS [CombinedDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
		INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 = CASE WHEN nerd.EndDateTime < @CurrentDate THEN 1 ELSE 0 END ''
		IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand + N'' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode ''
	
	IF @FilterByDNNGroupID <> 0 
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	ELSE IF @FilterByDNNUserID <> 0
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	
	SET @sqlcommand = @sqlcommand + N''
	WHERE na.PortalID=@PortalID
		AND na.HasPermissions = 0
		AND na.EventArticle = 1
		AND ne.Recurring = 1
		AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] ''
		IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand + N'' AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserID) ''
		IF @FilterByDNNUserID <> 0 SET @sqlcommand = @sqlcommand + N'' AND na.UserID = @FilterByDNNUserID ''
		ELSE IF @FilterAuthorOrAuthors = 1 SET @sqlcommand = @sqlcommand + N'' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) ''
		
	SET @sqlcommand = @sqlcommand + N''
	UNION ALL
	SELECT DISTINCT na.[ArticleID], DATEADD(hh, @DateTimeOffset, ne.[StartDate]) AS [CombinedDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
		INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0 ''
		IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand + N'' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode ''
	
	IF @FilterByDNNGroupID <> 0 
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	ELSE IF @FilterByDNNUserID <> 0
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	
	SET @sqlcommand = @sqlcommand + N''
	WHERE na.PortalID=@PortalID
		AND na.HasPermissions = 1
		AND na.EventArticle = 1
		AND ne.Recurring = 0
		AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate]
		AND ne.EndDate < @CurrentDate ''
		IF @AdminOrSuperUser = 0
		BEGIN
			SET @sqlcommand = @sqlcommand + N'' AND aup.Show = 1 AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserID) ''
			IF @UserID = -1 SET @sqlcommand = @sqlcommand + N'' AND aup.UserID IS NULL ''
			ELSE SET @sqlcommand = @sqlcommand + N'' AND aup.UserID = @UserID ''
		END
		IF @FilterByDNNUserID <> 0 SET @sqlcommand = @sqlcommand + N'' AND na.UserID = @FilterByDNNUserID ''
		ELSE IF @FilterAuthorOrAuthors = 1 SET @sqlcommand = @sqlcommand + N'' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) ''
		
	SET @sqlcommand = @sqlcommand + N''
	UNION ALL
	SELECT DISTINCT na.[ArticleID], DATEADD(hh, @DateTimeOffset, ne.[StartDate]) AS [CombinedDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
		INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 = CASE WHEN nerd.EndDateTime < @CurrentDate THEN 1 ELSE 0 END ''
		IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand + N'' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode ''
	
	IF @FilterByDNNGroupID <> 0 
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	ELSE IF @FilterByDNNUserID <> 0
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	
	SET @sqlcommand = @sqlcommand + N''
	WHERE na.PortalID=@PortalID
		AND na.HasPermissions = 1
		AND na.EventArticle = 1
		AND ne.Recurring = 1
		AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] ''
		IF @AdminOrSuperUser = 0
		BEGIN
			SET @sqlcommand = @sqlcommand + N'' AND aup.Show = 1 AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserID) ''
			IF @UserID = -1 SET @sqlcommand = @sqlcommand + N'' AND aup.UserID IS NULL ''
			ELSE SET @sqlcommand = @sqlcommand + N'' AND aup.UserID = @UserID ''
		END
		IF @FilterByDNNUserID <> 0 SET @sqlcommand = @sqlcommand + N'' AND na.UserID = @FilterByDNNUserID ''
		ELSE IF @FilterAuthorOrAuthors = 1 SET @sqlcommand = @sqlcommand + N'' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) ''
		
	SET @sqlcommand = @sqlcommand + N''
	UNION
	SELECT DISTINCT na.[ArticleID], DATEADD(hh, @DateTimeOffset, ne.[StartDate]) AS [CombinedDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
		INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0 ''
		IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand + N'' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode ''
	
	IF @FilterByDNNGroupID <> 0 
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	ELSE IF @FilterByDNNUserID <> 0
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	
	SET @sqlcommand = @sqlcommand + N''
	WHERE na.PortalID=@PortalID
		AND na.HasPermissions = 1
		AND na.EventArticle = 1
		AND ne.Recurring = 0
		AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate]
		AND ne.EndDate < @CurrentDate ''
		IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand + N'' AND (na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)) ''
		IF @FilterByDNNUserID <> 0 SET @sqlcommand = @sqlcommand + N'' AND na.UserID = @FilterByDNNUserID ''
		ELSE IF @FilterAuthorOrAuthors = 1 SET @sqlcommand = @sqlcommand + N'' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) ''

	SET @sqlcommand = @sqlcommand + N''
	UNION ALL
	SELECT DISTINCT na.[ArticleID], DATEADD(hh, @DateTimeOffset, ne.[StartDate]) AS [CombinedDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
		INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 = CASE WHEN nerd.EndDateTime < @CurrentDate THEN 1 ELSE 0 END ''
		IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand + N'' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode ''
	
	IF @FilterByDNNGroupID <> 0 
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	ELSE IF @FilterByDNNUserID <> 0
		SET @sqlcommand = @sqlcommand + N''
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey ''
	
	SET @sqlcommand = @sqlcommand + N''
	WHERE na.PortalID=@PortalID
		AND na.HasPermissions = 1
		AND na.EventArticle = 1
		AND ne.Recurring = 1
		AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] ''
		IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand + N'' AND (na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)) ''
		IF @FilterByDNNUserID <> 0 SET @sqlcommand = @sqlcommand + N'' AND na.UserID = @FilterByDNNUserID ''
		ELSE IF @FilterAuthorOrAuthors = 1 SET @sqlcommand = @sqlcommand + N'' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) ''

	SET @sqlcommand = @sqlcommand + N''
) AS final
GROUP BY MONTH(CombinedDate), YEAR(CombinedDate) ORDER BY [Year] DESC, [Month] DESC ''
END

EXEC sp_executesql @statement = @sqlcommand
	,@paramList = @paramList
	,@PortalID = @PortalID
	,@UserID = @UserID
	,@CalendarModuleID = @CalendarModuleID
	,@LocaleCode = @LocaleCode
	,@FilterByDNNUserID = @FilterByDNNUserID
	,@FilterByDNNGroupID = @FilterByDNNGroupID
	,@PermissionsModuleID = @PermissionsModuleID
	,@DateTimeOffset = @DateTimeOffset
	,@FilterCategoryID = @FilterCategoryID
' 
END
GO

/**** Media localization *****/

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = '{objectQualifier}EasyDNNMediaLocalization' AND column_name = 'Title')
BEGIN
 ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNMediaLocalization] ALTER COLUMN Title nvarchar(250);
END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = '{objectQualifier}EasyDNNMediaLocalization' AND column_name = 'Description')
BEGIN
 ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNMediaLocalization] ALTER COLUMN Description nvarchar(MAX);
END
GO
/**** Media localization *****/

/**** Easy gallery Pictures *****/
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = '{objectQualifier}EasyGalleryPictures' AND column_name = 'Description')
BEGIN
 ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryPictures] ALTER COLUMN Description nvarchar(MAX);
END
GO
IF NOT EXISTS (SELECT * from INFORMATION_SCHEMA.columns WHERE table_name = '{objectQualifier}EasyGalleryPictures' AND column_name = 'FileSize')
BEGIN
 ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryPictures] ADD FileSize BIGINT CONSTRAINT DF_{objectQualifier}EasyGalleryPictures_FileSize DEFAULT (0) NOT NULL
END
GO
IF NOT EXISTS (SELECT * from INFORMATION_SCHEMA.columns WHERE table_name = '{objectQualifier}EasyGalleryPictures' AND column_name = 'ExifData')
BEGIN
 ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryPictures] ADD ExifData nvarchar(MAX)
END
GO
IF NOT EXISTS (SELECT * from INFORMATION_SCHEMA.columns WHERE table_name = '{objectQualifier}EasyGalleryPictures' AND column_name = 'GPSLatitude')
BEGIN
 ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryPictures] ADD GPSLatitude float
END
GO
IF NOT EXISTS (SELECT * from INFORMATION_SCHEMA.columns WHERE table_name = '{objectQualifier}EasyGalleryPictures' AND column_name = 'GPSLongitude')
BEGIN
 ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryPictures] ADD GPSLongitude float
END
GO
IF NOT EXISTS (SELECT * from INFORMATION_SCHEMA.columns WHERE table_name = '{objectQualifier}EasyGalleryPictures' AND column_name = 'VideoDuration')
BEGIN
 ALTER TABLE {databaseOwner}[{objectQualifier}EasyGalleryPictures] ADD VideoDuration int Null
END
GO
/**** Easy gallery Pictures *****/

/**** EasyDNNNewsChameleonSettings *****/
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsChameleonSettings' and column_name = 'ShowLinkToGravityGallery')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsChameleonSettings] ADD ShowLinkToGravityGallery BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsChameleonSettings_ShowLinkToGravityGallery DEFAULT(0) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsChameleonSettings' and column_name = 'GravityModuleTabId')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsChameleonSettings] ADD GravityModuleTabId INT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsChameleonSettings' and column_name = 'GravityModuleModuleId')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsChameleonSettings] ADD GravityModuleModuleId INT NULL
END
GO
/**** EasyDNNNewsChameleonSettings *****/

/**** EasyDNNNewsChameleonNestedSettings *****/
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsChameleonNestedSettings' and column_name = 'ShowLinkToGravityGallery')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsChameleonNestedSettings] ADD ShowLinkToGravityGallery BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsChameleonNestedSettings_ShowLinkToGravityGallery DEFAULT(0) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsChameleonNestedSettings' and column_name = 'GravityModuleTabId')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsChameleonNestedSettings] ADD GravityModuleTabId INT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsChameleonNestedSettings' and column_name = 'GravityModuleModuleId')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsChameleonNestedSettings] ADD GravityModuleModuleId INT NULL
END
GO
/**** EasyDNNNewsChameleonNestedSettings *****/

/****** Object:  Table {databaseOwner}[{objectQualifier}EasyDNNNewsGravityGallerySettings]******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGravityGallerySettings]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsGravityGallerySettings](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NOT NULL,
	[ModuleID] [int] NULL,
	[ArticleID] [int] NULL,
	[GalleryLightbox] [tinyint] NOT NULL,
	[ThumbnailResizeMethod] [tinyint] NOT NULL,
	[Template] [nvarchar](250) NOT NULL,
	[ThumbnailWidth] [int] NOT NULL,
	[ThumbnailHeight] [int] NOT NULL,
	[ItemsPerPage] [int] NOT NULL,
	[DisplayTitle] [bit] NOT NULL,
	[DisplayDescription] [bit] NOT NULL,
	[DisplayTitleInLightbox] [bit] NOT NULL,
	[EnablePagination] [bit] NOT NULL,
	[DisplayDescriptionInLightbox] [bit] NOT NULL,
	[ShowLinkToGravityGallery] [bit] NOT NULL,
	[GravityModuleTabId] [int] NULL,
	[GravityModuleModuleId] [int] NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNNewsGravityGallerySettings] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsGravityGallerySettings_EasyDNNNews]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGravityGallerySettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsGravityGallerySettings]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsGravityGallerySettings_EasyDNNNews] FOREIGN KEY([ArticleID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNews] ([ArticleID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsGravityGallerySettings_EasyDNNNews]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGravityGallerySettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsGravityGallerySettings] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsGravityGallerySettings_EasyDNNNews]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsGravityGallerySettings_Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGravityGallerySettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsGravityGallerySettings]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsGravityGallerySettings_Modules] FOREIGN KEY([ModuleID])
REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsGravityGallerySettings_Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGravityGallerySettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsGravityGallerySettings] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsGravityGallerySettings_Modules]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsGravityGallerySettings_Portals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGravityGallerySettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsGravityGallerySettings]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsGravityGallerySettings_Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsGravityGallerySettings_Portals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGravityGallerySettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsGravityGallerySettings] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsGravityGallerySettings_Portals]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCosts]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCosts](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ArticleID] [int] NULL,
	[Name] [nvarchar](256) NOT NULL,
	[Value] [money] NOT NULL,
	[Position] [tinyint] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNNewsEventsPaymentCosts] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization](
	[CostId] [int] NOT NULL,
	[LocaleCode] [nvarchar](20) NOT NULL,
	[Name] [nvarchar](256) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization] PRIMARY KEY CLUSTERED 
(
	[CostId] ASC,
	[LocaleCode] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
IF NOT EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNNewsEventsPaymentCosts_Name_Length]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCosts]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCosts]  WITH CHECK ADD  CONSTRAINT [CK_{objectQualifier}EasyDNNNewsEventsPaymentCosts_Name_Length] CHECK  ((datalength([Name])>(0)))
GO
IF  EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNNewsEventsPaymentCosts_Name_Length]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCosts]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCosts] CHECK CONSTRAINT [CK_{objectQualifier}EasyDNNNewsEventsPaymentCosts_Name_Length]
GO
IF NOT EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization_LocaleCode_Length]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization]  WITH CHECK ADD  CONSTRAINT [CK_{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization_LocaleCode_Length] CHECK  ((datalength([LocaleCode])>(0)))
GO
IF  EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization_LocaleCode_Length]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization] CHECK CONSTRAINT [CK_{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization_LocaleCode_Length]
GO
IF NOT EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization_Name_Length]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization]  WITH CHECK ADD  CONSTRAINT [CK_{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization_Name_Length] CHECK  ((datalength([Name])>(0)))
GO
IF  EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization_Name_Length]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization] CHECK CONSTRAINT [CK_{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization_Name_Length]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsPaymentCosts_EasyDNNNews]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCosts]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCosts]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsPaymentCosts_EasyDNNNews] FOREIGN KEY([ArticleID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNews] ([ArticleID])
ON DELETE SET NULL
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsPaymentCosts_EasyDNNNews]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCosts]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCosts] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsPaymentCosts_EasyDNNNews]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization_EasyDNNNewsEventsPaymentCosts]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization_EasyDNNNewsEventsPaymentCosts] FOREIGN KEY([CostId])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCosts] ([Id])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization_EasyDNNNewsEventsPaymentCosts]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsPaymentCostsLocalization_EasyDNNNewsEventsPaymentCosts]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForArticleEditor]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForArticleEditor]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForArticleEditor]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForArticleEditor]
	@PortalID INT, -- current Portal
	@ModuleID INT, -- current Module, portal sharing isto sadrzi dobre kategorije, auto add i setingsi su snimljeni kod tog modula
	@UserID INT,
	@ItemsFrom INT = 1,
	@ItemsTo INT = 5,
	@OnlyOneCategory INT = 0, -- used for category menu or when need to filter by one category
	@FilterByAuthor INT = 0, -- ako se selektiran jedan autor
	@FilterByGroupID INT = 0, -- ako je selektirana grupa
	@EditOnlyAsOwner BIT = 0, -- news settings
	@UserCanApprove BIT = 0, -- news settings
	@Perm_ViewAllCategores BIT = 0, -- permission settings View all categories
	@Perm_EditAllCategores BIT = 0, -- permission settings Edit all categories
	@AdminOrSuperUser BIT = 0,
	@PermissionSettingsSource BIT = 1, -- 1 portal, 0 module
	@OrderBy NVARCHAR(20) = ''PublishDate DESC'',
	@OrderBy2 NVARCHAR(20) = '''',
	
	@Featured TINYINT = 0,
	@Published TINYINT = 0,
	@Approved TINYINT = 0,
	@ArticleType TINYINT = 0,
	@PermissionsByArticle TINYINT = 0	
AS
SET NOCOUNT ON;
DECLARE @EditPermission TINYINT;
SET @EditPermission = 0;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();
DECLARE @UserInRoles TABLE (RoleID INT NOT NULL PRIMARY KEY);
INSERT INTO @UserInRoles SELECT DISTINCT r.[RoleID] FROM {databaseOwner}[{objectQualifier}Roles] AS r INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID WHERE ur.UserID = @UserID AND r.PortalID = @PortalID AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate) AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate);
DECLARE @UserEditCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can edit based on permissions

DECLARE @FilterAuthorOrAuthors BIT;
SET @FilterAuthorOrAuthors = 0;
DECLARE @TempAuthorsIDList TABLE (UserID INT NOT NULL PRIMARY KEY);
IF @FilterByAuthor <> 0
BEGIN
	SET @FilterAuthorOrAuthors = 1;
	INSERT INTO @TempAuthorsIDList SELECT @FilterByAuthor;
END
ELSE IF @FilterByGroupID <> 0
BEGIN
	SET @FilterAuthorOrAuthors = 1;
	INSERT INTO @TempAuthorsIDList
	SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID	
		WHERE agi.GroupID = @FilterByGroupID
END

-- kategorije sa edit pravima
IF @AdminOrSuperUser = 1 OR @Perm_EditAllCategores = 1
BEGIN	
	INSERT INTO @UserEditCategories SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
	SET @EditPermission = 1;
END
ELSE
BEGIN
	IF @UserID = -1
	BEGIN
		IF @PermissionSettingsSource = 1 -- by portal
		BEGIN
			INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
		END
		ELSE -- by module
		BEGIN
			INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			WHERE rps.RoleID IS NULL AND rps.PortalID = @PortalID AND rps.ModuleID = @ModuleID;
		END
	END
	ELSE -- registrirani korisnik
	BEGIN
		IF @PermissionSettingsSource = 1 -- by portal
		BEGIN
			INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL GROUP BY rpatc.[CategoryID]
			UNION
			SELECT upatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsAddToCategories] AS upatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upatc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL GROUP BY upatc.[CategoryID];
		END
		ELSE -- by module
		BEGIN
			INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID = @ModuleID GROUP BY rpatc.[CategoryID]
			UNION
			SELECT upatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsAddToCategories] AS upatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upatc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @ModuleID GROUP BY upatc.[CategoryID];
		END	
	END
	IF EXISTS(SELECT TOP (1) * FROM @UserEditCategories) BEGIN SET @EditPermission = 2; END
END

IF @OnlyOneCategory <> 0 -- filtrira se po jednoj kategoriji
BEGIN
	 DELETE uec FROM @UserEditCategories AS uec WHERE uec.CategoryID NOT IN (SELECT @OnlyOneCategory);
END

SELECT AllNewsItems.[ArticleID]
	,AllNewsItems.[UserID]
	,AllNewsItems.[Title]
	,AllNewsItems.[ArticleImage]
	,AllNewsItems.[DateAdded]
	,AllNewsItems.[LastModified]
	,AllNewsItems.[PublishDate]
	,AllNewsItems.[ExpireDate]
	,AllNewsItems.[NumberOfViews]
	,AllNewsItems.[RatingValue]
	,AllNewsItems.[RatingCount]
	,AllNewsItems.[TitleLink]
	,AllNewsItems.[DetailType]
	,AllNewsItems.[DetailTypeData]
	,AllNewsItems.[ArticleImageFolder]
	,AllNewsItems.[NumberOfComments]
	,AllNewsItems.[DetailTarget]
	,AllNewsItems.[HasPermissions]
	,AllNewsItems.[EventArticle]
	,AllNewsItems.[DetailMediaType]
	,AllNewsItems.[DetailMediaData]
	,AllNewsItems.[Featured]
	,AllNewsItems.[Approved]
	,AllNewsItems.[AllowComments]
	,AllNewsItems.[Active]
	,AllNewsItems.[ArticleImageSet]
	,AllNewsItems.[CFGroupeID]
	,AllNewsItems.[EventStartDate],
	CASE WHEN u.DisplayName IS NULL THEN ''Anonym'' ELSE u.DisplayName END AS DisplayName,
	CASE @EditPermission 
		WHEN 0 THEN 0
		WHEN 1 THEN 1
		WHEN 2 THEN
		CASE @EditOnlyAsOwner
			WHEN 0 THEN			
				CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE c.ArticleID = AllNewsItems.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
					THEN 1
					ELSE
						CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = AllNewsItems.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
						THEN 1
						ELSE
							CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = AllNewsItems.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
								THEN 1
								ELSE 0
							END
						END
				END  			
			WHEN 1 THEN
				CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE AllNewsItems.UserID = @UserID AND c.ArticleID = AllNewsItems.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
					THEN 1
					ELSE
						CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = AllNewsItems.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
						THEN 1
						ELSE
							CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = AllNewsItems.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
								THEN 1
								ELSE 0
							END
						END 
				END
		END
		WHEN 3 THEN
			CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = AllNewsItems.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
				THEN 1
				ELSE
				CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = AllNewsItems.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
					THEN 1
					ELSE 0
					END
				END 
	END AS CanEdit,
	 CASE AllNewsItems.Active
		WHEN 1 THEN 0
		WHEN 0 THEN 1
	 END AS Published,
	 CASE @UserCanApprove
		WHEN 0 THEN 0
		WHEN 1 THEN
			CASE AllNewsItems.Approved
			 WHEN 1 THEN 0
			 WHEN 0 THEN
				 CASE AllNewsItems.Active
					WHEN 1 THEN 1
					WHEN 0 THEN 0
				END
			END
	 END AS Approve,
	 CASE WHEN AllNewsItems.EventArticle = 1 AND EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = AllNewsItems.ArticleID)
	   THEN 1 ELSE 0 END
	 AS IsRecurring,
	 (CASE WHEN AllNewsItems.EventType IS NULL THEN 0 ELSE 1 END) AS RegistrationEnabled,
	 (CASE WHEN AllNewsItems.InnerPaymentEnabled IS NULL THEN 0 ELSE AllNewsItems.InnerPaymentEnabled END) AS PaymentEnabled	 
	FROM (	
		SELECT n.[ArticleID]
			,n.[UserID]
			,n.[Title]
			,n.[ArticleImage]
			,n.[DateAdded]
			,n.[LastModified]
			,n.[PublishDate]
			,n.[ExpireDate]
			,n.[NumberOfViews]
			,n.[RatingValue]
			,n.[RatingCount]
			,n.[TitleLink]
			,n.[DetailType]
			,n.[DetailTypeData]
			,n.[ArticleImageFolder]
			,n.[NumberOfComments]
			,n.[DetailTarget]
			,n.[HasPermissions]
			,n.[EventArticle]
			,n.[DetailMediaType]
			,n.[DetailMediaData]
			,n.[Featured]
			,n.[Approved]
			,n.[AllowComments]
			,n.[Active]
			,n.[ArticleImageSet]
			,n.[CFGroupeID]
			,ed.StartDate AS EventStartDate, ed.EventType, ed.PaymentEnabled AS InnerPaymentEnabled, ROW_NUMBER() OVER (ORDER BY 
				CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
				CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
				CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
				CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
				CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
				CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
				CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
				CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
				CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
				CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
				CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
				CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
				CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
				CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
				CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
				CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC,

				CASE WHEN @OrderBy2 =''PublishDate ASC'' THEN PublishDate END,
				CASE WHEN @OrderBy2 =''PublishDate DESC'' THEN PublishDate END DESC,
				CASE WHEN @OrderBy2 =''NumberOfViews ASC'' THEN NumberOfViews END,
				CASE WHEN @OrderBy2 =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
				CASE WHEN @OrderBy2 =''RatingValue ASC'' THEN RatingValue END,
				CASE WHEN @OrderBy2 =''RatingValue DESC'' THEN RatingValue END DESC,
				CASE WHEN @OrderBy2 =''DateAdded ASC'' THEN DateAdded END,
				CASE WHEN @OrderBy2 =''DateAdded DESC'' THEN DateAdded END DESC,
				CASE WHEN @OrderBy2 =''ExpireDate ASC'' THEN ExpireDate END,
				CASE WHEN @OrderBy2 =''ExpireDate DESC'' THEN ExpireDate END DESC,
				CASE WHEN @OrderBy2 =''LastModified ASC'' THEN LastModified END,
				CASE WHEN @OrderBy2 =''LastModified DESC'' THEN LastModified END DESC,
				CASE WHEN @OrderBy2 =''NumberOfComments ASC'' THEN NumberOfComments END,
				CASE WHEN @OrderBy2 =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
				CASE WHEN @OrderBy2 =''Title ASC'' THEN Title END,
				CASE WHEN @OrderBy2 =''Title DESC'' THEN Title END DESC) AS Kulike
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ed ON ed.ArticleID = n.ArticleID
		WHERE n.ArticleID IN(
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM @UserEditCategories)
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND ((@Approved = 0) OR ((@Approved = 1 AND na.Approved = 1) OR (@Approved = 2 AND na.Approved = 0)))		   
				AND ((@ArticleType = 0) OR ((@ArticleType = 1 AND na.EventArticle = 0) OR (@ArticleType = 2 AND na.EventArticle = 1)))
				AND ((@PermissionsByArticle = 0) OR ((@PermissionsByArticle = 1 AND na.HasPermissions = 1) OR (@PermissionsByArticle = 2 AND na.HasPermissions = 0)))		   
				AND ((@Published = 0) OR ((@Published = 1 AND na.Active = 1) OR (@Published = 2 AND na.Active = 0)))
				AND ((@Featured = 0) OR ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 2 AND na.Featured = 0)))
				AND ((@FilterAuthorOrAuthors = 0) OR (@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)))
			UNION ALL
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND ((@EditPermission = 1) OR ((aup.Edit = 1) AND ((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))))
				AND ((@Approved = 0) OR ((@Approved = 1 AND na.Approved = 1) OR (@Approved = 2 AND na.Approved = 0)))
				AND ((@ArticleType = 0) OR ((@ArticleType = 1 AND na.EventArticle = 0) OR (@ArticleType = 2 AND na.EventArticle = 1)))
				AND ((@PermissionsByArticle = 0) OR ((@PermissionsByArticle = 1 AND na.HasPermissions = 1) OR (@PermissionsByArticle = 2 AND na.HasPermissions = 0)))
				AND ((@Published = 0) OR ((@Published = 1 AND na.Active = 1) OR (@Published = 2 AND na.Active = 0)))
				AND ((@Featured = 0) OR ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 2 AND na.Featured = 0)))
				AND ((@FilterAuthorOrAuthors = 0) OR (@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)))
				AND ((@OnlyOneCategory <> 0 AND cat.CategoryID IN (SELECT @OnlyOneCategory)) OR (@OnlyOneCategory = 0))
			UNION
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND ((@EditPermission = 1) OR ((arp.Edit = 1) AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
				AND ((@Approved = 0) OR ((@Approved = 1 AND na.Approved = 1) OR (@Approved = 2 AND na.Approved = 0)))
				AND ((@ArticleType = 0) OR ((@ArticleType = 1 AND na.EventArticle = 0) OR (@ArticleType = 2 AND na.EventArticle = 1)))
				AND ((@PermissionsByArticle = 0) OR ((@PermissionsByArticle = 1 AND na.HasPermissions = 1) OR (@PermissionsByArticle = 2 AND na.HasPermissions = 0)))
				AND ((@Published = 0) OR ((@Published = 1 AND na.Active = 1) OR (@Published = 2 AND na.Active = 0)))
				AND ((@Featured = 0) OR ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 2 AND na.Featured = 0)))
				AND ((@FilterAuthorOrAuthors = 0) OR (@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)))
				AND ((@OnlyOneCategory <> 0 AND cat.CategoryID IN (SELECT @OnlyOneCategory)) OR (@OnlyOneCategory = 0))
		)
	 ) AS AllNewsItems
	 LEFT OUTER JOIN {databaseOwner}[{objectQualifier}Users] AS u ON AllNewsItems.UserID = u.UserID
	 WHERE Kulike BETWEEN @ItemsFrom AND @ItemsTo ORDER BY
		 CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
		 CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
		 CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
		 CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
		 CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
		 CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
		 CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
		 CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
		 CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
		 CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
		 CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
		 CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
		 CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
		 CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
		 CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
		 CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC,
		 CASE WHEN @OrderBy2 =''PublishDate ASC'' THEN PublishDate END,
		 CASE WHEN @OrderBy2 =''PublishDate DESC'' THEN PublishDate END DESC,
		 CASE WHEN @OrderBy2 =''NumberOfViews ASC'' THEN NumberOfViews END,
		 CASE WHEN @OrderBy2 =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
		 CASE WHEN @OrderBy2 =''RatingValue ASC'' THEN RatingValue END,
		 CASE WHEN @OrderBy2 =''RatingValue DESC'' THEN RatingValue END DESC,
		 CASE WHEN @OrderBy2 =''DateAdded ASC'' THEN DateAdded END,
		 CASE WHEN @OrderBy2 =''DateAdded DESC'' THEN DateAdded END DESC,
		 CASE WHEN @OrderBy2 =''ExpireDate ASC'' THEN ExpireDate END,
		 CASE WHEN @OrderBy2 =''ExpireDate DESC'' THEN ExpireDate END DESC,
		 CASE WHEN @OrderBy2 =''LastModified ASC'' THEN LastModified END,
		 CASE WHEN @OrderBy2 =''LastModified DESC'' THEN LastModified END DESC,
		 CASE WHEN @OrderBy2 =''NumberOfComments ASC'' THEN NumberOfComments END,
		 CASE WHEN @OrderBy2 =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
		 CASE WHEN @OrderBy2 =''Title ASC'' THEN Title END,
		 CASE WHEN @OrderBy2 =''Title DESC'' THEN Title END DESC;' 
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsEventEditSignUp]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsEventEditSignUp]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsEventViewSignUp]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsEventViewSignUp]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsEventViewSignUp]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsEventViewSignUp]
	@News_ModuleID INT,
	@PortalID INT,
	@UserID INT,
	@ArticleID INT,
	@RecurringID INT = NULL,
	@IsAdminOrSuperUser BIT = 0
AS 
SET NOCOUNT ON;

DECLARE @IsRegistrationEnabled BIT; -- if article still alows registration
SET @IsRegistrationEnabled = 0;

DECLARE @ShowRegistredUsersRoleID INT;
DECLARE @ShowRegistredUsersTo TINYINT;

DECLARE @HasRegistrationRights BIT;
SET @HasRegistrationRights = 0;

DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();

DECLARE @CanViewArticle BIT;
SET @CanViewArticle = 0;

DECLARE @EventExists BIT;
SET @EventExists = 1;

IF @RecurringID IS NULL
BEGIN
	IF NOT EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] WHERE ArticleID = @ArticleID AND EventType = 1)
		SET @EventExists = 0;
	ELSE IF EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] WHERE ArticleID = @ArticleID AND EventType = 1 AND Recurring = 1)
		SET @EventExists = 0;
END
ELSE
BEGIN
	IF NOT EXISTS(
		SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ed
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd ON ed.ArticleID = erd.ArticleID AND erd.RecurringID = @RecurringID
		WHERE ed.ArticleID = @ArticleID AND ed.EventType = 1
	)
		SET @EventExists = 0;
END

IF @EventExists = 1
BEGIN

	DECLARE @SharingPortalID INT;
	DECLARE @PermissionsByPortal BIT;
	DECLARE @UserViewCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY);
	
	DECLARE @HasArticlePermissions BIT;
	SET @HasArticlePermissions = (SELECT HasPermissions FROM {databaseOwner}[{objectQualifier}EasyDNNNews] WHERE ArticleID = @ArticleID);

	IF @IsAdminOrSuperUser = 1
	BEGIN
		SET @CanViewArticle = 1;
		SET @HasRegistrationRights = 1;
	END
	ELSE IF @UserID = -1
	BEGIN
		IF @HasArticlePermissions = 1
		BEGIN
			
			IF EXISTS (SELECT n.ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n 
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON n.ArticleID = aup.ArticleID
						WHERE aup.ArticleID = @ArticleID
							AND n.HasPermissions = 1
							AND aup.UserID IS NULL
							AND aup.Show = 1
							AND (n.Approved = 1)
							AND (n.UserID = @UserID OR (n.Active = 1 AND @CurrentDate BETWEEN n.[PublishDate] AND n.[ExpireDate]))
						)
			SET @CanViewArticle = 1;	
					
		END
		ELSE
		BEGIN

			SELECT @PermissionsByPortal = [PermissionsPMSource], @SharingPortalID = [SharingPortalID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @News_ModuleID;

			IF @PermissionsByPortal = 1 -- po portalu
			BEGIN

				IF EXISTS(
					SELECT [ShowAllCategories] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					WHERE rps.[ShowAllCategories] = 1 AND rps.ModuleID IS NULL AND rps.PortalID = @PortalID AND rps.RoleID IS NULL
				)
					INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
				ELSE
				BEGIN
					INSERT INTO @UserViewCategories
					SELECT DISTINCT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
				END
				
				IF EXISTS (SELECT n.ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserViewCategories)
				WHERE n.ArticleID=@ArticleID
					AND n.HasPermissions = 0
					AND n.Approved = 1
					AND n.Active = 1
					AND @CurrentDate BETWEEN n.[PublishDate] AND n.[ExpireDate]
				)
					SET @CanViewArticle = 1;	
			END
			ELSE
			BEGIN

				IF EXISTS(
					SELECT [ShowAllCategories] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					WHERE rps.[ShowAllCategories] = 1 AND rps.ModuleID = @News_ModuleID AND rps.PortalID = @PortalID AND rps.RoleID IS NULL
				)
				BEGIN
					IF @SharingPortalID IS NULL
						INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
					ELSE
						INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @SharingPortalID;
				END
				ELSE
				BEGIN
					INSERT INTO @UserViewCategories
					SELECT DISTINCT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID = @News_ModuleID AND rps.RoleID IS NULL;
				END

				IF EXISTS (SELECT n.ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserViewCategories)
				WHERE n.ArticleID=@ArticleID
					AND n.HasPermissions = 0
					AND n.Approved = 1
					AND n.Active = 1
					AND @CurrentDate BETWEEN n.[PublishDate] AND n.[ExpireDate]
				)
					SET @CanViewArticle = 1;
			END
			
		END
	END
	ELSE
	BEGIN

		DECLARE @UserInRoles TABLE (RoleID INT NOT NULL PRIMARY KEY);
		INSERT INTO @UserInRoles SELECT DISTINCT r.[RoleID] FROM {databaseOwner}[{objectQualifier}Roles] AS r INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID WHERE ur.UserID = @UserID AND r.PortalID = @PortalID AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate) AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate);
		
		IF @HasArticlePermissions = 1
		BEGIN
			
			IF EXISTS (SELECT n.ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n 
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON n.ArticleID = aup.ArticleID
						WHERE aup.ArticleID = @ArticleID
							AND n.HasPermissions = 1
							AND aup.UserID = @UserID
							AND aup.Show = 1
							AND n.Approved = 1
							AND (n.UserID = @UserID OR (n.Active = 1 AND @CurrentDate BETWEEN n.[PublishDate] AND n.[ExpireDate]))
						)
				OR EXISTS (SELECT n.ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n 
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON n.ArticleID = arp.ArticleID
						WHERE arp.ArticleID = @ArticleID
							AND n.HasPermissions = 1
							AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
							AND arp.Show = 1
							AND n.Approved = 1
							AND (n.UserID = @UserID OR (n.Active = 1 AND @CurrentDate BETWEEN n.[PublishDate] AND n.[ExpireDate]))
						)
			BEGIN
				SET @CanViewArticle = 1;	
				
				IF EXISTS(
					SELECT [EventRegistration] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = @ArticleID AND aup.UserID = @UserID AND aup.EventRegistration = 1
				) OR EXISTS(
					SELECT [EventRegistration] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
					WHERE arp.ArticleID = @ArticleID AND arp.EventRegistration = 1 AND arp.RoleID IN(SELECT [RoleID] FROM @UserInRoles)
				)
				SET @HasRegistrationRights = 1;
			END
			
		END
		ELSE
		BEGIN
		
			SELECT @PermissionsByPortal = [PermissionsPMSource], @SharingPortalID = [SharingPortalID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @News_ModuleID;
						
			IF @PermissionsByPortal = 1 -- po portalu
			BEGIN

				IF EXISTS(
					SELECT [ShowAllCategories] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					WHERE rps.[ShowAllCategories] = 1 AND rps.ModuleID IS NULL AND rps.PortalID = @PortalID AND rps.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				) OR EXISTS(
					SELECT [ShowAllCategories] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
					WHERE ups.[ShowAllCategories] = 1 AND ups.UserID = @UserID AND ups.ModuleID IS NULL AND ups.PortalID = @PortalID
				)
					INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
				ELSE
				BEGIN
					INSERT INTO @UserViewCategories
					SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
					INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL
					UNION
					SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
					WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL;
				END
				
				IF EXISTS (SELECT n.ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserViewCategories)
				WHERE n.ArticleID=@ArticleID
					AND n.HasPermissions = 0
					AND n.Approved = 1
					AND (n.UserID = @UserID OR (n.Active = 1 AND @CurrentDate BETWEEN n.[PublishDate] AND n.[ExpireDate]))
				)
				BEGIN
					SET @CanViewArticle = 1;
				
					IF EXISTS(
						SELECT [EventRegistration] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
						WHERE rps.[EventRegistration] = 1 AND rps.ModuleID IS NULL AND rps.PortalID = @PortalID AND rps.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
					) OR EXISTS(
						SELECT [EventRegistration] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
						WHERE ups.[EventRegistration] = 1 AND ups.UserID = @UserID AND ups.ModuleID IS NULL AND ups.PortalID = @PortalID
					)	
					SET @HasRegistrationRights = 1;	
				END			
			END
			ELSE
			BEGIN
				
				IF EXISTS(
					SELECT [ShowAllCategories] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					WHERE rps.[ShowAllCategories] = 1 AND rps.ModuleID = @News_ModuleID AND rps.PortalID = @PortalID AND rps.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				) OR EXISTS(
					SELECT [ShowAllCategories] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
					WHERE ups.[ShowAllCategories] = 1 AND ups.UserID = @UserID AND ups.ModuleID = @News_ModuleID AND ups.PortalID = @PortalID 
				)
				BEGIN
					IF @SharingPortalID IS NULL
						INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
					ELSE
						INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @SharingPortalID;
				END
				ELSE
				BEGIN
					INSERT INTO @UserViewCategories
					SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
					INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID = @News_ModuleID
					UNION
					SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
					WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @News_ModuleID;
				END
				
				IF EXISTS (SELECT n.ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserViewCategories)
				WHERE n.ArticleID=@ArticleID
					AND n.HasPermissions = 0
					AND n.Approved = 1
					AND (n.UserID = @UserID OR (n.Active = 1 AND @CurrentDate BETWEEN n.[PublishDate] AND n.[ExpireDate]))
				)
				BEGIN
					SET @CanViewArticle = 1;
				
					IF EXISTS(
						SELECT [EventRegistration] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
						WHERE rps.[EventRegistration] = 1 AND rps.ModuleID = @News_ModuleID AND rps.PortalID = @PortalID AND rps.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
					) OR EXISTS(
						SELECT [EventRegistration] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
						WHERE ups.[EventRegistration] = 1 AND ups.UserID = @UserID AND ups.ModuleID = @News_ModuleID AND ups.PortalID = @PortalID
					)
					SET @HasRegistrationRights = 1;		
				END
			END
			
		END
	END
		
	IF @CanViewArticle = 1
	BEGIN

		DECLARE @DisableFurtherRegistration BIT;
		DECLARE @EnableDaysBeforeStartDate INT;
		DECLARE @DisableDaysBeforeStartDate INT;
		DECLARE @StartDate DATETIME;
		DECLARE @EndDate DATETIME;
		
		IF @RecurringID IS NULL
			SELECT @StartDate = [StartDate]
				  ,@EndDate = [EndDate]
				  ,@EnableDaysBeforeStartDate = [EnableDaysBeforeStartDate]
				  ,@DisableDaysBeforeStartDate = [DisableDaysBeforeStartDate]
				  ,@ShowRegistredUsersRoleID = [ShowRegistredUsersRole]
				  ,@ShowRegistredUsersTo = [ShowRegistredUsersTo]
				  ,@DisableFurtherRegistration = [DisableFurtherRegistration]
			 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] WHERE ArticleID = @ArticleID
		 ELSE
			SELECT @StartDate = erd.[StartDateTime]
				  ,@EndDate = erd.[EndDateTime]
				  ,@EnableDaysBeforeStartDate = ed.[EnableDaysBeforeStartDate]
				  ,@DisableDaysBeforeStartDate = ed.[DisableDaysBeforeStartDate]
				  ,@ShowRegistredUsersRoleID = [ShowRegistredUsersRole]
				  ,@ShowRegistredUsersTo = [ShowRegistredUsersTo]
				  ,@DisableFurtherRegistration = ed.[DisableFurtherRegistration]
			 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ed
			 INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd ON ed.ArticleID = erd.ArticleID AND erd.RecurringID = @RecurringID
			 WHERE ed.ArticleID = @ArticleID
		  
		DECLARE @registrationEndDate BIT;
		SET @registrationEndDate = 0;
		  
		IF @DisableFurtherRegistration = 0
		BEGIN
			IF @DisableDaysBeforeStartDate IS NULL AND @CurrentDate < @StartDate
				SET @registrationEndDate = 1;
			ELSE IF @CurrentDate < DATEADD(minute,-@DisableDaysBeforeStartDate, @StartDate)
				SET @registrationEndDate = 1;
			
			IF @registrationEndDate = 1
			BEGIN
				IF @EnableDaysBeforeStartDate IS NULL
				BEGIN 
					IF @CurrentDate > (SELECT [PublishDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] WHERE ArticleID = @ArticleID)
						SET @IsRegistrationEnabled = 1;
				END
				ELSE IF @CurrentDate > DATEADD(minute,-@EnableDaysBeforeStartDate, @StartDate)
					SET @IsRegistrationEnabled = 1;

			END
		 END

	END

END

SELECT @CanViewArticle AS CanViewArticle,
	@HasRegistrationRights AS HasRegistrationRights,
	@IsRegistrationEnabled AS IsRegistrationEnabled,
	@ShowRegistredUsersTo AS ShowRegistredUsersTo,
	@ShowRegistredUsersRoleID AS ShowRegistredUsersRoleID' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsEventEditSignUp]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsEventEditSignUp]
	@News_ModuleID INT,
	@PortalID INT,
	@UserID INT,
	@ArticleID INT,
	@RecurringID INT,
	@IsAdminOrSuperUser BIT,
	@UserStatus TINYINT
AS 
SET NOCOUNT ON;

-- @UserStatus
-- 0 no
-- 1 yes
-- 2 maybe

DECLARE @ReturnCode SMALLINT;
SET @ReturnCode = 0;
-- 0 insert new record
-- -1 value exists do update
-- -6 value exists - do nothing
-- -2 error occurred
-- -3 article doesnt exist
-- -4 dont have artivle view permissions
-- -5 dont have registration permissions

-- trebam dodati i check dates tj od clanka settingse za registraciju

DECLARE @HasRegistrationRights BIT;
SET @HasRegistrationRights = 0;

DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();

DECLARE @EventRegistrationRole INT;

DECLARE @CanViewArticle BIT;
SET @CanViewArticle = 0;

DECLARE @EventUserItemID INT;
SET @EventUserItemID = 0;

IF @RecurringID IS NULL
BEGIN
	IF NOT EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] WHERE ArticleID = @ArticleID AND EventType = 1)
		SET @ReturnCode = -3;
	ELSE IF EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] WHERE ArticleID = @ArticleID AND EventType = 1 AND Recurring = 1) -- ako je to clanak recurring onda nije dobro
		SET @ReturnCode = -3;
END
ELSE
BEGIN
	IF NOT EXISTS(
		SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ed
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd ON ed.ArticleID = erd.ArticleID AND erd.RecurringID = @RecurringID
		WHERE ed.ArticleID = @ArticleID AND ed.EventType = 1
	)
		SET @ReturnCode = -3;
END

IF @ReturnCode = 0
BEGIN
	IF @IsAdminOrSuperUser = 1
	BEGIN
		SET @CanViewArticle = 1;
	END
	ELSE
	BEGIN
		DECLARE @SharingPortalID INT;
		
		DECLARE @HasArticlePermissions BIT;
		SET @HasArticlePermissions = (SELECT HasPermissions FROM {databaseOwner}[{objectQualifier}EasyDNNNews] WHERE ArticleID = @ArticleID);
		
		DECLARE @UserInRoles TABLE (RoleID INT NOT NULL PRIMARY KEY);
		INSERT INTO @UserInRoles SELECT DISTINCT r.[RoleID] FROM {databaseOwner}[{objectQualifier}Roles] AS r INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID WHERE ur.UserID = @UserID AND r.PortalID = @PortalID AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate) AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate);
		
		IF @HasArticlePermissions = 1
		BEGIN
			IF EXISTS(
				SELECT [EventRegistration] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = @ArticleID AND aup.UserID = @UserID AND aup.EventRegistration = 1
			) OR EXISTS(
				SELECT [EventRegistration] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
				WHERE arp.ArticleID = @ArticleID AND arp.EventRegistration = 1 AND arp.RoleID IN(SELECT [RoleID] FROM @UserInRoles)
			)
			BEGIN
				SET @HasRegistrationRights = 1;

				IF EXISTS (SELECT n.ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n 
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON n.ArticleID = aup.ArticleID
						WHERE aup.ArticleID = @ArticleID
							AND n.HasPermissions = 1
							AND aup.UserID = @UserID
							AND aup.Show = 1
							AND n.Approved = 1
							AND (n.UserID = @UserID OR (n.Active = 1 AND @CurrentDate BETWEEN n.[PublishDate] AND n.[ExpireDate]))
						)
				OR EXISTS (SELECT n.ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n 
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON n.ArticleID = arp.ArticleID
						WHERE arp.ArticleID = @ArticleID
							AND n.HasPermissions = 1
							AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
							AND arp.Show = 1
							AND n.Approved = 1
							AND (n.UserID = @UserID OR (n.Active = 1 AND @CurrentDate BETWEEN n.[PublishDate] AND n.[ExpireDate]))
						)
						SET @CanViewArticle = 1;
				ELSE
				SET @ReturnCode = -4;			
			END
			ELSE
				SET @ReturnCode = -5;
		END
		ELSE
		BEGIN
		
			DECLARE @PermissionsByPortal BIT;
			SELECT @PermissionsByPortal = [PermissionsPMSource], @SharingPortalID = [SharingPortalID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @News_ModuleID;
			
			DECLARE @UserViewCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY);
			
			IF @PermissionsByPortal = 1 -- po portalu
			BEGIN
				IF EXISTS(
					SELECT [EventRegistration] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					WHERE rps.[EventRegistration] = 1 AND rps.ModuleID IS NULL AND rps.PortalID = @PortalID AND rps.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				) OR EXISTS(
					SELECT [EventRegistration] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
					WHERE ups.[EventRegistration] = 1 AND ups.UserID = @UserID AND ups.ModuleID IS NULL AND ups.PortalID = @PortalID
				)	
				BEGIN
					SET @HasRegistrationRights = 1;
					IF EXISTS(
						SELECT [ShowAllCategories] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
						WHERE rps.[ShowAllCategories] = 1 AND rps.ModuleID IS NULL AND rps.PortalID = @PortalID AND rps.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
					) OR EXISTS(
						SELECT [ShowAllCategories] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
						WHERE ups.[ShowAllCategories] = 1 AND ups.UserID = @UserID AND ups.ModuleID IS NULL AND ups.PortalID = @PortalID
					)
						INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
					ELSE
					BEGIN
						INSERT INTO @UserViewCategories
						SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
						INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
						WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL
						UNION
						SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
						WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL;
					END
				END
				ELSE
					SET @ReturnCode = -5;	
			END
			ELSE
			BEGIN
				IF EXISTS(
					SELECT [EventRegistration] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					WHERE rps.[EventRegistration] = 1 AND rps.ModuleID = @News_ModuleID AND rps.PortalID = @PortalID AND rps.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				) OR EXISTS(
					SELECT [EventRegistration] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
					WHERE ups.[EventRegistration] = 1 AND ups.UserID = @UserID AND ups.ModuleID = @News_ModuleID AND ups.PortalID = @PortalID
				)	
				BEGIN
					SET @HasRegistrationRights = 1;
					
					IF EXISTS(
						SELECT [ShowAllCategories] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
						WHERE rps.[ShowAllCategories] = 1 AND rps.ModuleID = @News_ModuleID AND rps.PortalID = @PortalID AND rps.RoleID IN (SELECT DISTINCT r.[RoleID] FROM {databaseOwner}[{objectQualifier}Roles] AS r INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID WHERE ur.UserID = @UserID AND r.PortalID = @PortalID AND ( ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate) AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate))
					) OR EXISTS(
						SELECT [ShowAllCategories] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
						WHERE ups.[ShowAllCategories] = 1 AND ups.UserID = @UserID AND ups.ModuleID = @News_ModuleID AND ups.PortalID = @PortalID 
					)
					BEGIN
					IF @SharingPortalID IS NULL
						INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
					ELSE
						INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @SharingPortalID;
					END
					ELSE
					BEGIN
						INSERT INTO @UserViewCategories
						SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
						INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
						WHERE rps.PortalID = @PortalID AND rps.ModuleID = @News_ModuleID
						UNION
						SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
						WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @News_ModuleID;
					END			
				END
				ELSE
					SET @ReturnCode = -5;
			END
			
			IF @HasRegistrationRights = 1
			BEGIN
				IF EXISTS (SELECT n.ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserViewCategories)
					WHERE n.ArticleID=@ArticleID
						AND n.HasPermissions = 0
						AND n.Approved = 1
						AND (n.UserID = @UserID OR (n.Active = 1 AND @CurrentDate BETWEEN n.[PublishDate] AND n.[ExpireDate]))
					)
					SET @CanViewArticle = 1;
				ELSE
					SET @ReturnCode = -4;
			END
		END
	END
	
	IF @CanViewArticle = 1
	BEGIN
		DECLARE @EventUserId INT;

		SELECT @EventUserId=Id FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventUsers] WHERE DNNUserID = @UserId
		IF @EventUserId IS NULL
		BEGIN
			INSERT INTO {databaseOwner}[{objectQualifier}EasyDNNNewsEventUsers] ([DNNUserID],[EmailAuthenticatedUserID]) VALUES (@UserId,NULL)
			SELECT @EventUserId=CAST(SCOPE_IDENTITY() AS INT);
		END
				
		IF @RecurringID IS NULL
		BEGIN
			IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] WHERE ArticleID = @ArticleID AND EventUserID=@EventUserId)
			BEGIN
				IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] WHERE ArticleID = @ArticleID AND EventUserID=@EventUserId AND [UserStatus] = @UserStatus)
					SET @ReturnCode = -6;
				ELSE
					SET @ReturnCode = -1;
			END
		END
		ELSE
		BEGIN
			IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] WHERE RecurringArticleID = @ArticleID AND RecurringID = @RecurringID AND EventUserID=@EventUserId)
			BEGIN
				IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] WHERE RecurringArticleID = @ArticleID AND RecurringID = @RecurringID AND EventUserID=@EventUserId AND [UserStatus] = @UserStatus)
					SET @ReturnCode = -6;
				ELSE
					SET @ReturnCode = -1;
			END
		END

		IF @ReturnCode <> -6
		BEGIN
			
			DECLARE @IsRegistrationEnabled BIT;
			SET @IsRegistrationEnabled = 0;
			
			DECLARE @DisableFurtherRegistration BIT;
			DECLARE @EnableDaysBeforeStartDate INT;
			DECLARE @DisableDaysBeforeStartDate INT;
			DECLARE @StartDate DATETIME;
			DECLARE @EndDate DATETIME;

			IF @RecurringID IS NULL
				SELECT @StartDate = [StartDate]
					  ,@EndDate = [EndDate]
					  ,@EnableDaysBeforeStartDate = [EnableDaysBeforeStartDate]
					  ,@DisableDaysBeforeStartDate = [DisableDaysBeforeStartDate]
					  ,@EventRegistrationRole = [EventRegistrationRole]
					  ,@DisableFurtherRegistration = [DisableFurtherRegistration]
				 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] WHERE ArticleID = @ArticleID
			 ELSE
				SELECT @StartDate = erd.[StartDateTime]
					  ,@EndDate = erd.[EndDateTime]
					  ,@EnableDaysBeforeStartDate = ed.[EnableDaysBeforeStartDate]
					  ,@DisableDaysBeforeStartDate = ed.[DisableDaysBeforeStartDate]
					  ,@EventRegistrationRole = ed.[EventRegistrationRole]
					  ,@DisableFurtherRegistration = ed.[DisableFurtherRegistration]
				 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ed
				 INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd ON ed.ArticleID = erd.ArticleID AND erd.RecurringID = @RecurringID
				 WHERE ed.ArticleID = @ArticleID
			  
			DECLARE @registrationEndDate BIT;
			SET @registrationEndDate = 0;
			  
			IF @DisableFurtherRegistration = 0
			BEGIN
				IF @DisableDaysBeforeStartDate IS NULL AND @CurrentDate < @StartDate
					SET @registrationEndDate = 1;
				ELSE IF @CurrentDate < DATEADD(minute,-@DisableDaysBeforeStartDate, @StartDate)
					SET @registrationEndDate = 1;
				
				IF @registrationEndDate = 1
				BEGIN
					IF @EnableDaysBeforeStartDate IS NULL
					BEGIN 
						IF @CurrentDate > (SELECT [PublishDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] WHERE ArticleID = @ArticleID)
							SET @IsRegistrationEnabled = 1;
					END
					ELSE IF @CurrentDate > DATEADD(minute,-@EnableDaysBeforeStartDate, @StartDate)
						SET @IsRegistrationEnabled = 1;

				END
			 END
			 
			IF @IsRegistrationEnabled = 1
			BEGIN
				
				IF @ReturnCode = -1 -- record exists - update !!!
				BEGIN
									
					BEGIN TRY
						IF @RecurringID IS NULL
						BEGIN
							UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems]
								SET [LastModifiedDate] = @CurrentDate
									,[UserStatus] = @UserStatus
							WHERE ArticleID = @ArticleID AND EventUserID=@EventUserId;
							
							SELECT @EventUserItemID = Id FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] WHERE ArticleID = @ArticleID AND EventUserID=@EventUserId;
							
						END
						ELSE
						BEGIN
							UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems]
								SET [LastModifiedDate] = @CurrentDate
									,[UserStatus] = @UserStatus
							WHERE RecurringArticleID = @ArticleID AND RecurringID = @RecurringID AND EventUserID=@EventUserId;
							
							SELECT @EventUserItemID = Id FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] WHERE RecurringArticleID = @ArticleID AND RecurringID = @RecurringID AND EventUserID=@EventUserId;
							
						END

					END TRY
					BEGIN CATCH
						SET @ReturnCode = -2;
					END CATCH
				
				END
				ELSE
				BEGIN
				
					BEGIN TRY

						IF @RecurringID IS NULL
						BEGIN
							INSERT INTO {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems]
							   ([ArticleID]
							   ,[EventUserID]
							   ,[ApproveStatus]
							   ,[CreatedOnDate]
							   ,[LastModifiedDate],[NumberOfTickets],[Message],[UserStatus])
						 VALUES
							   (@ArticleID,
							   @EventUserId,
							   1,
							   @CurrentDate,
							   @CurrentDate,1,NULL,@UserStatus)
							   
							   SELECT @EventUserItemID = Id FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] WHERE ArticleID = @ArticleID AND EventUserID=@EventUserId;
						END
						ELSE
						BEGIN
							INSERT INTO {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems]
							   ([RecurringArticleID]
							   ,[RecurringID]
							   ,[EventUserID]
							   ,[ApproveStatus]
							   ,[CreatedOnDate]
							   ,[LastModifiedDate],[NumberOfTickets],[Message],[UserStatus])
						 VALUES
							   (@ArticleID,
							   @RecurringID,
							   @EventUserId,
							   1,
							   @CurrentDate,
							   @CurrentDate,1,NULL,@UserStatus)
							   
						SELECT @EventUserItemID = Id FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] WHERE RecurringArticleID = @ArticleID AND RecurringID = @RecurringID AND EventUserID=@EventUserId;
	   
						END

					END TRY
					BEGIN CATCH
						SET @ReturnCode = -2;
					END CATCH
					
				END
				
			END
			ELSE
				SET @EventRegistrationRole = NULL;
		END
	END
END

SELECT @ReturnCode AS ReturnCode, @EventUserItemID AS EventUserItemID, @EventRegistrationRole AS EventRegistrationRole;' 
END
GO