IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EDS_StringListToTable]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION {databaseOwner}[EDS_StringListToTable]
GO

/****** Delete all stored procedures because they dont have object qualifier *******/

if '{objectQualifier}' <> ''
BEGIN
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsAddEditCategoriesByPermissions]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsAddEditCategoriesByPermissions]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemByPermission]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemByPermission]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsByMonthlyArchive]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsByMonthlyArchive]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsByTagID]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsByTagID]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsByTagIDCountForPageing]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsByTagIDCountForPageing]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsCalendarEventsArchive]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsCalendarEventsArchive]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsCountForArticleEditor]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsCountForArticleEditor]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsCountForPageing]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsCountForPageing]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsCountForPageingDateWithEventsRange]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsCountForPageingDateWithEventsRange]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsCountForPageingOnlyEvents]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsCountForPageingOnlyEvents]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsCountItemsFromSearch]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsCountItemsFromSearch]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsEventsOnlyInRange]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsEventsOnlyInRange]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsForListDisplay]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsForListDisplay]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsForListDisplayByDateWithEventsRange]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsForListDisplayByDateWithEventsRange]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsForListDisplayOnlyEvents]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsForListDisplayOnlyEvents]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsForTagCloud]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsForTagCloud]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsForTreeView]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsForTreeView]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsFromSearch]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsFromSearch]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsPerCategory]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsPerCategory]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsForArticleEditor]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsForArticleEditor]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsForCalendarAll]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsForCalendarAll]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsForCalendarOnlyEvents]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsForCalendarOnlyEvents]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsForCalendarOnlyNews]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsForCalendarOnlyNews]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsForCategoryMenu]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsForCategoryMenu]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsShowCategoriesByPermissions]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsShowCategoriesByPermissions]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetChildeCategories]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetChildeCategories]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetCountAllNewsEventsOnlyInRange]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetCountAllNewsEventsOnlyInRange]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsForChalendarMonthly]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsForChalendarMonthly]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetItemsEventsToShowInCalendar]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetItemsEventsToShowInCalendar]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNnewsGroupsAndAuthors]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNnewsGroupsAndAuthors]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNnewsArticleArchive]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNnewsArticleArchive]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsGetCategoryAutoAdd]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsGetCategoryAutoAdd]
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[EasyDNNNewsCategoryPositioning]') AND type in (N'P', N'PC'))
		DROP PROCEDURE {databaseOwner}[EasyDNNNewsCategoryPositioning]
END
GO

/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsAddEditCategoriesByPermissions]    Script Date: 06/24/2013 16:39:06 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsAddEditCategoriesByPermissions]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsAddEditCategoriesByPermissions]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemByPermission]    Script Date: 06/24/2013 16:39:06 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemByPermission]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemByPermission]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsByMonthlyArchive]    Script Date: 06/24/2013 16:39:06 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsByMonthlyArchive]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsByMonthlyArchive]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsByTagID]    Script Date: 06/24/2013 16:39:06 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsByTagID]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsByTagID]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsByTagIDCountForPageing]    Script Date: 06/24/2013 16:39:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsByTagIDCountForPageing]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsByTagIDCountForPageing]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCalendarEventsArchive]    Script Date: 06/24/2013 16:39:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCalendarEventsArchive]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCalendarEventsArchive]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountForArticleEditor]    Script Date: 06/24/2013 16:39:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountForArticleEditor]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountForArticleEditor]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountForPageing]    Script Date: 06/24/2013 16:39:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountForPageing]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountForPageing]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountForPageingDateWithEventsRange]    Script Date: 06/24/2013 16:39:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountForPageingDateWithEventsRange]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountForPageingDateWithEventsRange]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountForPageingOnlyEvents]    Script Date: 06/24/2013 16:39:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountForPageingOnlyEvents]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountForPageingOnlyEvents]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountItemsFromSearch]    Script Date: 06/24/2013 16:39:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountItemsFromSearch]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountItemsFromSearch]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForArticleEditor]    Script Date: 06/24/2013 16:39:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForArticleEditor]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForArticleEditor]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarAll]    Script Date: 06/24/2013 16:39:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarAll]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarAll]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarOnlyEvents]    Script Date: 06/24/2013 16:39:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarOnlyEvents]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarOnlyEvents]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarOnlyNews]    Script Date: 06/24/2013 16:39:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarOnlyNews]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarOnlyNews]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCategoryMenu]    Script Date: 06/24/2013 16:39:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCategoryMenu]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCategoryMenu]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForListDisplay]    Script Date: 06/24/2013 16:39:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForListDisplay]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForListDisplay]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForListDisplayByDateWithEventsRange]    Script Date: 06/24/2013 16:39:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForListDisplayByDateWithEventsRange]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForListDisplayByDateWithEventsRange]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForListDisplayOnlyEvents]    Script Date: 06/24/2013 16:39:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForListDisplayOnlyEvents]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForListDisplayOnlyEvents]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForTagCloud]    Script Date: 06/24/2013 16:39:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForTagCloud]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForTagCloud]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForTreeView]    Script Date: 06/24/2013 16:39:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForTreeView]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForTreeView]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsFromSearch]    Script Date: 06/24/2013 16:39:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsFromSearch]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsFromSearch]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsPerCategory]    Script Date: 06/24/2013 16:39:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsPerCategory]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsPerCategory]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsShowCategoriesByPermissions]    Script Date: 06/24/2013 16:39:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsShowCategoriesByPermissions]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsShowCategoriesByPermissions]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNnewsGroupsAndAuthors]    Script Date: 06/26/2013 11:03:32 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGroupsAndAuthors]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGroupsAndAuthors]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNnewsArticleArchive]    Script Date: 06/24/2013 16:39:06 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsArticleArchive]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsArticleArchive]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetCategoryAutoAdd]    Script Date: 06/26/2013 10:32:09 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetCategoryAutoAdd]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetCategoryAutoAdd]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryPositioning]    Script Date: 06/26/2013 10:15:43 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsCategoryPositioning]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryPositioning]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryPositioning]    Script Date: 07/12/2013 15:59:10 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsCategoryPositioning]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryPositioning]
	@PortalID int,
	@CategoryID int,
	@Operation nvarchar(20)
AS
SET NOCOUNT ON;

BEGIN TRANSACTION;

BEGIN TRY
DECLARE @Position int;
DECLARE @Parent int;
DECLARE @NewParent int;
DECLARE @Level int;
DECLARE @UpRootCategoryID int;
DECLARE @DownRootCategoryID int;
DECLARE @UpNewPosition int;
DECLARE @DownNewPosition int;

SELECT @Position = [Position] ,@Parent = [ParentCategory], @Level = [Level] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE CategoryID = @CategoryID;
IF @Position IS NOT NULL
BEGIN
	IF @Operation = ''Left''
	BEGIN	
		IF @Level > 0 AND @Parent <> 0
		BEGIN	
			DECLARE @DownCount int;
			;WITH sibblings AS(
				SELECT [CategoryID],[Position],[Level] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE cl.ParentCategory = @Parent AND cl.Position > @Position AND PortalID = @PortalID
				UNION ALL
				SELECT c.[CategoryID],c.[Position],c.[Level]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN sibblings AS s ON c.ParentCategory = s.CategoryID WHERE c.PortalID = @PortalID
			)
			SELECT @DownCount = Count([CategoryID]) FROM sibblings
			-- change position of all down inner elements
			IF @DownCount > 0
			BEGIN
				;WITH sibblings AS(
					SELECT [CategoryID],[Position]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					WHERE cl.ParentCategory = @Parent AND cl.Position > @Position AND PortalID = @PortalID
					UNION ALL
					SELECT c.[CategoryID], c.[Position]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN sibblings AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
				),
				OrderAll AS(
					SELECT [CategoryID], ROW_NUMBER() OVER (ORDER BY Position ASC) AS PositionsOrder FROM sibblings
				)
				UPDATE cl SET cl.Position = (@Position - 1 + cpm.PositionsOrder) FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] as cl INNER JOIN OrderAll as cpm ON cl.CategoryID = cpm.CategoryID;
			END		
			-- change parent and postion of mooving category		
			SELECT @NewParent = cl.ParentCategory FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl WHERE cl.CategoryID = @Parent AND cl.PortalID = @PortalID;	
			UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] SET [ParentCategory] = @NewParent, [Position] = (@Position + @DownCount), [Level] = [Level] - 1 WHERE CategoryID = @CategoryID;
			-- find all childe categories and set level - 1
			;WITH Childes AS(
				SELECT [CategoryID],[Position]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE cl.ParentCategory = @CategoryID AND PortalID = @PortalID
				UNION ALL
				SELECT c.[CategoryID],c.[Position]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN Childes AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
			),
			OrderAll AS(
				SELECT [CategoryID], ROW_NUMBER() OVER (ORDER BY Position ASC) AS Offset FROM Childes
			)
			UPDATE cl SET cl.Position = (@Position + @DownCount + Offset), cl.[Level] = cl.[Level] - 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] as cl INNER JOIN OrderAll as cpm ON cl.CategoryID = cpm.CategoryID;
		END
	END
	ELSE IF @Operation = ''Right''
	BEGIN
		SELECT @NewParent = CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl WHERE cl.Position = @Position - 1 AND cl.[Level] = @Level AND cl.PortalID = @PortalID;
		IF @NewParent IS NOT NULL -- then are same level 
		BEGIN
			UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] SET [ParentCategory] = @NewParent, [Level] = [Level] + 1 WHERE CategoryID = @CategoryID;
				-- find all childe categories and set level + 1
			;WITH Childes AS(
				SELECT [CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE cl.ParentCategory = @CategoryID AND PortalID = @PortalID
				UNION ALL
				SELECT c.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN Childes AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
			)
			UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] SET [Level] = [Level] + 1 WHERE [CategoryID] IN (SELECT [CategoryID] FROM Childes);	
		END
		ELSE
		BEGIN
			SELECT TOP (1) @NewParent = cl.CategoryID, @UpNewPosition = cl.Position FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE cl.ParentCategory = @Parent AND cl.PortalID = @PortalID AND cl.Position < @Position ORDER BY cl.Position DESC			
			
			IF @NewParent IS NOT NULL
			BEGIN		
				UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] SET [ParentCategory] = @NewParent, [Level] = [Level] + 1 WHERE CategoryID = @CategoryID;			
				-- find all childe categories and set level + 1
				;WITH Childes AS(
					SELECT [CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					WHERE cl.ParentCategory = @CategoryID AND PortalID = @PortalID
					UNION ALL
					SELECT c.[CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN Childes AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
				)
				UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] SET [Level] = [Level] + 1 WHERE [CategoryID] IN (SELECT [CategoryID] FROM Childes);	
			END
		END
	END
	ELSE IF @Operation = ''UP''
	BEGIN
		-- parentCategory is the same
		-- level is the same
		-- positions order is changeing	
		-- main two exchange nodes (inner root nodes)
		SELECT TOP (1) @DownRootCategoryID = cl.CategoryID, @UpNewPosition = cl.Position FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
			WHERE cl.ParentCategory = @Parent AND cl.Position < @Position AND cl.PortalID = @PortalID ORDER BY cl.Position DESC
			
		IF @DownRootCategoryID IS NOT NULL -- if null then this is first sibbling and cannot move up
		BEGIN
			-- up root node
			UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] SET Position = @UpNewPosition WHERE CategoryID = @CategoryID;
			-- Exchange childes positions
			-- up node childe''''s		
			;WITH Childes AS(
				SELECT [CategoryID],[Position]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE cl.ParentCategory = @CategoryID AND PortalID = @PortalID
				UNION ALL
				SELECT c.[CategoryID],c.[Position]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN Childes AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
			),
			ChildesPositionsMath AS(
				SELECT [CategoryID], ROW_NUMBER() OVER (ORDER BY Position ASC) AS offset FROM Childes
			)
			UPDATE cl SET cl.Position = (@UpNewPosition + cpm.offset) FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] as cl INNER JOIN ChildesPositionsMath as cpm ON cl.CategoryID = cpm.CategoryID;
			-- down node
			;WITH Childes AS(
				SELECT [CategoryID],[Position]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE cl.ParentCategory = @CategoryID AND PortalID = @PortalID
				UNION ALL
				SELECT c.[CategoryID],c.[Position]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN Childes AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
			)
			SELECT @DownNewPosition = ( COUNT([Position]) + @UpNewPosition + 1) FROM Childes;		
			UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] SET Position = @DownNewPosition WHERE CategoryID = @DownRootCategoryID;		
			-- down node childe''''s	
			;WITH Childes AS(
				SELECT [CategoryID],[Position]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE cl.ParentCategory = @DownRootCategoryID AND PortalID = @PortalID
				UNION ALL
				SELECT c.[CategoryID],c.[Position]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN Childes AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
			),
			ChildesPositionsMath AS(
				SELECT [CategoryID], ROW_NUMBER() OVER (ORDER BY Position ASC) AS offset FROM Childes
			)
			UPDATE cl SET cl.Position = (@DownNewPosition + cpm.offset) FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] as cl INNER JOIN ChildesPositionsMath as cpm ON cl.CategoryID = cpm.CategoryID;
			-- all other Categories on portal position won''''t change
		END
	END	
	ELSE IF @Operation = ''DOWN''
	BEGIN
		-- main two exchange nodes (inner root nodes)		
		SELECT TOP (1) @UpRootCategoryID = cl.CategoryID, @DownNewPosition = cl.Position FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
			WHERE cl.ParentCategory = @Parent AND cl.Position > @Position AND cl.PortalID = @PortalID ORDER BY cl.Position ASC
			
		IF @UpRootCategoryID IS NOT NULL -- if null then this is last sibbling and cannot move down
		BEGIN
			-- up root node
			UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] SET Position = @Position WHERE CategoryID = @UpRootCategoryID;
			-- Exchange childes positions
			-- up node childe''''s		
			;WITH Childes AS(
				SELECT [CategoryID],[Position]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE cl.ParentCategory = @UpRootCategoryID AND PortalID = @PortalID
				UNION ALL
				SELECT c.[CategoryID],c.[Position]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN Childes AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
			),
			ChildesPositionsMath AS(
				SELECT [CategoryID], ROW_NUMBER() OVER (ORDER BY Position ASC) AS offset FROM Childes
			)
			UPDATE cl SET cl.Position = (@Position + cpm.offset) FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] as cl INNER JOIN ChildesPositionsMath as cpm ON cl.CategoryID = cpm.CategoryID;
			-- down node
			;WITH Childes AS(
				SELECT [CategoryID],[Position]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE cl.ParentCategory = @UpRootCategoryID AND PortalID = @PortalID
				UNION ALL
				SELECT c.[CategoryID],c.[Position]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN Childes AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
			)
			SELECT @UpNewPosition = ( COUNT([Position]) + @Position + 1 ) FROM Childes;		
			UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] SET Position = @UpNewPosition WHERE CategoryID = @CategoryID;
			
			-- down node childe''''s
			
			;WITH Childes AS(
				SELECT [CategoryID],[Position]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE cl.ParentCategory = @CategoryID AND PortalID = @PortalID
				UNION ALL
				SELECT c.[CategoryID],c.[Position]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN Childes AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
			),
			ChildesPositionsMath AS(
				SELECT [CategoryID], ROW_NUMBER() OVER (ORDER BY Position ASC) AS offset FROM Childes
			)
			UPDATE cl SET cl.Position = (@UpNewPosition + cpm.offset) FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] as cl INNER JOIN ChildesPositionsMath as cpm ON cl.CategoryID = cpm.CategoryID;		
			-- all other Categories on portal position won''''t change
		END
	END
END
END TRY
BEGIN CATCH
    IF @@TRANCOUNT > 0
        ROLLBACK TRANSACTION;
END CATCH;
IF @@TRANCOUNT > 0
    COMMIT TRANSACTION;' 
END
GO

/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetCategoryAutoAdd]    Script Date: 06/26/2013 10:32:09 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetCategoryAutoAdd]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetCategoryAutoAdd]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsGetCategoryAutoAdd]    Script Date: 06/26/2013 10:32:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetCategoryAutoAdd]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetCategoryAutoAdd]
	@PortalID int,
    @ModuleID int
AS 
;WITH hierarchy AS (
	SELECT CategoryID, ParentCategory, CategoryName
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
	WHERE (cl.ParentCategory IN (
		SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @ModuleID
		) OR cl.CategoryID IN (
		SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @ModuleID)
	) AND PortalID = @PortalID

	UNION ALL

	SELECT c.CategoryID, c.ParentCategory, c.[CategoryName]
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID
	WHERE c.PortalID = @PortalID
)
SELECT DISTINCT CategoryID FROM hierarchy;' 
END
GO

/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsShowCategoriesByPermissions]    Script Date: 06/24/2013 16:39:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsShowCategoriesByPermissions]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsShowCategoriesByPermissions]
    @UserID int,
    @PortalID int,
    @ModuleID int
AS 
SET NOCOUNT ON;
DECLARE @CheckModuleID bit;
IF @ModuleID IS NULL
BEGIN
	SET @CheckModuleID = 1;
END
ELSE
BEGIN
	SET @CheckModuleID = 0;
END
IF @UserID = -1
BEGIN
	SELECT DISTINCT CategoryID
	 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
	  INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
		WHERE rps.RoleID IS NULL AND ((@CheckModuleID = 1 AND (rps.ModuleID IS NULL)) OR (@CheckModuleID = 0 AND (rps.ModuleID = @ModuleID))) AND rps.PortalID = @PortalID
END
ELSE
BEGIN
	SELECT DISTINCT CategoryID
	 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
	  INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
	   INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = rps.RoleID
		WHERE ur.UserID = @UserID AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > GETUTCDATE()) AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < GETUTCDATE()) AND ((@CheckModuleID = 1 AND (rps.ModuleID IS NULL)) OR (@CheckModuleID = 0 AND (rps.ModuleID = @ModuleID))) AND rps.PortalID = @PortalID
	UNION
	SELECT CategoryID
	 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
	  INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON upsc.PremissionSettingsID = ups.PremissionSettingsID
	   WHERE ups.UserID = @UserID AND ((@CheckModuleID = 1 AND (ups.ModuleID IS NULL)) OR (@CheckModuleID = 0 AND (ups.ModuleID = @ModuleID))) AND ups.PortalID = @PortalID
END' 
END
GO

/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNNewsAddEditCategoriesByPermissions]    Script Date: 06/24/2013 16:39:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsAddEditCategoriesByPermissions]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsAddEditCategoriesByPermissions]
    @UserID int,
    @PortalID int,
    @ModuleID int
AS 
SET NOCOUNT ON;
DECLARE @CheckModuleID bit;
IF @ModuleID IS NULL
BEGIN
	SET @CheckModuleID = 1;
END
ELSE
BEGIN
	SET @CheckModuleID = 0;
END
IF @UserID = -1
BEGIN
	SELECT DISTINCT cat.CategoryID, cat.CategoryName
	 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] as cat INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpac ON cat.CategoryID = rpac.CategoryID
	  INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rpac.PremissionSettingsID = rps.PremissionSettingsID
		WHERE rps.RoleID IS NULL AND ((@CheckModuleID = 1 AND (rps.ModuleID IS NULL)) OR (@CheckModuleID = 0 AND (rps.ModuleID = @ModuleID))) AND rps.PortalID = @PortalID
END
ELSE
BEGIN
	SELECT DISTINCT cat.CategoryID, cat.CategoryName
	 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] as cat INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpac ON cat.CategoryID = rpac.CategoryID
	  INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rpac.PremissionSettingsID = rps.PremissionSettingsID
	   INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = rps.RoleID
		WHERE ur.UserID = @UserID AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > GETUTCDATE()) AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < GETUTCDATE()) AND ((@CheckModuleID = 1 AND (rps.ModuleID IS NULL)) OR (@CheckModuleID = 0 AND (rps.ModuleID = @ModuleID))) AND rps.PortalID = @PortalID
	UNION
	SELECT cat.CategoryID, cat.CategoryName
	 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] as cat INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsAddToCategories] AS upac ON cat.CategoryID = upac.CategoryID
	  INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON upac.PremissionSettingsID = ups.PremissionSettingsID
	   WHERE ups.UserID = @UserID AND ((@CheckModuleID = 1 AND (ups.ModuleID IS NULL)) OR (@CheckModuleID = 0 AND (ups.ModuleID = @ModuleID))) AND ups.PortalID = @PortalID   
END' 
END
