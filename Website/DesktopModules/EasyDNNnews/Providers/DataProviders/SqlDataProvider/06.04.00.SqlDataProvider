IF EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsCategories' AND column_name = 'PortalID')
BEGIN
	IF EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsCategoryList' AND column_name = 'CategoryText')
	BEGIN
		ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] ALTER COLUMN CategoryText NVARCHAR(MAX) NULL
	END

	IF EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsCategories' AND column_name = 'PortalID')
	BEGIN
		ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] DROP COLUMN PortalID
	END

	IF EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsCategoryLocalization' AND column_name = 'Title')
	BEGIN
		UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLocalization] SET [Title] = '' WHERE Title IS NULL
		ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLocalization] ALTER COLUMN Title NVARCHAR(200) NOT NULL
	END

	IF EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsCategoryLocalization' AND column_name = 'CategoryText')
	BEGIN
		ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLocalization] ALTER COLUMN CategoryText NVARCHAR(MAX) NULL
	END

	IF EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsCategoryLocalization' AND column_name = 'PortalID')
	BEGIN
		EXEC('ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLocalization] DROP COLUMN [PortalID]');
	END
END
GO

IF EXISTS (SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{objectQualifier}EasyDNNNews' AND COLUMN_NAME = 'DisplayStyle' AND DATA_TYPE = 'nchar')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ALTER COLUMN [DisplayStyle] NVARCHAR(50) NULL;
	UPDATE {databaseOwner}[{objectQualifier}EasyDNNNews] SET [DisplayStyle] = LTRIM(RTRIM([DisplayStyle]));
END
GO


IF EXISTS (SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{objectQualifier}EasyDNNNews' AND COLUMN_NAME = 'Article' AND DATA_TYPE = 'ntext')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ALTER COLUMN [Article] NVARCHAR(MAX) NULL;
END
GO

IF EXISTS (SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{objectQualifier}EasyDNNNewsContentLocalization' AND COLUMN_NAME = 'Article' AND DATA_TYPE = 'ntext')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] ALTER COLUMN [Article] NVARCHAR(MAX) NULL;
END
GO

BEGIN TRY
IF EXISTS (SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{objectQualifier}EasyDNNNews' AND COLUMN_NAME = 'CleanArticleData' AND DATA_TYPE = 'ntext')
BEGIN
	IF EXISTS (SELECT * FROM dbo.sysobjects WHERE [name] = (N'DF_{objectQualifier}EasyDNNNews_CleanArticleData') AND type = 'D')
	BEGIN
		ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] DROP CONSTRAINT DF_{objectQualifier}EasyDNNNews_CleanArticleData;
		ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ALTER COLUMN [CleanArticleData] NVARCHAR(MAX) NOT NULL;
		ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ADD CONSTRAINT DF_{objectQualifier}EasyDNNNews_CleanArticleData DEFAULT '' FOR [CleanArticleData]
	END
END
END TRY
BEGIN CATCH
END CATCH
GO

IF EXISTS (SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{objectQualifier}EasyDNNnewsGoogleMapsData' AND COLUMN_NAME = 'PointData' AND DATA_TYPE = 'ntext')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] ALTER COLUMN [PointData] NVARCHAR(MAX) NOT NULL;
END
GO

IF EXISTS (SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{objectQualifier}EasyDNNnewsGoogleMapsData' AND COLUMN_NAME = 'FullToken' AND DATA_TYPE = 'ntext')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] ALTER COLUMN [FullToken] NVARCHAR(MAX) NOT NULL;
END
GO

IF EXISTS (SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{objectQualifier}EasyDNNNewsArchive' AND COLUMN_NAME = 'Article' AND DATA_TYPE = 'ntext')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsArchive] ALTER COLUMN [Article] NVARCHAR(MAX) NULL;
END
GO

IF EXISTS (SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{objectQualifier}EasyDNNNewsComments' AND COLUMN_NAME = 'Comment' AND DATA_TYPE = 'ntext')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsComments] ALTER COLUMN [Comment] NVARCHAR(MAX) NULL;
END
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{objectQualifier}EasyDNNNewsArchive' AND COLUMN_NAME = 'Title')
BEGIN
	UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsArchive] SET [Title] = 'No title' WHERE Title IS NULL OR LEN([Title]) = 0
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsArchive] ALTER COLUMN Title NVARCHAR(800) NOT NULL;
	BEGIN TRY
		IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE [name] = (N'chk_{objectQualifier}EasyDNNNewsArchive_Title_Lenght') AND type = 'C')
		BEGIN
			ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsArchive] ADD CONSTRAINT [chk_{objectQualifier}EasyDNNNewsArchive_Title_Lenght] CHECK (LEN([Title]) > 0)
		END
	END TRY
	BEGIN CATCH
	END CATCH
END
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{objectQualifier}EasyDNNNewsContentLocalization' AND COLUMN_NAME = 'clTitleLink')
BEGIN
	UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] SET [clTitleLink] = 'NoTitleLink' WHERE LEN([clTitleLink]) = 0
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] ALTER COLUMN clTitleLink NVARCHAR(800) NOT NULL;
	BEGIN TRY
		IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE [name] = (N'chk_{objectQualifier}EasyDNNNewsContentLocalization_clTitleLink_Lenght') AND type = 'C')
		BEGIN
			ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] ADD CONSTRAINT [chk_{objectQualifier}EasyDNNNewsContentLocalization_clTitleLink_Lenght] CHECK (LEN([clTitleLink]) > 0)
		END
	END TRY
	BEGIN CATCH
	END CATCH
END
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{objectQualifier}EasyDNNNewsContentLocalization' AND COLUMN_NAME = 'Title')
BEGIN
	UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] SET [Title] = 'No title' WHERE Title IS NULL OR LEN([Title]) = 0
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] ALTER COLUMN Title NVARCHAR(800) NOT NULL;
	BEGIN TRY
		IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE [name] = (N'chk_{objectQualifier}EasyDNNNewsContentLocalization_Title_Lenght') AND type = 'C')
		BEGIN
			ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] ADD CONSTRAINT [chk_{objectQualifier}EasyDNNNewsContentLocalization_Title_Lenght] CHECK (LEN([Title]) > 0)
		END
	END TRY
	BEGIN CATCH
	END CATCH
END
GO

IF EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}NewsGallerySync]'))
BEGIN
	DROP TRIGGER {databaseOwner}[{objectQualifier}NewsGallerySync];
END
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{objectQualifier}EasyDNNNews' AND COLUMN_NAME = 'NumberOfViews')
BEGIN
	UPDATE {databaseOwner}[{objectQualifier}EasyDNNNews] SET [NumberOfViews] = 0 WHERE NumberOfViews IS NULL OR NumberOfViews < 0
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ALTER COLUMN NumberOfViews INT NOT NULL;
	BEGIN TRY
		IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE [name] = (N'chk_{objectQualifier}EasyDNNNews_NumberOfViews') AND type = 'C')
		BEGIN
			ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ADD CONSTRAINT [chk_{objectQualifier}EasyDNNNews_NumberOfViews] CHECK ([NumberOfViews] >= 0)
		END
	END TRY
	BEGIN CATCH
	END CATCH
END
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{objectQualifier}EasyDNNNews' AND COLUMN_NAME = 'RatingCount')
BEGIN
	UPDATE {databaseOwner}[{objectQualifier}EasyDNNNews] SET [RatingCount] = 0 WHERE RatingCount IS NULL OR RatingCount < 0
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ALTER COLUMN RatingCount INT NOT NULL;
	BEGIN TRY
		IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE [name] = (N'chk_{objectQualifier}EasyDNNNews_RatingCount') AND type = 'C')
		BEGIN
			ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ADD CONSTRAINT [chk_{objectQualifier}EasyDNNNews_RatingCount] CHECK ([RatingCount] >= 0)
		END
	END TRY
	BEGIN CATCH
	END CATCH
END
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{objectQualifier}EasyDNNNews' AND COLUMN_NAME = 'TitleLink')
BEGIN
	UPDATE {databaseOwner}[{objectQualifier}EasyDNNNews] SET [TitleLink] = 'NoTitleLink' WHERE TitleLink IS NULL OR LEN([TitleLink]) = 0
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ALTER COLUMN TitleLink NVARCHAR(800) NOT NULL;
	BEGIN TRY
		IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE [name] = (N'chk_{objectQualifier}EasyDNNNews_TitleLink_Lenght') AND type = 'C')
		BEGIN
			ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ADD CONSTRAINT [chk_{objectQualifier}EasyDNNNews_TitleLink_Lenght] CHECK (LEN([TitleLink]) > 0)
		END
	END TRY
	BEGIN CATCH
	END CATCH
END
GO

IF EXISTS (SELECT name FROM sys.indexes WHERE name = N'IX_{objectQualifier}EasyDNNNews_Wizard_Suggestion')
    DROP INDEX IX_{objectQualifier}EasyDNNNews_Wizard_Suggestion ON {databaseOwner}[{objectQualifier}EasyDNNNews];
GO
IF EXISTS (SELECT name FROM sys.indexes WHERE name = N'IX_{objectQualifier}EasyDNNNews_Wizard_Suggestion2')
    DROP INDEX IX_{objectQualifier}EasyDNNNews_Wizard_Suggestion2 ON {databaseOwner}[{objectQualifier}EasyDNNNews];
GO
IF EXISTS (SELECT name FROM sys.indexes WHERE name = N'IX_{objectQualifier}EasyDNNNews_Wizard_Suggestion3')
    DROP INDEX IX_{objectQualifier}EasyDNNNews_Wizard_Suggestion3 ON {databaseOwner}[{objectQualifier}EasyDNNNews];
GO
IF EXISTS (SELECT name FROM sys.indexes WHERE name = N'IX_{objectQualifier}EasyDNNNews_Wizard_Suggestion4')
    DROP INDEX IX_{objectQualifier}EasyDNNNews_Wizard_Suggestion4 ON {databaseOwner}[{objectQualifier}EasyDNNNews];
GO
IF EXISTS (SELECT name FROM sys.indexes WHERE name = N'IX_{objectQualifier}EasyDNNNews_PublishDate')
    DROP INDEX IX_{objectQualifier}EasyDNNNews_PublishDate ON {databaseOwner}[{objectQualifier}EasyDNNNews];
GO
IF EXISTS (SELECT name FROM sys.indexes WHERE name = N'IX_{objectQualifier}EasyDNNNews_ExpireDate')
    DROP INDEX IX_{objectQualifier}EasyDNNNews_ExpireDate ON {databaseOwner}[{objectQualifier}EasyDNNNews];
GO
IF EXISTS (SELECT name FROM sys.indexes WHERE name = N'IX_{objectQualifier}EasyDNNNews_UserID')
    DROP INDEX IX_{objectQualifier}EasyDNNNews_UserID ON {databaseOwner}[{objectQualifier}EasyDNNNews];
GO
IF EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNews' and column_name = 'DateAdded')
BEGIN
	IF NOT EXISTS (select * from sysobjects o inner join syscolumns c on o.id = c.cdefault inner join sysobjects t on c.id = t.id where o.xtype = 'D' and c.name = 'DateAdded' and t.name = '{objectQualifier}EasyDNNNews')
	BEGIN TRY
		UPDATE {databaseOwner}[{objectQualifier}EasyDNNNews] SET [DateAdded] = GETUTCDATE() WHERE DateAdded IS NULL
		ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ALTER COLUMN DateAdded DATETIME NOT NULL;
		ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ADD CONSTRAINT DF_{objectQualifier}EasyDNNNews_DateAdded DEFAULT GETUTCDATE() For DateAdded 
	END TRY
	BEGIN CATCH
	END CATCH
END
GO

IF EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNews' and column_name = 'LastModified')
BEGIN
	IF NOT EXISTS (select * from sysobjects o inner join syscolumns c on o.id = c.cdefault inner join sysobjects t on c.id = t.id where o.xtype = 'D' and c.name = 'LastModified' and t.name = '{objectQualifier}EasyDNNNews')
	BEGIN TRY
		UPDATE {databaseOwner}[{objectQualifier}EasyDNNNews] SET [LastModified] = GETUTCDATE() WHERE LastModified IS NULL
		ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ALTER COLUMN LastModified DATETIME NOT NULL;
		ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ADD CONSTRAINT DF_{objectQualifier}EasyDNNNews_LastModified DEFAULT GETUTCDATE() For LastModified 
	END TRY
	BEGIN CATCH
	END CATCH
END
GO

IF EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNews' and column_name = 'PublishDate')
BEGIN
	IF NOT EXISTS (select * from sysobjects o inner join syscolumns c on o.id = c.cdefault inner join sysobjects t on c.id = t.id where o.xtype = 'D' and c.name = 'PublishDate' and t.name = '{objectQualifier}EasyDNNNews')
	BEGIN TRY
		UPDATE {databaseOwner}[{objectQualifier}EasyDNNNews] SET [PublishDate] = GETUTCDATE() WHERE PublishDate IS NULL
		ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ALTER COLUMN PublishDate DATETIME NOT NULL;
		ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ADD CONSTRAINT DF_{objectQualifier}EasyDNNNews_PublishDate DEFAULT GETUTCDATE() For PublishDate 
	END TRY
	BEGIN CATCH
	END CATCH
END
GO

IF EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNews' and column_name = 'UserID')
BEGIN TRY
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ALTER COLUMN UserID INT NULL;
	UPDATE {databaseOwner}[{objectQualifier}EasyDNNNews] SET UserID = NULL WHERE UserID NOT IN (SELECT UserID FROM {databaseOwner}[{objectQualifier}Users])
	IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNews_UserID]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNews]'))
		ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ADD CONSTRAINT [FK_{objectQualifier}EasyDNNNews_UserID] FOREIGN KEY([UserID]) REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID]) ON DELETE SET NULL
END TRY
BEGIN CATCH
END CATCH
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}EasyDNNNews_UserID] ON {databaseOwner}[{objectQualifier}EasyDNNNews] ([UserID] ASC)
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}EasyDNNNews_PublishDate] ON {databaseOwner}[{objectQualifier}EasyDNNNews] ([PublishDate] ASC)
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}EasyDNNNews_ExpireDate] ON {databaseOwner}[{objectQualifier}EasyDNNNews] ([ExpireDate] ASC)
CREATE INDEX IX_{objectQualifier}EasyDNNNews_Wizard_Suggestion ON {databaseOwner}[{objectQualifier}EasyDNNNews] ([PortalID], [HasPermissions], [HideDefaultLocale], [Approved], [Active], [PublishDate], [ExpireDate]) INCLUDE ([ArticleID], [UserID], [ArticleImage], [Featured])
CREATE INDEX IX_{objectQualifier}EasyDNNNews_Wizard_Suggestion2 ON {databaseOwner}[{objectQualifier}EasyDNNNews] ([PortalID], [HasPermissions], [EventArticle], [HideDefaultLocale], [PublishDate], [ExpireDate]) INCLUDE ([ArticleID], [UserID], [Approved], [Active])
CREATE INDEX IX_{objectQualifier}EasyDNNNews_Wizard_Suggestion3 ON {databaseOwner}[{objectQualifier}EasyDNNNews] ([PortalID], [HideDefaultLocale], [PublishDate], [ExpireDate]) INCLUDE ([ArticleID], [UserID])
CREATE INDEX IX_{objectQualifier}EasyDNNNews_Wizard_Suggestion4 ON {databaseOwner}[{objectQualifier}EasyDNNNews] ([PortalID], [UserID], [Approved], [Active], [PublishDate], [ExpireDate])
GO

IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'ListDocumentsTemplate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD ListDocumentsTemplate NVARCHAR(250) NULL
END
GO

IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsModuleSettings' and column_name = 'ListDocumentsTemplate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD ListDocumentsTemplate NVARCHAR(250) NULL
END
GO

IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'ListLinksTemplate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD ListLinksTemplate NVARCHAR(250) NULL
END
GO

IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsModuleSettings' and column_name = 'ListLinksTemplate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD ListLinksTemplate NVARCHAR(250) NULL
END
GO

IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'ListRelatedArticlesTemplate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD ListRelatedArticlesTemplate NVARCHAR(250) NULL
END
GO

IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsModuleSettings' and column_name = 'ListRelatedArticlesTemplate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD ListRelatedArticlesTemplate NVARCHAR(250) NULL
END
GO

IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'DetailsDocumentsTemplate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD DetailsDocumentsTemplate NVARCHAR(250) NULL
END
GO

IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsModuleSettings' and column_name = 'DetailsDocumentsTemplate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD DetailsDocumentsTemplate NVARCHAR(250) NULL
END
GO

IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNews' and column_name = 'DetailsDocumentsTemplate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ADD DetailsDocumentsTemplate NVARCHAR(250) NULL
END
GO

IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'DetailsLinksTemplate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD DetailsLinksTemplate NVARCHAR(250) NULL
END
GO

IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsModuleSettings' and column_name = 'DetailsLinksTemplate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD DetailsLinksTemplate NVARCHAR(250) NULL
END
GO

IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNews' and column_name = 'DetailsLinksTemplate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ADD DetailsLinksTemplate NVARCHAR(250) NULL
END
GO

IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'DetailsRelatedArticlesTemplate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD DetailsRelatedArticlesTemplate NVARCHAR(250) NULL
END
GO

IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsModuleSettings' and column_name = 'DetailsRelatedArticlesTemplate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD DetailsRelatedArticlesTemplate NVARCHAR(250) NULL
END
GO

IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNews' and column_name = 'DetailsRelatedArticlesTemplate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ADD DetailsRelatedArticlesTemplate NVARCHAR(250) NULL
END
GO

IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsMenuSettings' and column_name = 'ShowEmptyCategories')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsMenuSettings] ADD ShowEmptyCategories BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsMenuSettings_ShowEmptyCategories DEFAULT(1) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsModuleSettings' and column_name = 'CropResizeMode')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD CropResizeMode tinyint CONSTRAINT DF_{objectQualifier}EasyDNNNewsModuleSettings_CropResizeMode DEFAULT(0) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'CropResizeMode')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD CropResizeMode tinyint CONSTRAINT DF_{objectQualifier}EasyDNNNewsPortalSettings_CropResizeMode DEFAULT(0) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsModuleSettings' and column_name = 'CanonicalURLPMSource')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD CanonicalURLPMSource BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsModuleSettings_CanonicalURLPMSource DEFAULT(1) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsModuleSettings' and column_name = 'EnableCanonicalLink')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD EnableCanonicalLink BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsModuleSettings_EnableCanonicalLink DEFAULT(0) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'EnableCanonicalLink')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD EnableCanonicalLink BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsPortalSettings_EnableCanonicalLink DEFAULT(0) NOT NULL
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsSearchArticlesAndEventsWithoutRecurring]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsSearchArticlesAndEventsWithoutRecurring]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsSearchArticlesAndEventsWithoutRecurringCount]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsSearchArticlesAndEventsWithoutRecurringCount]
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsRoleNotifications' and column_name = 'SendToAllCategories')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsRoleNotifications] ADD SendToAllCategories BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsRoleNotifications_SendToAllCategories DEFAULT(1) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsUserNotifications' and column_name = 'SendToAllCategories')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsUserNotifications] ADD SendToAllCategories BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsUserNotifications_SendToAllCategories DEFAULT(1) NOT NULL
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsNotificationCategoryItems]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsNotificationCategoryItems](
	[CategoryID] [int] NOT NULL,
	[UserID] [int] NULL,
	[RoleID] [int] NULL,
 CONSTRAINT [IX_{objectQualifier}EasyDNNNewsNotificationCategoryItems] UNIQUE CLUSTERED ([CategoryID] ASC,[UserID] ASC,[RoleID] ASC)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsNotificationCategoryItems_EasyDNNNewsCategoryList]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsNotificationCategoryItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsNotificationCategoryItems]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsNotificationCategoryItems_EasyDNNNewsCategoryList] FOREIGN KEY([CategoryID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] ([CategoryID]) ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsNotificationCategoryItems_EasyDNNNewsCategoryList]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsNotificationCategoryItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsNotificationCategoryItems] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsNotificationCategoryItems_EasyDNNNewsCategoryList]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsNotificationCategoryItems_Roles]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsNotificationCategoryItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsNotificationCategoryItems]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsNotificationCategoryItems_Roles] FOREIGN KEY([RoleID])
REFERENCES {databaseOwner}[{objectQualifier}Roles] ([RoleID]) ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsNotificationCategoryItems_Roles]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsNotificationCategoryItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsNotificationCategoryItems] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsNotificationCategoryItems_Roles]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsNotificationCategoryItems_Users]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsNotificationCategoryItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsNotificationCategoryItems]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsNotificationCategoryItems_Users] FOREIGN KEY([UserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID]) ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsNotificationCategoryItems_Users]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsNotificationCategoryItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsNotificationCategoryItems] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsNotificationCategoryItems_Users]
GO

