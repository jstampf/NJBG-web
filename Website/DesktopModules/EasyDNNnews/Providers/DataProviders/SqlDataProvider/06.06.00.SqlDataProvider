DELETE FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRSSFeedImport] WHERE PortalID NOT IN (SELECT PortalID From {databaseOwner}[{objectQualifier}Portals]);
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsRSSFeedImport_Portals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsRSSFeedImport]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsRSSFeedImport]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsRSSFeedImport_Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID]) ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsRSSFeedImport_Portals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsRSSFeedImport]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsRSSFeedImport] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsRSSFeedImport_Portals]
GO
DELETE FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRSSFeedImport] WHERE CategoryID NOT IN (SELECT CategoryID From {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList]);
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsRSSFeedImport_EasyDNNNewsCategoryList]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsRSSFeedImport]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsRSSFeedImport]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsRSSFeedImport_EasyDNNNewsCategoryList] FOREIGN KEY([CategoryID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] ([CategoryID]) ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsRSSFeedImport_EasyDNNNewsCategoryList]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsRSSFeedImport]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsRSSFeedImport] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsRSSFeedImport_EasyDNNNewsCategoryList]
GO
DELETE FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRSSFeedImport] WHERE UserID NOT IN (SELECT UserID From {databaseOwner}[{objectQualifier}Users]);
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsRSSFeedImport_{objectQualifier}Users]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsRSSFeedImport]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsRSSFeedImport]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsRSSFeedImport_{objectQualifier}Users] FOREIGN KEY([UserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID]) ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsRSSFeedImport_{objectQualifier}Users]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsRSSFeedImport]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsRSSFeedImport] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsRSSFeedImport_{objectQualifier}Users]
GO

IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsModuleSettings' and column_name = 'RestrictionByDateRange')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD RestrictionByDateRange SMALLINT NULL
	EXEC ('ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD CONSTRAINT [chk_{objectQualifier}EasyDNNNewsModuleSettings_RestrictionByDateRange] CHECK (RestrictionByDateRange > 0 OR RestrictionByDateRange IS NULL)')
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'RestrictionByDateRange')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD RestrictionByDateRange SMALLINT NULL
	EXEC ('ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD CONSTRAINT [chk_{objectQualifier}EasyDNNNewsPortalSettings_RestrictionByDateRange] CHECK (RestrictionByDateRange > 0 OR RestrictionByDateRange IS NULL)')
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsModuleSettings' and column_name = 'AdminFuturePostsVisible')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD AdminFuturePostsVisible BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsModuleSettings_AdminFuturePostsVisible DEFAULT (0) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'AdminFuturePostsVisible')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD AdminFuturePostsVisible BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsPortalSettings_AdminFuturePostsVisible DEFAULT (0) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNfields' and column_name = 'SearchLogicalOperator')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfields] ADD SearchLogicalOperator TINYINT CONSTRAINT DF_{objectQualifier}EasyDNNfields_SearchLogicalOperator DEFAULT (1) NOT NULL
END
GO