IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'EventType')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD EventType TINYINT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'MaxNumberOfTickets')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD MaxNumberOfTickets INT NULL
END
GO
-- null znaci da je isto kao PublishDate
-- vrijednost predstavlja minute
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'EnableDaysBeforeStartDate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD EnableDaysBeforeStartDate INT NULL
END
GO
-- null znaci da je isto kao StartDate
-- vrijednost predstavlja minute
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'DisableDaysBeforeStartDate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD DisableDaysBeforeStartDate INT NULL
END
GO
-- null is for unlimited
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'EventRegisterMinTickets')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD EventRegisterMinTickets INT NULL
END
GO
-- null is for unlimited
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'EventRegisterMaxTickets')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD EventRegisterMaxTickets INT NULL
END
GO
-- Anonym, Site registration needed,..
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RegistrationType')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RegistrationType TINYINT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'EventRegistrationRole')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD EventRegistrationRole INT NULL
END
GO

IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RegistrationApproval')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RegistrationApproval BIT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'DisableFurtherRegistration')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD DisableFurtherRegistration BIT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'ShowRegistredUsersRole')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD ShowRegistredUsersRole INT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'ShowRegistredUsersTo')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD ShowRegistredUsersTo TINYINT NULL
END
GO

IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RegistrationCFtemplateID')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RegistrationCFtemplateID INT NULL
END
GO

-- ADD event registration permissions per article

IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsArticleRolePermissions' and column_name = 'EventRegistration')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] ADD EventRegistration BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsArticleRolePermissions_EventRegistration DEFAULT(0) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsArticleUserPermissions' and column_name = 'EventRegistration')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] ADD EventRegistration BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsArticleUserPermissions_EventRegistration DEFAULT(0) NOT NULL
END
GO

-- ADD event registration Permissions per role and user

IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsRolePremissionSettings' and column_name = 'EventRegistration')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] ADD EventRegistration BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsRolePremissionSettings_EventRegistration DEFAULT(0) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsUserPremissionSettings' and column_name = 'EventRegistration')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] ADD EventRegistration BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsUserPremissionSettings_EventRegistration DEFAULT(0) NOT NULL
END
GO

/***  new registration and post tables ***/

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPostSettings]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostSettings](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NOT NULL,
	[PostType] [tinyint] NOT NULL,
	[Name] [nvarchar](250) NOT NULL,
	[SentToSubscriptionUsers] [bit] NOT NULL,
	[SendToEventAtendees] [bit] NOT NULL,
	[EmailSubject] [nvarchar](256) NOT NULL,
	[Template] [nvarchar](max) NOT NULL,
	[SendType] [tinyint] NOT NULL,
	[SendIntervalValue] [int] NULL,
	[Active] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNNewsEventPostSettings] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NOT NULL,
	[Email] [nvarchar](256) NOT NULL,
	[FirstName] [nvarchar](50) NOT NULL,
	[LastName] [nvarchar](50) NOT NULL,
	[CreatedOnDate] [datetime] NOT NULL,
	[IPAddress] [nvarchar](50) NOT NULL,
	[EmailConfirmed] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF),
 CONSTRAINT [IX_{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers] UNIQUE NONCLUSTERED 
(
	[PortalID] ASC,
	[Email] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventUsers]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventUsers](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[DNNUserID] [int] NULL,
	[EmailAuthenticatedUserID] [int] NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNNewsEventUsers] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPostUsers]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostUsers](
	[PostSettingsID] [int] NOT NULL,
	[UserID] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNNewsEventPostUsers] PRIMARY KEY CLUSTERED 
(
	[PostSettingsID] ASC,
	[UserID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPostPortalSettings]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostPortalSettings](
	[PostSettingsID] [int] NOT NULL,
	[PortalID] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNNewsEventPostPortalSettings] PRIMARY KEY CLUSTERED 
(
	[PostSettingsID] ASC,
	[PortalID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPostRoles]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostRoles](
	[PostSettingsID] [int] NOT NULL,
	[RoleID] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNNewsEventPostRoles] PRIMARY KEY CLUSTERED 
(
	[PostSettingsID] ASC,
	[RoleID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsDataPostItems]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsDataPostItems](
	[PostSettingsID] [int] NOT NULL,
	[ArticleID] [int] NOT NULL,
	[Finished] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNNewsEventsDataPostItems] PRIMARY KEY CLUSTERED 
(
	[PostSettingsID] ASC,
	[ArticleID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsDataPostItemsDelete]'))
EXEC dbo.sp_executesql @statement = N'CREATE TRIGGER {databaseOwner}[{objectQualifier}EasyDNNNewsEventsDataPostItemsDelete]
    ON {databaseOwner}[{objectQualifier}EasyDNNNewsEventsDataPostItems]
    AFTER DELETE AS
BEGIN
	SET NOCOUNT ON;
    DELETE FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostSettings] WHERE id IN (SELECT PostSettingsID FROM deleted)
END
'
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPostPortalCategories]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostPortalCategories](
	[PortalID] [int] NOT NULL,
	[CategoryID] [int] NOT NULL,
	[ModuleID] [int] NOT NULL,
	[TabID] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNNewsEventPostPortalCategories] PRIMARY KEY CLUSTERED 
(
	[PortalID] ASC,
	[CategoryID] ASC,
	[ModuleID] ASC,
	[TabID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringDataPostItems]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringDataPostItems](
	[PostSettingsID] [int] NOT NULL,
	[ArticleID] [int] NOT NULL,
	[RecurringID] [int] NOT NULL,
	[Finished] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNNewsEventsRecurringDataPostItems] PRIMARY KEY CLUSTERED 
(
	[PostSettingsID] ASC,
	[ArticleID] ASC,
	[RecurringID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EventUserID] [int] NOT NULL,
	[ArticleID] [int] NULL,
	[RecurringArticleID] [int] NULL,
	[RecurringID] [int] NULL,
	[ApproveStatus] [tinyint] NOT NULL,
	[CreatedOnDate] [datetime] NOT NULL,
	[LastModifiedDate] [datetime] NOT NULL,
	[NumberOfTickets] [smallint] NOT NULL,
	[Message] [nvarchar](1024) NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNNewsEventsUserItems] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF),
 CONSTRAINT [IX_{objectQualifier}EasyDNNNewsEventsUserItems] UNIQUE NONCLUSTERED 
(
	[EventUserID] ASC,
	[ArticleID] ASC,
	[RecurringArticleID] ASC,
	[RecurringID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringDataPostItemsDelete]'))
EXEC dbo.sp_executesql @statement = N'CREATE TRIGGER {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringDataPostItemsDelete]
    ON {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringDataPostItems]
    AFTER DELETE AS
BEGIN
	SET NOCOUNT ON;
    DELETE FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostSettings] WHERE id IN (SELECT PostSettingsID FROM deleted)
END
'
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsEventEmailVerifications]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsEventEmailVerifications](
	[EventUserItemID] [int] NOT NULL,
	[ActivationCode] [uniqueidentifier] NOT NULL,
	[IsActivated] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNnewsEventEmailVerifications] PRIMARY KEY CLUSTERED 
(
	[EventUserItemID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationValues]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationValues](
	[CustomFieldID] [int] NOT NULL,
	[EventUserItemID] [int] NOT NULL,
	[RText] [nvarchar](max) NULL,
	[Decimal] [decimal](18, 4) NULL,
	[Int] [int] NULL,
	[Text] [nvarchar](300) NULL,
	[Bit] [bit] NULL,
	[DateTime] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNfieldsRegistrationValues] PRIMARY KEY CLUSTERED 
(
	[CustomFieldID] ASC,
	[EventUserItemID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationMultiSelected]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationMultiSelected](
	[FieldElementID] [int] NOT NULL,
	[CustomFieldID] [int] NOT NULL,
	[EventUserItemID] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNfieldsRegistrationMultiSelected] PRIMARY KEY CLUSTERED 
(
	[FieldElementID] ASC,
	[CustomFieldID] ASC,
	[EventUserItemID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[DF_{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers_CreatedOnDate]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers]'))
Begin
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[DF_{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers_CreatedOnDate]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers] ADD  CONSTRAINT [DF_{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers_CreatedOnDate]  DEFAULT (getutcdate()) FOR [CreatedOnDate]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[DF_{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers_Confirmed]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers]'))
Begin
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[DF_{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers_Confirmed]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers] ADD  CONSTRAINT [DF_{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers_Confirmed]  DEFAULT ((0)) FOR [EmailConfirmed]
END


End
GO
IF NOT EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNNewsEventsUserItems_checkValues]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems]  WITH CHECK ADD  CONSTRAINT [CK_{objectQualifier}EasyDNNNewsEventsUserItems_checkValues] CHECK  (((1)=case when [ArticleID] IS NOT NULL AND [RecurringArticleID] IS NULL AND [RecurringID] IS NULL OR [ArticleID] IS NULL AND [RecurringArticleID] IS NOT NULL AND [RecurringID] IS NOT NULL then (1) else (0) end))
GO
IF  EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNNewsEventsUserItems_checkValues]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] CHECK CONSTRAINT [CK_{objectQualifier}EasyDNNNewsEventsUserItems_checkValues]
GO
IF NOT EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNNewsEventUsers_ValueCheck]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventUsers]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventUsers]  WITH CHECK ADD  CONSTRAINT [CK_{objectQualifier}EasyDNNNewsEventUsers_ValueCheck] CHECK  (((1)=case when [EmailAuthenticatedUserID] IS NULL AND [DNNUserID] IS NOT NULL OR [EmailAuthenticatedUserID] IS NOT NULL AND [DNNUserID] IS NULL then (1) else (0) end))
GO
IF  EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNNewsEventUsers_ValueCheck]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventUsers]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventUsers] CHECK CONSTRAINT [CK_{objectQualifier}EasyDNNNewsEventUsers_ValueCheck]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsRegistrationMultiSelected_EasyDNNfieldsMultiElements]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationMultiSelected]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationMultiSelected]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsRegistrationMultiSelected_EasyDNNfieldsMultiElements] FOREIGN KEY([FieldElementID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiElements] ([FieldElementID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsRegistrationMultiSelected_EasyDNNfieldsMultiElements]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationMultiSelected]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationMultiSelected] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsRegistrationMultiSelected_EasyDNNfieldsMultiElements]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsRegistrationMultiSelected_EasyDNNNewsEventsUserItems]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationMultiSelected]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationMultiSelected]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsRegistrationMultiSelected_EasyDNNNewsEventsUserItems] FOREIGN KEY([EventUserItemID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] ([Id])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsRegistrationMultiSelected_EasyDNNNewsEventsUserItems]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationMultiSelected]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationMultiSelected] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsRegistrationMultiSelected_EasyDNNNewsEventsUserItems]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsRegistrationValues_EasyDNNfields]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationValues]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationValues]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsRegistrationValues_EasyDNNfields] FOREIGN KEY([CustomFieldID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNfields] ([CustomFieldID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsRegistrationValues_EasyDNNfields]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationValues]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationValues] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsRegistrationValues_EasyDNNfields]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsRegistrationValues_EasyDNNNewsEventsUserItems]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationValues]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationValues]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsRegistrationValues_EasyDNNNewsEventsUserItems] FOREIGN KEY([EventUserItemID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] ([Id])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNfieldsRegistrationValues_EasyDNNNewsEventsUserItems]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationValues]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNfieldsRegistrationValues] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNfieldsRegistrationValues_EasyDNNNewsEventsUserItems]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers_Portals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers_Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers_Portals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers_Portals]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsEventEmailVerifications_EasyDNNNewsEventsUserItems]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsEventEmailVerifications]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsEventEmailVerifications]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNnewsEventEmailVerifications_EasyDNNNewsEventsUserItems] FOREIGN KEY([EventUserItemID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] ([Id])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsEventEmailVerifications_EasyDNNNewsEventsUserItems]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsEventEmailVerifications]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsEventEmailVerifications] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNnewsEventEmailVerifications_EasyDNNNewsEventsUserItems]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventPostPortalCategories_EasyDNNNewsCategoryList]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPostPortalCategories]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostPortalCategories]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventPostPortalCategories_EasyDNNNewsCategoryList] FOREIGN KEY([CategoryID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] ([CategoryID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventPostPortalCategories_EasyDNNNewsCategoryList]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPostPortalCategories]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostPortalCategories] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventPostPortalCategories_EasyDNNNewsCategoryList]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventPostPortalCategories_Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPostPortalCategories]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostPortalCategories]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventPostPortalCategories_Modules] FOREIGN KEY([ModuleID])
REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventPostPortalCategories_Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPostPortalCategories]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostPortalCategories] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventPostPortalCategories_Modules]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventPostPortalCategories_Tabs]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPostPortalCategories]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostPortalCategories]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventPostPortalCategories_Tabs] FOREIGN KEY([TabID])
REFERENCES {databaseOwner}[{objectQualifier}Tabs] ([TabID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventPostPortalCategories_Tabs]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPostPortalCategories]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostPortalCategories] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventPostPortalCategories_Tabs]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventPostPortalSettings_EasyDNNNewsEventPostSettings]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPostPortalSettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostPortalSettings]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventPostPortalSettings_EasyDNNNewsEventPostSettings] FOREIGN KEY([PostSettingsID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostSettings] ([Id])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventPostPortalSettings_EasyDNNNewsEventPostSettings]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPostPortalSettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostPortalSettings] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventPostPortalSettings_EasyDNNNewsEventPostSettings]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventPostRoles_EasyDNNNewsEventPostSettings]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPostRoles]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostRoles]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventPostRoles_EasyDNNNewsEventPostSettings] FOREIGN KEY([PostSettingsID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostSettings] ([Id])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventPostRoles_EasyDNNNewsEventPostSettings]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPostRoles]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostRoles] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventPostRoles_EasyDNNNewsEventPostSettings]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventPostRoles_Roles]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPostRoles]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostRoles]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventPostRoles_Roles] FOREIGN KEY([RoleID])
REFERENCES {databaseOwner}[{objectQualifier}Roles] ([RoleID])
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventPostRoles_Roles]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPostRoles]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostRoles] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventPostRoles_Roles]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventPostSettings_Portals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPostSettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostSettings]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventPostSettings_Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventPostSettings_Portals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPostSettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostSettings] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventPostSettings_Portals]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventPostUsers_EasyDNNNewsEventPostSettings]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPostUsers]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostUsers]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventPostUsers_EasyDNNNewsEventPostSettings] FOREIGN KEY([PostSettingsID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostSettings] ([Id])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventPostUsers_EasyDNNNewsEventPostSettings]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPostUsers]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostUsers] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventPostUsers_EasyDNNNewsEventPostSettings]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventPostUsers_Users]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPostUsers]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostUsers]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventPostUsers_Users] FOREIGN KEY([UserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventPostUsers_Users]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventPostUsers]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostUsers] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventPostUsers_Users]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsDataPostItems_EasyDNNNewsEventPostSettings]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsDataPostItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsDataPostItems]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsDataPostItems_EasyDNNNewsEventPostSettings] FOREIGN KEY([PostSettingsID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostSettings] ([Id])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsDataPostItems_EasyDNNNewsEventPostSettings]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsDataPostItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsDataPostItems] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsDataPostItems_EasyDNNNewsEventPostSettings]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsDataPostItems_EasyDNNNewsEventsData]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsDataPostItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsDataPostItems]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsDataPostItems_EasyDNNNewsEventsData] FOREIGN KEY([ArticleID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ([ArticleID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsDataPostItems_EasyDNNNewsEventsData]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsDataPostItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsDataPostItems] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsDataPostItems_EasyDNNNewsEventsData]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsRecurringDataPostItems_EasyDNNNewsEventPostSettings]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringDataPostItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringDataPostItems]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsRecurringDataPostItems_EasyDNNNewsEventPostSettings] FOREIGN KEY([PostSettingsID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsEventPostSettings] ([Id])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsRecurringDataPostItems_EasyDNNNewsEventPostSettings]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringDataPostItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringDataPostItems] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsRecurringDataPostItems_EasyDNNNewsEventPostSettings]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsRecurringDataPostItems_EasyDNNNewsEventsRecurringData]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringDataPostItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringDataPostItems]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsRecurringDataPostItems_EasyDNNNewsEventsRecurringData] FOREIGN KEY([ArticleID], [RecurringID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] ([ArticleID], [RecurringID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsRecurringDataPostItems_EasyDNNNewsEventsRecurringData]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringDataPostItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringDataPostItems] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsRecurringDataPostItems_EasyDNNNewsEventsRecurringData]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsUserItems_EasyDNNNewsEventsData]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsUserItems_EasyDNNNewsEventsData] FOREIGN KEY([ArticleID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ([ArticleID])
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsUserItems_EasyDNNNewsEventsData]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsUserItems_EasyDNNNewsEventsData]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsUserItems_EasyDNNNewsEventsRecurringData]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsUserItems_EasyDNNNewsEventsRecurringData] FOREIGN KEY([RecurringArticleID], [RecurringID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] ([ArticleID], [RecurringID])
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsUserItems_EasyDNNNewsEventsRecurringData]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsUserItems_EasyDNNNewsEventsRecurringData]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsUserItems_EasyDNNNewsEventUsers]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsUserItems_EasyDNNNewsEventUsers] FOREIGN KEY([EventUserID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsEventUsers] ([Id])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsUserItems_EasyDNNNewsEventUsers]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsUserItems_EasyDNNNewsEventUsers]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventUsers_EasyDNNNewsEmailAuthenticatedUsers]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventUsers]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventUsers]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventUsers_EasyDNNNewsEmailAuthenticatedUsers] FOREIGN KEY([EmailAuthenticatedUserID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers] ([Id])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventUsers_EasyDNNNewsEmailAuthenticatedUsers]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventUsers]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventUsers] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventUsers_EasyDNNNewsEmailAuthenticatedUsers]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventUsers_EasyDNNNewsEventUsers]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventUsers]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventUsers]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventUsers_EasyDNNNewsEventUsers] FOREIGN KEY([DNNUserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
ON DELETE SET NULL
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventUsers_EasyDNNNewsEventUsers]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventUsers]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventUsers] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventUsers_EasyDNNNewsEventUsers]
GO
