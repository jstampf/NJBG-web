/*** category menu articles or events count selection ***/
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsMenuSettings' and column_name = 'CountArticles')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsMenuSettings] ADD CountArticles BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsMenuSettings_CountArticles DEFAULT(1) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsMenuSettings' and column_name = 'CountEvents')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsMenuSettings] ADD CountEvents BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsMenuSettings_CountEvents DEFAULT(1) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsMenuSettings' and column_name = 'CountEventsLimitByDays')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsMenuSettings] ADD CountEventsLimitByDays INT NULL
	BEGIN TRY
		EXEC dbo.sp_executesql @statement = N'UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsMenuSettings] SET [CountEventsLimitByDays] = 0';
	END TRY
	BEGIN CATCH
	END CATCH
END
GO
/*** end ***/

IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'ShowArticles')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD ShowArticles BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsPortalSettings_ShowArticles DEFAULT(1) NOT NULL;
	BEGIN TRY
		EXEC dbo.sp_executesql @statement = N'UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] SET [ShowArticles] = 0 WHERE [ShowOnlyEvents] = 1; UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] SET [ShowOnlyEvents] = 1, [PastEventsLimit] = ''Limit'', [PastEventsLimitDays] = 0 WHERE [ShowOnlyEvents] = 0;';
	END TRY
	BEGIN CATCH
	END CATCH
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsModuleSettings' and column_name = 'ShowArticles')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD ShowArticles BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsModuleSettings_ShowArticles DEFAULT(1) NOT NULL;
	BEGIN TRY
		EXEC dbo.sp_executesql @statement = N'UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] SET [ShowArticles] = 0 WHERE [ShowOnlyEvents] = 1; UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] SET [ShowOnlyEvents] = 1, [PastEventsLimit] = ''Limit'', [PastEventsLimitDays] = 0 WHERE [ShowOnlyEvents] = 0;';
	END TRY
	BEGIN CATCH
	END CATCH
END
GO

IF EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNews' and column_name = 'Title')
BEGIN
	DELETE FROM {databaseOwner}[{objectQualifier}EasyDNNNews] WHERE Title IS NULL OR LEN([Title]) = 0
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ALTER COLUMN Title nvarchar(800) NOT NULL;
	BEGIN TRY
		IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE [name] = (N'chk_{objectQualifier}EasyDNNNews_Title_Lenght') AND type = 'C')
		BEGIN
			ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ADD CONSTRAINT [chk_{objectQualifier}EasyDNNNews_Title_Lenght] CHECK (LEN([Title]) > 0)
		END
	END TRY
	BEGIN CATCH
	END CATCH
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData](
	[ArticleID] [int] NOT NULL,
	[RecurringID] [int] NOT NULL,
	[StartDateTime] [datetime] NOT NULL,
	[EndDateTime] [datetime] NOT NULL,
	CONSTRAINT [PK_{objectQualifier}EasyDNNNewsEventsRecurringData] PRIMARY KEY CLUSTERED ([ArticleID] ASC, [RecurringID] ASC)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData]') AND name = N'IX_{objectQualifier}EasyDNNNewsEventsRecurringData_EndDateTime')
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}EasyDNNNewsEventsRecurringData_EndDateTime] ON {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] 
([EndDateTime] ASC) WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF)
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData]') AND name = N'IX_{objectQualifier}EasyDNNNewsEventsRecurringData_StartDateTime')
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}EasyDNNNewsEventsRecurringData_StartDateTime] ON {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] 
([StartDateTime] ASC)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF)
GO
IF NOT EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[chk_{objectQualifier}StartDateTimeEndDateTime]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData]  WITH CHECK ADD  CONSTRAINT [chk_{objectQualifier}StartDateTimeEndDateTime] CHECK  (([EndDateTime]>=[StartDateTime]))
GO
IF  EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[chk_{objectQualifier}StartDateTimeEndDateTime]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] CHECK CONSTRAINT [chk_{objectQualifier}StartDateTimeEndDateTime]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsRecurringData_EasyDNNNewsEventsData]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsRecurringData_EasyDNNNewsEventsData] FOREIGN KEY([ArticleID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ([ArticleID]) ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsRecurringData_EasyDNNNewsEventsData]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsRecurringData_EasyDNNNewsEventsData]
GO


IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'Recurring')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD Recurring BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsEventsData_Recurring DEFAULT(0) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringType')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringType TINYINT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringHour')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringHour INT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringDay')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringDay INT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringWeek')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringWeek INT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringWeekDays')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringWeekDays NVARCHAR(20) NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringMonthType')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringMonthType TINYINT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringMonthDay')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringMonthDay TINYINT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringMonthDayOfWeek')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringMonthDayOfWeek TINYINT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringMonth')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringMonth INT NULL
END
GO

IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringYearType')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringYearType TINYINT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringYearMonthDay')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringYearMonthDay TINYINT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringYearDayOfWeek')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringYearDayOfWeek TINYINT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringYearMonth')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringYearMonth TINYINT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringYear')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringYear INT NULL
END
GO

IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringEndType')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringEndType TINYINT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringEndByDate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringEndByDate DATETIME NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'EndsAfterOccurrences')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD EndsAfterOccurrences INT NULL
END
GO

IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'UpcomingOccurrences')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD UpcomingOccurrences INT NULL
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCalendarEventsArchive]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCalendarEventsArchive]
GO

/*** remove old procedures ***/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForListDisplay]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForListDisplay]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountForPageing]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountForPageing]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarAll]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarAll]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarOnlyEvents]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarOnlyEvents]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarOnlyNews]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarOnlyNews]
GO
/*** end ***/

/*** remove old calendar procedures ***/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarAll]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarAll]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarOnlyEvents]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarOnlyEvents]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarOnlyNews]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarOnlyNews]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetUpcomingEvents]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetUpcomingEvents]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForListDisplayByDateWithEventsRange]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForListDisplayByDateWithEventsRange]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountForPageingDateWithEventsRange]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountForPageingDateWithEventsRange]
GO
/*** end ***/

/*** remove old calendar procedures ***/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCategoryMenu]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCategoryMenu]
GO
/*** end ***/